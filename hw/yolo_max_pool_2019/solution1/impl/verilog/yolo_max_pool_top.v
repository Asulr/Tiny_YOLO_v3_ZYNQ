// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="yolo_max_pool_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.669000,HLS_SYN_LAT=5537822,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=4345,HLS_SYN_LUT=3475,HLS_VERSION=2019_1}" *)

module yolo_max_pool_top (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state18 = 5'd16;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inStream_V_data_0_data_out;
wire    inStream_V_data_0_vld_in;
wire    inStream_V_data_0_vld_out;
wire    inStream_V_data_0_ack_in;
reg    inStream_V_data_0_ack_out;
reg   [31:0] inStream_V_data_0_payload_A;
reg   [31:0] inStream_V_data_0_payload_B;
reg    inStream_V_data_0_sel_rd;
reg    inStream_V_data_0_sel_wr;
wire    inStream_V_data_0_sel;
wire    inStream_V_data_0_load_A;
wire    inStream_V_data_0_load_B;
reg   [1:0] inStream_V_data_0_state;
wire    inStream_V_data_0_state_cmp_full;
reg   [3:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [3:0] inStream_V_keep_V_0_payload_A;
reg   [3:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [3:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [3:0] inStream_V_strb_V_0_payload_A;
reg   [3:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [31:0] outStream_V_data_1_data_out;
wire    outStream_V_data_1_vld_in;
wire    outStream_V_data_1_vld_out;
wire    outStream_V_data_1_ack_in;
wire    outStream_V_data_1_ack_out;
reg   [31:0] outStream_V_data_1_payload_A;
reg   [31:0] outStream_V_data_1_payload_B;
reg    outStream_V_data_1_sel_rd;
reg    outStream_V_data_1_sel_wr;
wire    outStream_V_data_1_sel;
wire    outStream_V_data_1_load_A;
wire    outStream_V_data_1_load_B;
reg   [1:0] outStream_V_data_1_state;
wire    outStream_V_data_1_state_cmp_full;
reg   [3:0] outStream_V_keep_V_1_data_out;
wire    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [3:0] outStream_V_keep_V_1_payload_A;
reg   [3:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [3:0] outStream_V_strb_V_1_data_out;
wire    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [3:0] outStream_V_strb_V_1_payload_A;
reg   [3:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
wire    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
wire    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
wire    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
wire    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln17_reg_2901;
wire    call_ln73_write_output_fu_654_outStream_TDATA_blk_n;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0;
reg   [0:0] select_ln23_1_reg_3024;
reg   [0:0] select_ln23_1_reg_3024_pp0_iter6_reg;
reg   [21:0] indvar_flatten739_reg_547;
reg   [7:0] out_row_0_reg_558;
reg   [14:0] indvar_flatten413_reg_570;
reg   [1:0] row_stride_0_reg_582;
reg   [13:0] indvar_flatten167_reg_594;
reg   [7:0] out_col_0_reg_606;
reg   [6:0] indvar_flatten_reg_618;
reg   [1:0] col_stride_0_reg_630;
reg   [4:0] input_ch_idx_0_reg_642;
wire   [3:0] add_ln10_fu_688_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] add_ln627_fu_694_p2;
wire   [0:0] icmp_ln10_fu_700_p2;
wire   [8:0] shl_ln_fu_706_p3;
reg   [8:0] shl_ln_reg_2851;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
reg    ap_block_state17_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln62_fu_714_p2;
reg   [0:0] icmp_ln62_reg_2856;
reg   [0:0] icmp_ln62_reg_2856_pp0_iter1_reg;
wire   [0:0] icmp_ln34_fu_734_p2;
reg   [0:0] icmp_ln34_reg_2861;
wire   [0:0] icmp_ln55_fu_740_p2;
reg   [0:0] icmp_ln55_reg_2866;
wire   [8:0] shl_ln1_fu_746_p3;
reg   [8:0] shl_ln1_reg_2871;
wire   [0:0] icmp_ln62_1_fu_754_p2;
reg   [0:0] icmp_ln62_1_reg_2876;
reg   [0:0] icmp_ln62_1_reg_2876_pp0_iter1_reg;
reg   [0:0] icmp_ln62_1_reg_2876_pp0_iter2_reg;
wire   [8:0] col_idx_fu_764_p2;
reg   [8:0] col_idx_reg_2881;
wire  signed [9:0] conv_count_1_fu_792_p3;
reg  signed [9:0] conv_count_1_reg_2886;
wire   [0:0] and_ln55_fu_806_p2;
reg   [0:0] and_ln55_reg_2891;
wire   [8:0] add_ln23_fu_816_p2;
reg   [8:0] add_ln23_reg_2896;
wire   [0:0] icmp_ln17_fu_822_p2;
reg   [0:0] icmp_ln17_reg_2901_pp0_iter1_reg;
reg   [0:0] icmp_ln17_reg_2901_pp0_iter2_reg;
wire   [21:0] add_ln17_fu_828_p2;
reg   [21:0] add_ln17_reg_2905;
wire   [0:0] icmp_ln19_fu_834_p2;
reg   [0:0] icmp_ln19_reg_2910;
reg   [0:0] icmp_ln19_reg_2910_pp0_iter1_reg;
wire   [0:0] xor_ln17_fu_840_p2;
reg   [0:0] xor_ln17_reg_2922;
reg   [0:0] xor_ln17_reg_2922_pp0_iter1_reg;
reg   [0:0] xor_ln17_reg_2922_pp0_iter2_reg;
wire   [0:0] icmp_ln23_fu_846_p2;
reg   [0:0] icmp_ln23_reg_2932;
wire   [0:0] icmp_ln21_fu_852_p2;
reg   [0:0] icmp_ln21_reg_2937;
wire   [0:0] or_ln19_1_fu_864_p2;
reg   [0:0] or_ln19_1_reg_2942;
reg   [0:0] or_ln19_1_reg_2942_pp0_iter1_reg;
reg   [0:0] or_ln19_1_reg_2942_pp0_iter2_reg;
wire   [7:0] out_row_fu_870_p2;
reg   [7:0] out_row_reg_2950;
reg    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state10_pp0_stage1_iter3;
wire    ap_block_state12_pp0_stage1_iter4;
wire    ap_block_state14_pp0_stage1_iter5;
wire    ap_block_state16_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] select_ln17_4_fu_936_p3;
reg   [7:0] select_ln17_4_reg_2955;
wire   [0:0] or_ln19_fu_949_p2;
reg   [0:0] or_ln19_reg_2960;
wire   [0:0] select_ln19_1_fu_982_p3;
reg   [0:0] select_ln19_1_reg_2967;
wire   [0:0] and_ln19_3_fu_1021_p2;
reg   [0:0] and_ln19_3_reg_2973;
reg   [0:0] and_ln19_3_reg_2973_pp0_iter1_reg;
reg   [0:0] and_ln19_3_reg_2973_pp0_iter2_reg;
wire   [1:0] select_ln19_6_fu_1026_p3;
reg   [1:0] select_ln19_6_reg_2981;
wire   [7:0] out_col_fu_1034_p2;
reg   [7:0] out_col_reg_2986;
reg   [7:0] out_col_reg_2986_pp0_iter1_reg;
reg   [7:0] out_col_reg_2986_pp0_iter2_reg;
wire   [8:0] shl_ln31_mid1_fu_1059_p3;
reg   [8:0] shl_ln31_mid1_reg_2992;
wire   [0:0] and_ln21_1_fu_1087_p2;
reg   [0:0] and_ln21_1_reg_2998;
wire   [7:0] select_ln21_5_fu_1093_p3;
reg   [7:0] select_ln21_5_reg_3005;
wire   [4:0] select_ln23_fu_1119_p3;
reg   [4:0] select_ln23_reg_3010;
reg   [4:0] select_ln23_reg_3010_pp0_iter1_reg;
reg   [4:0] select_ln23_reg_3010_pp0_iter2_reg;
wire   [8:0] add_ln31_1_fu_1131_p2;
reg   [8:0] add_ln31_1_reg_3017;
wire   [0:0] select_ln23_1_fu_1149_p3;
reg   [0:0] select_ln23_1_reg_3024_pp0_iter1_reg;
reg   [0:0] select_ln23_1_reg_3024_pp0_iter2_reg;
reg   [0:0] select_ln23_1_reg_3024_pp0_iter3_reg;
reg   [0:0] select_ln23_1_reg_3024_pp0_iter4_reg;
reg   [0:0] select_ln23_1_reg_3024_pp0_iter5_reg;
wire   [1:0] select_ln23_5_fu_1157_p3;
reg   [1:0] select_ln23_5_reg_3028;
reg   [31:0] tmp_data_reg_3033;
reg   [3:0] tmp_keep_V_reg_3038;
reg   [3:0] tmp_keep_V_reg_3038_pp0_iter1_reg;
reg   [3:0] tmp_keep_V_reg_3038_pp0_iter2_reg;
reg   [3:0] tmp_keep_V_reg_3038_pp0_iter3_reg;
reg   [3:0] tmp_keep_V_reg_3038_pp0_iter4_reg;
reg   [3:0] tmp_keep_V_reg_3038_pp0_iter5_reg;
reg   [3:0] tmp_keep_V_reg_3038_pp0_iter6_reg;
reg   [3:0] tmp_strb_V_reg_3043;
reg   [3:0] tmp_strb_V_reg_3043_pp0_iter1_reg;
reg   [3:0] tmp_strb_V_reg_3043_pp0_iter2_reg;
reg   [3:0] tmp_strb_V_reg_3043_pp0_iter3_reg;
reg   [3:0] tmp_strb_V_reg_3043_pp0_iter4_reg;
reg   [3:0] tmp_strb_V_reg_3043_pp0_iter5_reg;
reg   [3:0] tmp_strb_V_reg_3043_pp0_iter6_reg;
reg   [1:0] tmp_user_V_reg_3048;
reg   [1:0] tmp_user_V_reg_3048_pp0_iter1_reg;
reg   [1:0] tmp_user_V_reg_3048_pp0_iter2_reg;
reg   [1:0] tmp_user_V_reg_3048_pp0_iter3_reg;
reg   [1:0] tmp_user_V_reg_3048_pp0_iter4_reg;
reg   [1:0] tmp_user_V_reg_3048_pp0_iter5_reg;
reg   [1:0] tmp_user_V_reg_3048_pp0_iter6_reg;
reg   [4:0] tmp_id_V_reg_3053;
reg   [4:0] tmp_id_V_reg_3053_pp0_iter1_reg;
reg   [4:0] tmp_id_V_reg_3053_pp0_iter2_reg;
reg   [4:0] tmp_id_V_reg_3053_pp0_iter3_reg;
reg   [4:0] tmp_id_V_reg_3053_pp0_iter4_reg;
reg   [4:0] tmp_id_V_reg_3053_pp0_iter5_reg;
reg   [4:0] tmp_id_V_reg_3053_pp0_iter6_reg;
reg   [5:0] tmp_dest_V_reg_3058;
reg   [5:0] tmp_dest_V_reg_3058_pp0_iter1_reg;
reg   [5:0] tmp_dest_V_reg_3058_pp0_iter2_reg;
reg   [5:0] tmp_dest_V_reg_3058_pp0_iter3_reg;
reg   [5:0] tmp_dest_V_reg_3058_pp0_iter4_reg;
reg   [5:0] tmp_dest_V_reg_3058_pp0_iter5_reg;
reg   [5:0] tmp_dest_V_reg_3058_pp0_iter6_reg;
wire   [13:0] mul_ln729_fu_1193_p2;
reg   [13:0] mul_ln729_reg_3063;
wire   [6:0] select_ln23_6_fu_1205_p3;
reg   [6:0] select_ln23_6_reg_3070;
wire   [13:0] select_ln21_7_fu_1219_p3;
reg   [13:0] select_ln21_7_reg_3075;
wire   [14:0] select_ln19_8_fu_1233_p3;
reg   [14:0] select_ln19_8_reg_3080;
wire  signed [63:0] sext_ln729_fu_1397_p1;
reg  signed [63:0] sext_ln729_reg_3085;
wire   [13:0] add_ln835_fu_1402_p2;
reg   [13:0] add_ln835_reg_3090;
wire   [13:0] add_ln835_1_fu_1407_p2;
reg   [13:0] add_ln835_1_reg_3095;
reg   [13:0] add_ln835_1_reg_3095_pp0_iter2_reg;
reg   [12:0] line_buff_group_val_5_reg_3100;
wire   [4:0] input_ch_idx_fu_1412_p2;
reg   [4:0] input_ch_idx_reg_3105;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] select_ln17_2_fu_1422_p3;
reg   [0:0] select_ln17_2_reg_3110;
reg   [0:0] select_ln17_2_reg_3110_pp0_iter2_reg;
reg   [12:0] line_buff_group_val_6_reg_3120;
reg   [12:0] line_buff_group_val_6_reg_3120_pp0_iter3_reg;
wire   [3:0] trunc_ln58_fu_1433_p1;
reg   [3:0] trunc_ln58_reg_3125;
reg   [3:0] trunc_ln58_reg_3125_pp0_iter3_reg;
reg   [3:0] trunc_ln58_reg_3125_pp0_iter4_reg;
reg   [3:0] trunc_ln58_reg_3125_pp0_iter5_reg;
reg   [12:0] line_buff_group_val_7_reg_3138;
reg   [12:0] line_buff_group_val_7_reg_3138_pp0_iter4_reg;
reg   [12:0] line_buff_group_val_7_reg_3138_pp0_iter5_reg;
wire   [31:0] tmp_1_fu_1590_p18;
reg   [31:0] tmp_1_reg_3143;
wire   [0:0] and_ln62_1_fu_1639_p2;
reg   [0:0] and_ln62_1_reg_3150;
reg   [0:0] and_ln62_1_reg_3150_pp0_iter4_reg;
reg   [0:0] and_ln62_1_reg_3150_pp0_iter5_reg;
reg   [0:0] and_ln62_1_reg_3150_pp0_iter6_reg;
wire   [31:0] select_ln117_fu_1765_p3;
reg   [31:0] select_ln117_reg_3155;
wire   [31:0] tmp_4_fu_1820_p18;
reg   [31:0] tmp_4_reg_3162;
wire   [31:0] select_ln117_1_fu_2020_p3;
reg   [31:0] select_ln117_1_reg_3169;
reg   [31:0] select_ln117_1_reg_3169_pp0_iter5_reg;
wire   [31:0] tmp_8_fu_2074_p18;
reg   [31:0] tmp_8_reg_3176;
wire   [31:0] select_ln117_2_fu_2274_p3;
reg   [31:0] select_ln117_2_reg_3183;
wire   [31:0] tmp_11_fu_2328_p18;
reg   [31:0] tmp_11_reg_3190;
wire   [0:0] icmp_ln117_12_fu_2383_p2;
reg   [0:0] icmp_ln117_12_reg_3197;
wire   [0:0] icmp_ln117_13_fu_2389_p2;
reg   [0:0] icmp_ln117_13_reg_3202;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [12:0] line_buff_group_val_s_address0;
reg    line_buff_group_val_s_ce0;
reg    line_buff_group_val_s_we0;
wire   [31:0] line_buff_group_val_s_q0;
wire   [12:0] line_buff_group_val_s_address1;
reg    line_buff_group_val_s_ce1;
wire   [31:0] line_buff_group_val_s_q1;
reg   [12:0] line_buff_group_val_1_address0;
reg    line_buff_group_val_1_ce0;
reg    line_buff_group_val_1_we0;
wire   [31:0] line_buff_group_val_1_q0;
reg   [12:0] line_buff_group_val_1_address1;
reg    line_buff_group_val_1_ce1;
wire   [31:0] line_buff_group_val_1_q1;
wire    call_ln73_write_output_fu_654_ap_start;
wire    call_ln73_write_output_fu_654_ap_done;
wire    call_ln73_write_output_fu_654_ap_idle;
wire    call_ln73_write_output_fu_654_ap_ready;
wire   [31:0] call_ln73_write_output_fu_654_val_output;
wire   [31:0] call_ln73_write_output_fu_654_outStream_TDATA;
wire    call_ln73_write_output_fu_654_outStream_TVALID;
wire    call_ln73_write_output_fu_654_outStream_TREADY;
wire   [3:0] call_ln73_write_output_fu_654_outStream_TKEEP;
wire   [3:0] call_ln73_write_output_fu_654_outStream_TSTRB;
wire   [1:0] call_ln73_write_output_fu_654_outStream_TUSER;
wire   [0:0] call_ln73_write_output_fu_654_outStream_TLAST;
wire   [4:0] call_ln73_write_output_fu_654_outStream_TID;
wire   [5:0] call_ln73_write_output_fu_654_outStream_TDEST;
reg    call_ln73_write_output_fu_654_ap_ce;
wire    ap_block_state3_pp0_stage0_iter0_ignore_call128;
wire    ap_block_state5_pp0_stage0_iter1_ignore_call128;
wire    ap_block_state7_pp0_stage0_iter2_ignore_call128;
wire    ap_block_state9_pp0_stage0_iter3_ignore_call128;
wire    ap_block_state11_pp0_stage0_iter4_ignore_call128;
wire    ap_block_state13_pp0_stage0_iter5_ignore_call128;
wire    ap_block_state15_pp0_stage0_iter6_ignore_call128;
wire    ap_block_state17_pp0_stage0_iter7_ignore_call128;
wire    ap_block_pp0_stage0_11001_ignoreCallOp494;
reg   [3:0] phi_ln10_reg_525;
reg   [12:0] phi_mul_reg_536;
reg   [21:0] ap_phi_mux_indvar_flatten739_phi_fu_551_p4;
reg   [7:0] ap_phi_mux_out_row_0_phi_fu_562_p4;
reg   [14:0] ap_phi_mux_indvar_flatten413_phi_fu_574_p4;
reg   [1:0] ap_phi_mux_row_stride_0_phi_fu_586_p4;
reg   [13:0] ap_phi_mux_indvar_flatten167_phi_fu_598_p4;
reg   [7:0] ap_phi_mux_out_col_0_phi_fu_610_p4;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_622_p4;
reg   [1:0] ap_phi_mux_col_stride_0_phi_fu_634_p4;
reg   [4:0] ap_phi_mux_input_ch_idx_0_phi_fu_646_p4;
reg    call_ln73_write_output_fu_654_ap_start_reg;
wire  signed [63:0] sext_ln835_fu_1428_p1;
wire  signed [63:0] sext_ln835_1_fu_1537_p1;
reg   [31:0] window_group_15_val_fu_192;
reg   [31:0] window_group_15_val_1_fu_196;
reg   [31:0] window_group_15_val_2_fu_200;
reg   [31:0] window_group_15_val_3_fu_204;
reg   [31:0] window_group_15_val_4_fu_208;
reg   [31:0] window_group_15_val_5_fu_212;
reg   [31:0] window_group_15_val_6_fu_216;
reg   [31:0] window_group_15_val_7_fu_220;
reg   [31:0] window_group_15_val_8_fu_224;
reg   [31:0] window_group_15_val_9_fu_228;
reg   [31:0] window_group_15_val_10_fu_232;
reg   [31:0] window_group_15_val_11_fu_236;
reg   [31:0] window_group_15_val_12_fu_240;
reg   [31:0] window_group_15_val_13_fu_244;
reg   [31:0] window_group_15_val_14_fu_248;
reg   [31:0] window_group_15_val_15_fu_252;
reg   [31:0] window_group_15_val_16_fu_256;
reg   [31:0] window_group_15_val_17_fu_260;
reg   [31:0] window_group_15_val_18_fu_264;
reg   [31:0] window_group_15_val_19_fu_268;
reg   [31:0] window_group_15_val_20_fu_272;
reg   [31:0] window_group_15_val_21_fu_276;
reg   [31:0] window_group_15_val_22_fu_280;
reg   [31:0] window_group_15_val_23_fu_284;
reg   [31:0] window_group_15_val_24_fu_288;
reg   [31:0] window_group_15_val_25_fu_292;
reg   [31:0] window_group_15_val_26_fu_296;
reg   [31:0] window_group_15_val_27_fu_300;
reg   [31:0] window_group_15_val_28_fu_304;
reg   [31:0] window_group_15_val_29_fu_308;
reg   [31:0] window_group_15_val_30_fu_312;
reg   [31:0] window_group_15_val_31_fu_316;
reg   [31:0] window_group_15_val_32_fu_320;
reg   [31:0] window_group_15_val_33_fu_324;
reg   [31:0] window_group_15_val_34_fu_328;
reg   [31:0] window_group_15_val_35_fu_332;
reg   [31:0] window_group_15_val_36_fu_336;
reg   [31:0] window_group_15_val_37_fu_340;
reg   [31:0] window_group_15_val_38_fu_344;
reg   [31:0] window_group_15_val_39_fu_348;
reg   [31:0] window_group_15_val_40_fu_352;
reg   [31:0] window_group_15_val_41_fu_356;
reg   [31:0] window_group_15_val_42_fu_360;
reg   [31:0] window_group_15_val_43_fu_364;
reg   [31:0] window_group_15_val_44_fu_368;
reg   [31:0] window_group_15_val_45_fu_372;
reg   [31:0] window_group_15_val_46_fu_376;
reg   [31:0] window_group_15_val_47_fu_380;
reg   [31:0] window_group_15_val_48_fu_384;
reg   [31:0] window_group_15_val_49_fu_388;
reg   [31:0] window_group_15_val_50_fu_392;
reg   [31:0] window_group_15_val_51_fu_396;
reg   [31:0] window_group_15_val_52_fu_400;
reg   [31:0] window_group_15_val_53_fu_404;
reg   [31:0] window_group_15_val_54_fu_408;
reg   [31:0] window_group_15_val_55_fu_412;
reg   [31:0] window_group_15_val_56_fu_416;
reg   [31:0] window_group_15_val_57_fu_420;
reg   [31:0] window_group_15_val_58_fu_424;
reg   [31:0] window_group_15_val_59_fu_428;
reg   [31:0] window_group_15_val_60_fu_432;
reg   [31:0] window_group_15_val_61_fu_436;
reg   [31:0] window_group_15_val_62_fu_440;
reg   [31:0] window_group_15_val_63_fu_444;
reg   [31:0] grp_fu_679_p0;
reg   [31:0] grp_fu_679_p1;
reg   [31:0] grp_fu_684_p0;
reg   [31:0] grp_fu_684_p1;
wire   [2:0] zext_ln34_fu_720_p1;
wire   [2:0] sub_ln34_fu_724_p2;
wire  signed [8:0] sext_ln34_fu_730_p1;
wire   [8:0] zext_ln23_fu_760_p1;
wire   [0:0] icmp_ln34_1_fu_774_p2;
wire   [9:0] zext_ln31_fu_770_p1;
wire   [0:0] and_ln34_fu_780_p2;
wire   [9:0] conv_count_fu_786_p2;
wire   [0:0] icmp_ln55_1_fu_800_p2;
wire   [8:0] trunc_ln101_fu_812_p1;
wire   [0:0] xor_ln19_fu_858_p2;
wire   [8:0] shl_ln30_mid1_fu_883_p3;
wire   [0:0] icmp_ln34_2_fu_897_p2;
wire   [0:0] icmp_ln26_fu_917_p2;
wire   [1:0] select_ln17_fu_876_p3;
wire   [0:0] and_ln17_5_fu_932_p2;
wire   [1:0] row_stride_fu_943_p2;
wire   [2:0] zext_ln34_1_fu_962_p1;
wire   [2:0] sub_ln34_1_fu_966_p2;
wire   [8:0] select_ln17_1_fu_891_p3;
wire  signed [8:0] sext_ln34_1_fu_972_p1;
wire   [0:0] icmp_ln34_3_fu_976_p2;
wire   [0:0] select_ln17_3_fu_903_p3;
wire   [0:0] icmp_ln55_2_fu_990_p2;
wire   [0:0] and_ln17_fu_909_p2;
wire   [0:0] and_ln17_2_fu_913_p2;
wire   [0:0] and_ln17_3_fu_923_p2;
wire   [0:0] and_ln17_4_fu_928_p2;
wire   [7:0] select_ln19_fu_954_p3;
wire   [0:0] or_ln21_fu_1040_p2;
wire   [0:0] or_ln21_1_fu_1046_p2;
wire   [8:0] select_ln19_3_fu_1004_p3;
wire   [0:0] and_ln19_1_fu_1011_p2;
wire   [0:0] xor_ln21_fu_1075_p2;
wire   [0:0] and_ln19_2_fu_1016_p2;
wire   [1:0] select_ln21_fu_1051_p3;
wire   [0:0] or_ln23_fu_1107_p2;
wire   [0:0] or_ln23_1_fu_1113_p2;
wire   [1:0] col_stride_fu_1101_p2;
wire   [8:0] zext_ln23_1_fu_1127_p1;
wire   [8:0] select_ln21_1_fu_1067_p3;
wire   [0:0] select_ln19_2_fu_996_p3;
wire   [0:0] icmp_ln55_3_fu_1137_p2;
wire   [0:0] and_ln55_1_fu_1143_p2;
wire   [0:0] and_ln21_fu_1081_p2;
wire   [4:0] mul_ln729_fu_1193_p1;
wire   [6:0] add_ln23_1_fu_1199_p2;
wire   [13:0] add_ln21_1_fu_1213_p2;
wire   [14:0] add_ln19_1_fu_1227_p2;
wire   [0:0] icmp_ln34_4_fu_1255_p2;
wire   [9:0] zext_ln31_1_fu_1252_p1;
wire   [0:0] and_ln34_1_fu_1260_p2;
wire   [9:0] add_ln35_1_fu_1265_p2;
wire   [8:0] select_ln19_4_fu_1240_p3;
wire  signed [9:0] select_ln34_1_fu_1271_p3;
wire   [8:0] trunc_ln101_1_fu_1285_p1;
wire   [8:0] add_ln21_2_fu_1289_p2;
wire   [8:0] select_ln19_5_fu_1246_p3;
wire   [0:0] icmp_ln34_5_fu_1305_p2;
wire   [9:0] zext_ln31_2_fu_1302_p1;
wire   [0:0] and_ln34_2_fu_1310_p2;
wire   [9:0] add_ln35_2_fu_1315_p2;
wire   [8:0] select_ln21_3_fu_1279_p3;
wire   [8:0] select_ln23_2_fu_1329_p3;
wire  signed [9:0] select_ln34_2_fu_1321_p3;
wire  signed [13:0] sext_ln23_2_fu_1347_p1;
wire  signed [13:0] sext_ln23_1_fu_1343_p1;
wire   [13:0] select_ln19_7_fu_1350_p3;
wire  signed [13:0] sext_ln23_fu_1339_p1;
wire   [13:0] select_ln21_6_fu_1357_p3;
wire   [8:0] trunc_ln101_2_fu_1371_p1;
wire   [8:0] add_ln23_3_fu_1375_p2;
wire   [8:0] select_ln21_4_fu_1295_p3;
wire   [8:0] select_ln23_4_fu_1381_p3;
wire   [13:0] zext_ln23_2_fu_1335_p1;
wire   [13:0] add_ln729_fu_1392_p2;
wire   [13:0] select_ln23_3_fu_1364_p3;
wire   [13:0] zext_ln23_3_fu_1388_p1;
wire   [0:0] icmp_ln62_3_fu_1417_p2;
wire   [0:0] and_ln17_1_fu_1516_p2;
wire   [0:0] icmp_ln62_4_fu_1525_p2;
wire   [0:0] and_ln19_fu_1520_p2;
wire   [0:0] select_ln21_2_fu_1530_p3;
wire   [0:0] icmp_ln62_2_fu_1628_p2;
wire   [0:0] and_ln62_fu_1633_p2;
wire   [31:0] bitcast_ln117_fu_1724_p1;
wire   [7:0] tmp_2_fu_1727_p4;
wire   [22:0] trunc_ln117_fu_1737_p1;
wire   [0:0] icmp_ln117_1_fu_1747_p2;
wire   [0:0] icmp_ln117_fu_1741_p2;
wire   [0:0] or_ln117_fu_1753_p2;
wire   [0:0] grp_fu_679_p2;
wire   [0:0] and_ln117_fu_1759_p2;
wire   [31:0] bitcast_ln117_1_fu_1938_p1;
wire   [31:0] bitcast_ln117_2_fu_1955_p1;
wire   [7:0] tmp_5_fu_1941_p4;
wire   [22:0] trunc_ln117_1_fu_1951_p1;
wire   [0:0] icmp_ln117_3_fu_1978_p2;
wire   [0:0] icmp_ln117_2_fu_1972_p2;
wire   [7:0] tmp_6_fu_1958_p4;
wire   [22:0] trunc_ln117_2_fu_1968_p1;
wire   [0:0] icmp_ln117_5_fu_1996_p2;
wire   [0:0] icmp_ln117_4_fu_1990_p2;
wire   [0:0] or_ln117_1_fu_1984_p2;
wire   [0:0] or_ln117_2_fu_2002_p2;
wire   [0:0] and_ln117_1_fu_2008_p2;
wire   [0:0] grp_fu_684_p2;
wire   [0:0] and_ln117_2_fu_2014_p2;
wire   [31:0] bitcast_ln117_3_fu_2192_p1;
wire   [31:0] bitcast_ln117_4_fu_2209_p1;
wire   [7:0] tmp_9_fu_2195_p4;
wire   [22:0] trunc_ln117_3_fu_2205_p1;
wire   [0:0] icmp_ln117_7_fu_2232_p2;
wire   [0:0] icmp_ln117_6_fu_2226_p2;
wire   [7:0] tmp_s_fu_2212_p4;
wire   [22:0] trunc_ln117_4_fu_2222_p1;
wire   [0:0] icmp_ln117_9_fu_2250_p2;
wire   [0:0] icmp_ln117_8_fu_2244_p2;
wire   [0:0] or_ln117_3_fu_2238_p2;
wire   [0:0] or_ln117_4_fu_2256_p2;
wire   [0:0] and_ln117_3_fu_2262_p2;
wire   [0:0] and_ln117_4_fu_2268_p2;
wire   [31:0] bitcast_ln117_6_fu_2366_p1;
wire   [7:0] tmp_13_fu_2369_p4;
wire   [22:0] trunc_ln117_6_fu_2379_p1;
wire   [31:0] bitcast_ln117_5_fu_2395_p1;
wire   [7:0] tmp_12_fu_2398_p4;
wire   [22:0] trunc_ln117_5_fu_2408_p1;
wire   [0:0] icmp_ln117_11_fu_2418_p2;
wire   [0:0] icmp_ln117_10_fu_2412_p2;
wire   [0:0] or_ln117_5_fu_2424_p2;
wire   [0:0] or_ln117_6_fu_2430_p2;
wire   [0:0] and_ln117_5_fu_2434_p2;
wire   [0:0] and_ln117_6_fu_2440_p2;
reg    grp_fu_679_ce;
reg    ap_block_pp0_stage0_00001;
reg    ap_block_pp0_stage1_00001;
reg    grp_fu_684_ce;
wire    ap_CS_fsm_state18;
reg    ap_block_state18;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] mul_ln729_fu_1193_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 inStream_V_data_0_sel_rd = 1'b0;
#0 inStream_V_data_0_sel_wr = 1'b0;
#0 inStream_V_data_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_1_sel_rd = 1'b0;
#0 outStream_V_data_1_sel_wr = 1'b0;
#0 outStream_V_data_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 call_ln73_write_output_fu_654_ap_start_reg = 1'b0;
end

yolo_max_pool_top_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
yolo_max_pool_top_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

yolo_max_pool_top_line_buff_group_val_s #(
    .DataWidth( 32 ),
    .AddressRange( 6688 ),
    .AddressWidth( 13 ))
line_buff_group_val_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_val_s_address0),
    .ce0(line_buff_group_val_s_ce0),
    .we0(line_buff_group_val_s_we0),
    .d0(line_buff_group_val_1_q0),
    .q0(line_buff_group_val_s_q0),
    .address1(line_buff_group_val_s_address1),
    .ce1(line_buff_group_val_s_ce1),
    .q1(line_buff_group_val_s_q1)
);

yolo_max_pool_top_line_buff_group_val_s #(
    .DataWidth( 32 ),
    .AddressRange( 6688 ),
    .AddressWidth( 13 ))
line_buff_group_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_val_1_address0),
    .ce0(line_buff_group_val_1_ce0),
    .we0(line_buff_group_val_1_we0),
    .d0(tmp_data_reg_3033),
    .q0(line_buff_group_val_1_q0),
    .address1(line_buff_group_val_1_address1),
    .ce1(line_buff_group_val_1_ce1),
    .q1(line_buff_group_val_1_q1)
);

write_output call_ln73_write_output_fu_654(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(call_ln73_write_output_fu_654_ap_start),
    .ap_done(call_ln73_write_output_fu_654_ap_done),
    .ap_idle(call_ln73_write_output_fu_654_ap_idle),
    .ap_ready(call_ln73_write_output_fu_654_ap_ready),
    .val_output(call_ln73_write_output_fu_654_val_output),
    .curr_input_keep_V(tmp_keep_V_reg_3038_pp0_iter6_reg),
    .curr_input_strb_V(tmp_strb_V_reg_3043_pp0_iter6_reg),
    .curr_input_user_V(tmp_user_V_reg_3048_pp0_iter6_reg),
    .curr_input_id_V(tmp_id_V_reg_3053_pp0_iter6_reg),
    .curr_input_dest_V(tmp_dest_V_reg_3058_pp0_iter6_reg),
    .outStream_TDATA(call_ln73_write_output_fu_654_outStream_TDATA),
    .outStream_TVALID(call_ln73_write_output_fu_654_outStream_TVALID),
    .outStream_TREADY(call_ln73_write_output_fu_654_outStream_TREADY),
    .outStream_TKEEP(call_ln73_write_output_fu_654_outStream_TKEEP),
    .outStream_TSTRB(call_ln73_write_output_fu_654_outStream_TSTRB),
    .outStream_TUSER(call_ln73_write_output_fu_654_outStream_TUSER),
    .outStream_TLAST(call_ln73_write_output_fu_654_outStream_TLAST),
    .outStream_TID(call_ln73_write_output_fu_654_outStream_TID),
    .outStream_TDEST(call_ln73_write_output_fu_654_outStream_TDEST),
    .last_V(and_ln62_1_reg_3150_pp0_iter6_reg),
    .outStream_TDATA_blk_n(call_ln73_write_output_fu_654_outStream_TDATA_blk_n),
    .ap_ce(call_ln73_write_output_fu_654_ap_ce)
);

yolo_max_pool_top_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
yolo_max_pool_top_fcmp_32ns_32ns_1_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_679_p0),
    .din1(grp_fu_679_p1),
    .ce(grp_fu_679_ce),
    .opcode(5'd2),
    .dout(grp_fu_679_p2)
);

yolo_max_pool_top_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
yolo_max_pool_top_fcmp_32ns_32ns_1_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_684_p0),
    .din1(grp_fu_684_p1),
    .ce(grp_fu_684_ce),
    .opcode(5'd2),
    .dout(grp_fu_684_p2)
);

yolo_max_pool_top_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
yolo_max_pool_top_mux_164_32_1_1_U17(
    .din0(window_group_15_val_fu_192),
    .din1(window_group_15_val_4_fu_208),
    .din2(window_group_15_val_8_fu_224),
    .din3(window_group_15_val_12_fu_240),
    .din4(window_group_15_val_16_fu_256),
    .din5(window_group_15_val_20_fu_272),
    .din6(window_group_15_val_24_fu_288),
    .din7(window_group_15_val_28_fu_304),
    .din8(window_group_15_val_32_fu_320),
    .din9(window_group_15_val_36_fu_336),
    .din10(window_group_15_val_40_fu_352),
    .din11(window_group_15_val_44_fu_368),
    .din12(window_group_15_val_48_fu_384),
    .din13(window_group_15_val_52_fu_400),
    .din14(window_group_15_val_56_fu_416),
    .din15(window_group_15_val_60_fu_432),
    .din16(trunc_ln58_reg_3125),
    .dout(tmp_1_fu_1590_p18)
);

yolo_max_pool_top_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
yolo_max_pool_top_mux_164_32_1_1_U18(
    .din0(window_group_15_val_1_fu_196),
    .din1(window_group_15_val_5_fu_212),
    .din2(window_group_15_val_9_fu_228),
    .din3(window_group_15_val_13_fu_244),
    .din4(window_group_15_val_17_fu_260),
    .din5(window_group_15_val_21_fu_276),
    .din6(window_group_15_val_25_fu_292),
    .din7(window_group_15_val_29_fu_308),
    .din8(window_group_15_val_33_fu_324),
    .din9(window_group_15_val_37_fu_340),
    .din10(window_group_15_val_41_fu_356),
    .din11(window_group_15_val_45_fu_372),
    .din12(window_group_15_val_49_fu_388),
    .din13(window_group_15_val_53_fu_404),
    .din14(window_group_15_val_57_fu_420),
    .din15(window_group_15_val_61_fu_436),
    .din16(trunc_ln58_reg_3125_pp0_iter3_reg),
    .dout(tmp_4_fu_1820_p18)
);

yolo_max_pool_top_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
yolo_max_pool_top_mux_164_32_1_1_U19(
    .din0(window_group_15_val_2_fu_200),
    .din1(window_group_15_val_6_fu_216),
    .din2(window_group_15_val_10_fu_232),
    .din3(window_group_15_val_14_fu_248),
    .din4(window_group_15_val_18_fu_264),
    .din5(window_group_15_val_22_fu_280),
    .din6(window_group_15_val_26_fu_296),
    .din7(window_group_15_val_30_fu_312),
    .din8(window_group_15_val_34_fu_328),
    .din9(window_group_15_val_38_fu_344),
    .din10(window_group_15_val_42_fu_360),
    .din11(window_group_15_val_46_fu_376),
    .din12(window_group_15_val_50_fu_392),
    .din13(window_group_15_val_54_fu_408),
    .din14(window_group_15_val_58_fu_424),
    .din15(window_group_15_val_62_fu_440),
    .din16(trunc_ln58_reg_3125_pp0_iter4_reg),
    .dout(tmp_8_fu_2074_p18)
);

yolo_max_pool_top_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
yolo_max_pool_top_mux_164_32_1_1_U20(
    .din0(window_group_15_val_3_fu_204),
    .din1(window_group_15_val_7_fu_220),
    .din2(window_group_15_val_11_fu_236),
    .din3(window_group_15_val_15_fu_252),
    .din4(window_group_15_val_19_fu_268),
    .din5(window_group_15_val_23_fu_284),
    .din6(window_group_15_val_27_fu_300),
    .din7(window_group_15_val_31_fu_316),
    .din8(window_group_15_val_35_fu_332),
    .din9(window_group_15_val_39_fu_348),
    .din10(window_group_15_val_43_fu_364),
    .din11(window_group_15_val_47_fu_380),
    .din12(window_group_15_val_51_fu_396),
    .din13(window_group_15_val_55_fu_412),
    .din14(window_group_15_val_59_fu_428),
    .din15(window_group_15_val_63_fu_444),
    .din16(trunc_ln58_reg_3125_pp0_iter5_reg),
    .dout(tmp_11_fu_2328_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        call_ln73_write_output_fu_654_ap_start_reg <= 1'b0;
    end else begin
        if (((select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            call_ln73_write_output_fu_654_ap_start_reg <= 1'b1;
        end else if ((call_ln73_write_output_fu_654_ap_ready == 1'b1)) begin
            call_ln73_write_output_fu_654_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_out == 1'b1) & (inStream_V_data_0_vld_out == 1'b1))) begin
            inStream_V_data_0_sel_rd <= ~inStream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_in == 1'b1) & (inStream_V_data_0_vld_in == 1'b1))) begin
            inStream_V_data_0_sel_wr <= ~inStream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd2;
        end else if ((((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd1;
        end else if (((~((inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)) & ~((inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)) & (inStream_V_data_0_state == 2'd3)) | ((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b1)) | ((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd3;
        end else begin
            inStream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_vld_out == 1'b1) & (inStream_V_keep_V_0_ack_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_vld_in == 1'b1) & (inStream_V_keep_V_0_ack_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_out == 1'b1) & (outStream_V_data_1_vld_out == 1'b1))) begin
            outStream_V_data_1_sel_rd <= ~outStream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_in == 1'b1) & (outStream_V_data_1_vld_in == 1'b1))) begin
            outStream_V_data_1_sel_wr <= ~outStream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd2;
        end else if ((((outStream_V_data_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd1;
        end else if (((~((outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)) & (outStream_V_data_1_state == 2'd3)) | ((outStream_V_data_1_state == 2'd1) & (outStream_V_data_1_ack_out == 1'b1)) | ((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd3;
        end else begin
            outStream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col_stride_0_reg_630 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        col_stride_0_reg_630 <= select_ln23_5_reg_3028;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten167_reg_594 <= 14'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten167_reg_594 <= select_ln21_7_reg_3075;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten413_reg_570 <= 15'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten413_reg_570 <= select_ln19_8_reg_3080;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten739_reg_547 <= 22'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten739_reg_547 <= add_ln17_reg_2905;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_618 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_618 <= select_ln23_6_reg_3070;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_ch_idx_0_reg_642 <= 5'd0;
    end else if (((icmp_ln17_reg_2901_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_ch_idx_0_reg_642 <= input_ch_idx_reg_3105;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_col_0_reg_606 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_col_0_reg_606 <= select_ln21_5_reg_3005;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_row_0_reg_558 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_row_0_reg_558 <= select_ln17_4_reg_2955;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln10_reg_525 <= add_ln10_fu_688_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln10_reg_525 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_536 <= add_ln627_fu_694_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_536 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_stride_0_reg_582 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        row_stride_0_reg_582 <= select_ln19_6_reg_2981;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln17_reg_2905 <= add_ln17_fu_828_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln23_reg_2896 <= add_ln23_fu_816_p2;
        add_ln835_1_reg_3095_pp0_iter2_reg <= add_ln835_1_reg_3095;
        and_ln55_reg_2891 <= and_ln55_fu_806_p2;
        and_ln62_1_reg_3150_pp0_iter4_reg <= and_ln62_1_reg_3150;
        and_ln62_1_reg_3150_pp0_iter5_reg <= and_ln62_1_reg_3150_pp0_iter4_reg;
        and_ln62_1_reg_3150_pp0_iter6_reg <= and_ln62_1_reg_3150_pp0_iter5_reg;
        col_idx_reg_2881 <= col_idx_fu_764_p2;
        conv_count_1_reg_2886 <= conv_count_1_fu_792_p3;
        icmp_ln17_reg_2901 <= icmp_ln17_fu_822_p2;
        icmp_ln17_reg_2901_pp0_iter1_reg <= icmp_ln17_reg_2901;
        icmp_ln17_reg_2901_pp0_iter2_reg <= icmp_ln17_reg_2901_pp0_iter1_reg;
        icmp_ln19_reg_2910_pp0_iter1_reg <= icmp_ln19_reg_2910;
        icmp_ln34_reg_2861 <= icmp_ln34_fu_734_p2;
        icmp_ln55_reg_2866 <= icmp_ln55_fu_740_p2;
        icmp_ln62_1_reg_2876 <= icmp_ln62_1_fu_754_p2;
        icmp_ln62_1_reg_2876_pp0_iter1_reg <= icmp_ln62_1_reg_2876;
        icmp_ln62_1_reg_2876_pp0_iter2_reg <= icmp_ln62_1_reg_2876_pp0_iter1_reg;
        icmp_ln62_reg_2856 <= icmp_ln62_fu_714_p2;
        icmp_ln62_reg_2856_pp0_iter1_reg <= icmp_ln62_reg_2856;
        line_buff_group_val_6_reg_3120_pp0_iter3_reg <= line_buff_group_val_6_reg_3120;
        line_buff_group_val_7_reg_3138_pp0_iter4_reg <= line_buff_group_val_7_reg_3138;
        line_buff_group_val_7_reg_3138_pp0_iter5_reg <= line_buff_group_val_7_reg_3138_pp0_iter4_reg;
        or_ln19_1_reg_2942_pp0_iter1_reg <= or_ln19_1_reg_2942;
        or_ln19_1_reg_2942_pp0_iter2_reg <= or_ln19_1_reg_2942_pp0_iter1_reg;
        shl_ln1_reg_2871[8 : 1] <= shl_ln1_fu_746_p3[8 : 1];
        shl_ln_reg_2851[8 : 1] <= shl_ln_fu_706_p3[8 : 1];
        xor_ln17_reg_2922_pp0_iter1_reg <= xor_ln17_reg_2922;
        xor_ln17_reg_2922_pp0_iter2_reg <= xor_ln17_reg_2922_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln31_1_reg_3017 <= add_ln31_1_fu_1131_p2;
        and_ln19_3_reg_2973 <= and_ln19_3_fu_1021_p2;
        and_ln21_1_reg_2998 <= and_ln21_1_fu_1087_p2;
        mul_ln729_reg_3063 <= mul_ln729_fu_1193_p2;
        or_ln19_reg_2960 <= or_ln19_fu_949_p2;
        out_col_reg_2986 <= out_col_fu_1034_p2;
        out_row_reg_2950 <= out_row_fu_870_p2;
        select_ln19_1_reg_2967 <= select_ln19_1_fu_982_p3;
        select_ln23_1_reg_3024 <= select_ln23_1_fu_1149_p3;
        select_ln23_reg_3010 <= select_ln23_fu_1119_p3;
        shl_ln31_mid1_reg_2992[8 : 1] <= shl_ln31_mid1_fu_1059_p3[8 : 1];
        tmp_data_reg_3033 <= inStream_V_data_0_data_out;
        tmp_dest_V_reg_3058 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_reg_3053 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_reg_3038 <= inStream_V_keep_V_0_data_out;
        tmp_strb_V_reg_3043 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_reg_3048 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln835_1_reg_3095 <= add_ln835_1_fu_1407_p2;
        add_ln835_reg_3090 <= add_ln835_fu_1402_p2;
        line_buff_group_val_5_reg_3100 <= sext_ln729_fu_1397_p1;
        sext_ln729_reg_3085 <= sext_ln729_fu_1397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        and_ln19_3_reg_2973_pp0_iter1_reg <= and_ln19_3_reg_2973;
        and_ln19_3_reg_2973_pp0_iter2_reg <= and_ln19_3_reg_2973_pp0_iter1_reg;
        out_col_reg_2986_pp0_iter1_reg <= out_col_reg_2986;
        out_col_reg_2986_pp0_iter2_reg <= out_col_reg_2986_pp0_iter1_reg;
        select_ln117_1_reg_3169_pp0_iter5_reg <= select_ln117_1_reg_3169;
        select_ln17_2_reg_3110_pp0_iter2_reg <= select_ln17_2_reg_3110;
        select_ln23_1_reg_3024_pp0_iter1_reg <= select_ln23_1_reg_3024;
        select_ln23_1_reg_3024_pp0_iter2_reg <= select_ln23_1_reg_3024_pp0_iter1_reg;
        select_ln23_1_reg_3024_pp0_iter3_reg <= select_ln23_1_reg_3024_pp0_iter2_reg;
        select_ln23_1_reg_3024_pp0_iter4_reg <= select_ln23_1_reg_3024_pp0_iter3_reg;
        select_ln23_1_reg_3024_pp0_iter5_reg <= select_ln23_1_reg_3024_pp0_iter4_reg;
        select_ln23_1_reg_3024_pp0_iter6_reg <= select_ln23_1_reg_3024_pp0_iter5_reg;
        select_ln23_reg_3010_pp0_iter1_reg <= select_ln23_reg_3010;
        select_ln23_reg_3010_pp0_iter2_reg <= select_ln23_reg_3010_pp0_iter1_reg;
        tmp_dest_V_reg_3058_pp0_iter1_reg <= tmp_dest_V_reg_3058;
        tmp_dest_V_reg_3058_pp0_iter2_reg <= tmp_dest_V_reg_3058_pp0_iter1_reg;
        tmp_dest_V_reg_3058_pp0_iter3_reg <= tmp_dest_V_reg_3058_pp0_iter2_reg;
        tmp_dest_V_reg_3058_pp0_iter4_reg <= tmp_dest_V_reg_3058_pp0_iter3_reg;
        tmp_dest_V_reg_3058_pp0_iter5_reg <= tmp_dest_V_reg_3058_pp0_iter4_reg;
        tmp_dest_V_reg_3058_pp0_iter6_reg <= tmp_dest_V_reg_3058_pp0_iter5_reg;
        tmp_id_V_reg_3053_pp0_iter1_reg <= tmp_id_V_reg_3053;
        tmp_id_V_reg_3053_pp0_iter2_reg <= tmp_id_V_reg_3053_pp0_iter1_reg;
        tmp_id_V_reg_3053_pp0_iter3_reg <= tmp_id_V_reg_3053_pp0_iter2_reg;
        tmp_id_V_reg_3053_pp0_iter4_reg <= tmp_id_V_reg_3053_pp0_iter3_reg;
        tmp_id_V_reg_3053_pp0_iter5_reg <= tmp_id_V_reg_3053_pp0_iter4_reg;
        tmp_id_V_reg_3053_pp0_iter6_reg <= tmp_id_V_reg_3053_pp0_iter5_reg;
        tmp_keep_V_reg_3038_pp0_iter1_reg <= tmp_keep_V_reg_3038;
        tmp_keep_V_reg_3038_pp0_iter2_reg <= tmp_keep_V_reg_3038_pp0_iter1_reg;
        tmp_keep_V_reg_3038_pp0_iter3_reg <= tmp_keep_V_reg_3038_pp0_iter2_reg;
        tmp_keep_V_reg_3038_pp0_iter4_reg <= tmp_keep_V_reg_3038_pp0_iter3_reg;
        tmp_keep_V_reg_3038_pp0_iter5_reg <= tmp_keep_V_reg_3038_pp0_iter4_reg;
        tmp_keep_V_reg_3038_pp0_iter6_reg <= tmp_keep_V_reg_3038_pp0_iter5_reg;
        tmp_strb_V_reg_3043_pp0_iter1_reg <= tmp_strb_V_reg_3043;
        tmp_strb_V_reg_3043_pp0_iter2_reg <= tmp_strb_V_reg_3043_pp0_iter1_reg;
        tmp_strb_V_reg_3043_pp0_iter3_reg <= tmp_strb_V_reg_3043_pp0_iter2_reg;
        tmp_strb_V_reg_3043_pp0_iter4_reg <= tmp_strb_V_reg_3043_pp0_iter3_reg;
        tmp_strb_V_reg_3043_pp0_iter5_reg <= tmp_strb_V_reg_3043_pp0_iter4_reg;
        tmp_strb_V_reg_3043_pp0_iter6_reg <= tmp_strb_V_reg_3043_pp0_iter5_reg;
        tmp_user_V_reg_3048_pp0_iter1_reg <= tmp_user_V_reg_3048;
        tmp_user_V_reg_3048_pp0_iter2_reg <= tmp_user_V_reg_3048_pp0_iter1_reg;
        tmp_user_V_reg_3048_pp0_iter3_reg <= tmp_user_V_reg_3048_pp0_iter2_reg;
        tmp_user_V_reg_3048_pp0_iter4_reg <= tmp_user_V_reg_3048_pp0_iter3_reg;
        tmp_user_V_reg_3048_pp0_iter5_reg <= tmp_user_V_reg_3048_pp0_iter4_reg;
        tmp_user_V_reg_3048_pp0_iter6_reg <= tmp_user_V_reg_3048_pp0_iter5_reg;
        trunc_ln58_reg_3125_pp0_iter3_reg <= trunc_ln58_reg_3125;
        trunc_ln58_reg_3125_pp0_iter4_reg <= trunc_ln58_reg_3125_pp0_iter3_reg;
        trunc_ln58_reg_3125_pp0_iter5_reg <= trunc_ln58_reg_3125_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln62_1_reg_3150 <= and_ln62_1_fu_1639_p2;
        tmp_1_reg_3143 <= tmp_1_fu_1590_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln117_12_reg_3197 <= icmp_ln117_12_fu_2383_p2;
        icmp_ln117_13_reg_3202 <= icmp_ln117_13_fu_2389_p2;
        tmp_11_reg_3190 <= tmp_11_fu_2328_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_fu_822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln19_reg_2910 <= icmp_ln19_fu_834_p2;
        icmp_ln21_reg_2937 <= icmp_ln21_fu_852_p2;
        icmp_ln23_reg_2932 <= icmp_ln23_fu_846_p2;
        or_ln19_1_reg_2942 <= or_ln19_1_fu_864_p2;
        xor_ln17_reg_2922 <= xor_ln17_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_A == 1'b1)) begin
        inStream_V_data_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_B == 1'b1)) begin
        inStream_V_data_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_ch_idx_reg_3105 <= input_ch_idx_fu_1412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buff_group_val_6_reg_3120 <= sext_ln835_fu_1428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_2901_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buff_group_val_7_reg_3138 <= sext_ln835_1_fu_1537_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_A == 1'b1)) begin
        outStream_V_data_1_payload_A <= call_ln73_write_output_fu_654_outStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_B == 1'b1)) begin
        outStream_V_data_1_payload_B <= call_ln73_write_output_fu_654_outStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= call_ln73_write_output_fu_654_outStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= call_ln73_write_output_fu_654_outStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= call_ln73_write_output_fu_654_outStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= call_ln73_write_output_fu_654_outStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= call_ln73_write_output_fu_654_outStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= call_ln73_write_output_fu_654_outStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= call_ln73_write_output_fu_654_outStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= call_ln73_write_output_fu_654_outStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= call_ln73_write_output_fu_654_outStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= call_ln73_write_output_fu_654_outStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= call_ln73_write_output_fu_654_outStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= call_ln73_write_output_fu_654_outStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln117_1_reg_3169 <= select_ln117_1_fu_2020_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln117_2_reg_3183 <= select_ln117_2_fu_2274_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln117_reg_3155 <= select_ln117_fu_1765_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_2901_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln17_2_reg_3110 <= select_ln17_2_fu_1422_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln17_4_reg_2955 <= select_ln17_4_fu_936_p3;
        select_ln19_6_reg_2981 <= select_ln19_6_fu_1026_p3;
        select_ln19_8_reg_3080 <= select_ln19_8_fu_1233_p3;
        select_ln21_5_reg_3005 <= select_ln21_5_fu_1093_p3;
        select_ln21_7_reg_3075 <= select_ln21_7_fu_1219_p3;
        select_ln23_5_reg_3028 <= select_ln23_5_fu_1157_p3;
        select_ln23_6_reg_3070 <= select_ln23_6_fu_1205_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_3162 <= tmp_4_fu_1820_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_8_reg_3176 <= tmp_8_fu_2074_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        trunc_ln58_reg_3125 <= trunc_ln58_fu_1433_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd2) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_10_fu_232 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd2))) begin
        window_group_15_val_11_fu_236 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd3) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_12_fu_240 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd3) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_13_fu_244 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd3) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_14_fu_248 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd3))) begin
        window_group_15_val_15_fu_252 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd4) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_16_fu_256 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd4) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_17_fu_260 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd4) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_18_fu_264 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd4))) begin
        window_group_15_val_19_fu_268 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_1_fu_196 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd5) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_20_fu_272 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd5) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_21_fu_276 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd5) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_22_fu_280 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd5))) begin
        window_group_15_val_23_fu_284 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd6) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_24_fu_288 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd6) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_25_fu_292 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd6) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_26_fu_296 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd6))) begin
        window_group_15_val_27_fu_300 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd7) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_28_fu_304 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd7) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_29_fu_308 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_2_fu_200 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd7) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_30_fu_312 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd7))) begin
        window_group_15_val_31_fu_316 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd8) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_32_fu_320 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd8) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_33_fu_324 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd8) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_34_fu_328 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd8))) begin
        window_group_15_val_35_fu_332 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd9) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_36_fu_336 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd9) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_37_fu_340 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd9) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_38_fu_344 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd9))) begin
        window_group_15_val_39_fu_348 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd0))) begin
        window_group_15_val_3_fu_204 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd10) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_40_fu_352 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd10) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_41_fu_356 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd10) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_42_fu_360 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd10))) begin
        window_group_15_val_43_fu_364 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd11) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_44_fu_368 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd11) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_45_fu_372 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd11) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_46_fu_376 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd11))) begin
        window_group_15_val_47_fu_380 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd12) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_48_fu_384 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd12) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_49_fu_388 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_4_fu_208 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd12) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_50_fu_392 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd12))) begin
        window_group_15_val_51_fu_396 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd13) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_52_fu_400 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd13) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_53_fu_404 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd13) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_54_fu_408 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd13))) begin
        window_group_15_val_55_fu_412 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd14) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_56_fu_416 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd14) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_57_fu_420 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd14) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_58_fu_424 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd14))) begin
        window_group_15_val_59_fu_428 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_5_fu_212 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd15) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_60_fu_432 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd15) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_61_fu_436 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd15) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_62_fu_440 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd15))) begin
        window_group_15_val_63_fu_444 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter3_reg == 4'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_6_fu_216 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln23_1_reg_3024_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln58_reg_3125_pp0_iter5_reg == 4'd1))) begin
        window_group_15_val_7_fu_220 <= line_buff_group_val_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd2) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_8_fu_224 <= line_buff_group_val_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln58_reg_3125 == 4'd2) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_9_fu_228 <= line_buff_group_val_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln23_1_reg_3024_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln58_fu_1433_p1 == 4'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_group_15_val_fu_192 <= line_buff_group_val_s_q0;
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_822_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_stride_0_phi_fu_634_p4 = select_ln23_5_reg_3028;
    end else begin
        ap_phi_mux_col_stride_0_phi_fu_634_p4 = col_stride_0_reg_630;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten167_phi_fu_598_p4 = select_ln21_7_reg_3075;
    end else begin
        ap_phi_mux_indvar_flatten167_phi_fu_598_p4 = indvar_flatten167_reg_594;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten413_phi_fu_574_p4 = select_ln19_8_reg_3080;
    end else begin
        ap_phi_mux_indvar_flatten413_phi_fu_574_p4 = indvar_flatten413_reg_570;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten739_phi_fu_551_p4 = add_ln17_reg_2905;
    end else begin
        ap_phi_mux_indvar_flatten739_phi_fu_551_p4 = indvar_flatten739_reg_547;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_622_p4 = select_ln23_6_reg_3070;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_622_p4 = indvar_flatten_reg_618;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln17_reg_2901_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_input_ch_idx_0_phi_fu_646_p4 = input_ch_idx_reg_3105;
    end else begin
        ap_phi_mux_input_ch_idx_0_phi_fu_646_p4 = input_ch_idx_0_reg_642;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_out_col_0_phi_fu_610_p4 = select_ln21_5_reg_3005;
    end else begin
        ap_phi_mux_out_col_0_phi_fu_610_p4 = out_col_0_reg_606;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_out_row_0_phi_fu_562_p4 = select_ln17_4_reg_2955;
    end else begin
        ap_phi_mux_out_row_0_phi_fu_562_p4 = out_row_0_reg_558;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_2901 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_row_stride_0_phi_fu_586_p4 = select_ln19_6_reg_2981;
    end else begin
        ap_phi_mux_row_stride_0_phi_fu_586_p4 = row_stride_0_reg_582;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp494))) begin
        call_ln73_write_output_fu_654_ap_ce = 1'b1;
    end else begin
        call_ln73_write_output_fu_654_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_679_ce = 1'b1;
    end else begin
        grp_fu_679_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_679_p0 = tmp_8_fu_2074_p18;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_679_p0 = tmp_1_fu_1590_p18;
    end else begin
        grp_fu_679_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_679_p1 = select_ln117_1_reg_3169;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_679_p1 = 32'd4286578687;
    end else begin
        grp_fu_679_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_684_ce = 1'b1;
    end else begin
        grp_fu_684_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        grp_fu_684_p0 = tmp_11_fu_2328_p18;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_684_p0 = tmp_4_fu_1820_p18;
    end else begin
        grp_fu_684_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        grp_fu_684_p1 = select_ln117_2_reg_3183;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_684_p1 = select_ln117_reg_3155;
    end else begin
        grp_fu_684_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_TDATA_blk_n = inStream_V_data_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_data_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_0_sel == 1'b1)) begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_B;
    end else begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_val_1_address0 = line_buff_group_val_5_reg_3100;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            line_buff_group_val_1_address0 = sext_ln729_fu_1397_p1;
        end else begin
            line_buff_group_val_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buff_group_val_1_address1 = line_buff_group_val_7_reg_3138_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        line_buff_group_val_1_address1 = line_buff_group_val_6_reg_3120_pp0_iter3_reg;
    end else begin
        line_buff_group_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        line_buff_group_val_1_ce0 = 1'b1;
    end else begin
        line_buff_group_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        line_buff_group_val_1_ce1 = 1'b1;
    end else begin
        line_buff_group_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_val_1_we0 = 1'b1;
    end else begin
        line_buff_group_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buff_group_val_s_address0 = sext_ln835_fu_1428_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        line_buff_group_val_s_address0 = sext_ln729_reg_3085;
    end else begin
        line_buff_group_val_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        line_buff_group_val_s_ce0 = 1'b1;
    end else begin
        line_buff_group_val_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_val_s_ce1 = 1'b1;
    end else begin
        line_buff_group_val_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_2901_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_val_s_we0 = 1'b1;
    end else begin
        line_buff_group_val_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln23_1_reg_3024_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outStream_TDATA_blk_n = call_ln73_write_output_fu_654_outStream_TDATA_blk_n;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_1_sel == 1'b1)) begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_B;
    end else begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln17_fu_822_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln17_fu_822_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_688_p2 = (phi_ln10_reg_525 + 4'd1);

assign add_ln17_fu_828_p2 = (22'd1 + ap_phi_mux_indvar_flatten739_phi_fu_551_p4);

assign add_ln19_1_fu_1227_p2 = (indvar_flatten413_reg_570 + 15'd1);

assign add_ln21_1_fu_1213_p2 = (indvar_flatten167_reg_594 + 14'd1);

assign add_ln21_2_fu_1289_p2 = (9'd1 + trunc_ln101_1_fu_1285_p1);

assign add_ln23_1_fu_1199_p2 = (indvar_flatten_reg_618 + 7'd1);

assign add_ln23_3_fu_1375_p2 = (9'd1 + trunc_ln101_2_fu_1371_p1);

assign add_ln23_fu_816_p2 = (9'd1 + trunc_ln101_fu_812_p1);

assign add_ln31_1_fu_1131_p2 = (zext_ln23_1_fu_1127_p1 + select_ln21_1_fu_1067_p3);

assign add_ln35_1_fu_1265_p2 = ($signed(10'd1023) + $signed(zext_ln31_1_fu_1252_p1));

assign add_ln35_2_fu_1315_p2 = ($signed(10'd1023) + $signed(zext_ln31_2_fu_1302_p1));

assign add_ln627_fu_694_p2 = (phi_mul_reg_536 + 13'd418);

assign add_ln729_fu_1392_p2 = (mul_ln729_reg_3063 + zext_ln23_2_fu_1335_p1);

assign add_ln835_1_fu_1407_p2 = (mul_ln729_reg_3063 + zext_ln23_3_fu_1388_p1);

assign add_ln835_fu_1402_p2 = (mul_ln729_reg_3063 + select_ln23_3_fu_1364_p3);

assign and_ln117_1_fu_2008_p2 = (or_ln117_2_fu_2002_p2 & or_ln117_1_fu_1984_p2);

assign and_ln117_2_fu_2014_p2 = (grp_fu_684_p2 & and_ln117_1_fu_2008_p2);

assign and_ln117_3_fu_2262_p2 = (or_ln117_4_fu_2256_p2 & or_ln117_3_fu_2238_p2);

assign and_ln117_4_fu_2268_p2 = (grp_fu_679_p2 & and_ln117_3_fu_2262_p2);

assign and_ln117_5_fu_2434_p2 = (or_ln117_6_fu_2430_p2 & or_ln117_5_fu_2424_p2);

assign and_ln117_6_fu_2440_p2 = (grp_fu_684_p2 & and_ln117_5_fu_2434_p2);

assign and_ln117_fu_1759_p2 = (or_ln117_fu_1753_p2 & grp_fu_679_p2);

assign and_ln17_1_fu_1516_p2 = (xor_ln17_reg_2922_pp0_iter2_reg & icmp_ln62_1_reg_2876_pp0_iter2_reg);

assign and_ln17_2_fu_913_p2 = (xor_ln17_reg_2922 & and_ln55_reg_2891);

assign and_ln17_3_fu_923_p2 = (xor_ln17_reg_2922 & icmp_ln26_fu_917_p2);

assign and_ln17_4_fu_928_p2 = (xor_ln17_reg_2922 & icmp_ln23_reg_2932);

assign and_ln17_5_fu_932_p2 = (xor_ln17_reg_2922 & icmp_ln21_reg_2937);

assign and_ln17_fu_909_p2 = (xor_ln17_reg_2922 & icmp_ln55_reg_2866);

assign and_ln19_1_fu_1011_p2 = (or_ln19_1_reg_2942 & and_ln17_2_fu_913_p2);

assign and_ln19_2_fu_1016_p2 = (or_ln19_1_reg_2942 & and_ln17_3_fu_923_p2);

assign and_ln19_3_fu_1021_p2 = (or_ln19_1_reg_2942 & and_ln17_4_fu_928_p2);

assign and_ln19_fu_1520_p2 = (or_ln19_1_reg_2942_pp0_iter2_reg & and_ln17_1_fu_1516_p2);

assign and_ln21_1_fu_1087_p2 = (xor_ln21_fu_1075_p2 & and_ln19_2_fu_1016_p2);

assign and_ln21_fu_1081_p2 = (xor_ln21_fu_1075_p2 & and_ln19_1_fu_1011_p2);

assign and_ln34_1_fu_1260_p2 = (select_ln19_1_reg_2967 & icmp_ln34_4_fu_1255_p2);

assign and_ln34_2_fu_1310_p2 = (select_ln19_1_reg_2967 & icmp_ln34_5_fu_1305_p2);

assign and_ln34_fu_780_p2 = (icmp_ln34_fu_734_p2 & icmp_ln34_1_fu_774_p2);

assign and_ln55_1_fu_1143_p2 = (select_ln19_2_fu_996_p3 & icmp_ln55_3_fu_1137_p2);

assign and_ln55_fu_806_p2 = (icmp_ln55_fu_740_p2 & icmp_ln55_1_fu_800_p2);

assign and_ln62_1_fu_1639_p2 = (select_ln17_2_reg_3110_pp0_iter2_reg & and_ln62_fu_1633_p2);

assign and_ln62_fu_1633_p2 = (select_ln21_2_fu_1530_p3 & icmp_ln62_2_fu_1628_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((select_ln23_1_reg_3024_pp0_iter6_reg == 1'd1) & (call_ln73_write_output_fu_654_outStream_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((select_ln23_1_reg_3024_pp0_iter6_reg == 1'd1) & (call_ln73_write_output_fu_654_outStream_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_block_pp0_stage0_11001_ignoreCallOp494 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((select_ln23_1_reg_3024_pp0_iter6_reg == 1'd1) & (call_ln73_write_output_fu_654_outStream_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((icmp_ln17_reg_2901 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln17_reg_2901 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln17_reg_2901 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state10_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter7 = ((select_ln23_1_reg_3024_pp0_iter6_reg == 1'd1) & (call_ln73_write_output_fu_654_outStream_TDATA_blk_n == 1'b0));
end

assign ap_block_state17_pp0_stage0_iter7_ignore_call128 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18 = ((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0_ignore_call128 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((icmp_ln17_reg_2901 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln117_1_fu_1938_p1 = tmp_4_reg_3162;

assign bitcast_ln117_2_fu_1955_p1 = select_ln117_reg_3155;

assign bitcast_ln117_3_fu_2192_p1 = tmp_8_reg_3176;

assign bitcast_ln117_4_fu_2209_p1 = select_ln117_1_reg_3169_pp0_iter5_reg;

assign bitcast_ln117_5_fu_2395_p1 = tmp_11_reg_3190;

assign bitcast_ln117_6_fu_2366_p1 = select_ln117_2_reg_3183;

assign bitcast_ln117_fu_1724_p1 = tmp_1_reg_3143;

assign call_ln73_write_output_fu_654_ap_start = call_ln73_write_output_fu_654_ap_start_reg;

assign call_ln73_write_output_fu_654_outStream_TREADY = ((outStream_V_dest_V_1_ack_in & ap_CS_fsm_pp0_stage0) | (outStream_V_id_V_1_ack_in & ap_CS_fsm_pp0_stage0) | (outStream_V_last_V_1_ack_in & ap_CS_fsm_pp0_stage0) | (outStream_V_user_V_1_ack_in & ap_CS_fsm_pp0_stage0) | (outStream_V_strb_V_1_ack_in & ap_CS_fsm_pp0_stage0) | (outStream_V_keep_V_1_ack_in & ap_CS_fsm_pp0_stage0) | (outStream_V_data_1_ack_in & ap_CS_fsm_pp0_stage0));

assign call_ln73_write_output_fu_654_val_output = ((and_ln117_6_fu_2440_p2[0:0] === 1'b1) ? tmp_11_reg_3190 : select_ln117_2_reg_3183);

assign col_idx_fu_764_p2 = (zext_ln23_fu_760_p1 + shl_ln1_fu_746_p3);

assign col_stride_fu_1101_p2 = (2'd1 + select_ln21_fu_1051_p3);

assign conv_count_1_fu_792_p3 = ((and_ln34_fu_780_p2[0:0] === 1'b1) ? conv_count_fu_786_p2 : 10'd0);

assign conv_count_fu_786_p2 = ($signed(10'd1023) + $signed(zext_ln31_fu_770_p1));

assign icmp_ln10_fu_700_p2 = ((phi_ln10_reg_525 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln117_10_fu_2412_p2 = ((tmp_12_fu_2398_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln117_11_fu_2418_p2 = ((trunc_ln117_5_fu_2408_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_12_fu_2383_p2 = ((tmp_13_fu_2369_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln117_13_fu_2389_p2 = ((trunc_ln117_6_fu_2379_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_1_fu_1747_p2 = ((trunc_ln117_fu_1737_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_2_fu_1972_p2 = ((tmp_5_fu_1941_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln117_3_fu_1978_p2 = ((trunc_ln117_1_fu_1951_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_4_fu_1990_p2 = ((tmp_6_fu_1958_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln117_5_fu_1996_p2 = ((trunc_ln117_2_fu_1968_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_6_fu_2226_p2 = ((tmp_9_fu_2195_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln117_7_fu_2232_p2 = ((trunc_ln117_3_fu_2205_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_8_fu_2244_p2 = ((tmp_s_fu_2212_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln117_9_fu_2250_p2 = ((trunc_ln117_4_fu_2222_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_1741_p2 = ((tmp_2_fu_1727_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_822_p2 = ((ap_phi_mux_indvar_flatten739_phi_fu_551_p4 == 22'd2768896) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_834_p2 = ((ap_phi_mux_indvar_flatten413_phi_fu_574_p4 == 15'd13312) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_852_p2 = ((ap_phi_mux_indvar_flatten167_phi_fu_598_p4 == 14'd6656) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_846_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_622_p4 == 7'd32) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_917_p2 = ((ap_phi_mux_input_ch_idx_0_phi_fu_646_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_774_p2 = ((col_idx_fu_764_p2 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_897_p2 = ((out_row_fu_870_p2 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_976_p2 = ((select_ln17_1_fu_891_p3 != sext_ln34_1_fu_972_p1) ? 1'b1 : 1'b0);

assign icmp_ln34_4_fu_1255_p2 = ((out_col_reg_2986 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_5_fu_1305_p2 = ((add_ln31_1_reg_3017 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_734_p2 = ((shl_ln_fu_706_p3 != sext_ln34_fu_730_p1) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_800_p2 = ((ap_phi_mux_col_stride_0_phi_fu_634_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_990_p2 = ((select_ln17_fu_876_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_3_fu_1137_p2 = ((select_ln21_fu_1051_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_740_p2 = ((ap_phi_mux_row_stride_0_phi_fu_586_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln62_1_fu_754_p2 = ((ap_phi_mux_out_col_0_phi_fu_610_p4 == 8'd207) ? 1'b1 : 1'b0);

assign icmp_ln62_2_fu_1628_p2 = ((select_ln23_reg_3010_pp0_iter2_reg == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln62_3_fu_1417_p2 = ((out_row_reg_2950 == 8'd207) ? 1'b1 : 1'b0);

assign icmp_ln62_4_fu_1525_p2 = ((out_col_reg_2986_pp0_iter2_reg == 8'd207) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_714_p2 = ((ap_phi_mux_out_row_0_phi_fu_562_p4 == 8'd207) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_0_ack_in = inStream_V_data_0_state[1'd1];

assign inStream_V_data_0_load_A = (inStream_V_data_0_state_cmp_full & ~inStream_V_data_0_sel_wr);

assign inStream_V_data_0_load_B = (inStream_V_data_0_state_cmp_full & inStream_V_data_0_sel_wr);

assign inStream_V_data_0_sel = inStream_V_data_0_sel_rd;

assign inStream_V_data_0_state_cmp_full = ((inStream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_0_vld_in = inStream_TVALID;

assign inStream_V_data_0_vld_out = inStream_V_data_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign input_ch_idx_fu_1412_p2 = (select_ln23_reg_3010 + 5'd1);

assign line_buff_group_val_s_address1 = sext_ln835_1_fu_1537_p1;

assign mul_ln729_fu_1193_p1 = mul_ln729_fu_1193_p10;

assign mul_ln729_fu_1193_p10 = select_ln23_fu_1119_p3;

assign mul_ln729_fu_1193_p2 = (14'd418 * mul_ln729_fu_1193_p1);

assign or_ln117_1_fu_1984_p2 = (icmp_ln117_3_fu_1978_p2 | icmp_ln117_2_fu_1972_p2);

assign or_ln117_2_fu_2002_p2 = (icmp_ln117_5_fu_1996_p2 | icmp_ln117_4_fu_1990_p2);

assign or_ln117_3_fu_2238_p2 = (icmp_ln117_7_fu_2232_p2 | icmp_ln117_6_fu_2226_p2);

assign or_ln117_4_fu_2256_p2 = (icmp_ln117_9_fu_2250_p2 | icmp_ln117_8_fu_2244_p2);

assign or_ln117_5_fu_2424_p2 = (icmp_ln117_11_fu_2418_p2 | icmp_ln117_10_fu_2412_p2);

assign or_ln117_6_fu_2430_p2 = (icmp_ln117_13_reg_3202 | icmp_ln117_12_reg_3197);

assign or_ln117_fu_1753_p2 = (icmp_ln117_fu_1741_p2 | icmp_ln117_1_fu_1747_p2);

assign or_ln19_1_fu_864_p2 = (xor_ln19_fu_858_p2 | icmp_ln19_fu_834_p2);

assign or_ln19_fu_949_p2 = (icmp_ln19_reg_2910 | and_ln17_5_fu_932_p2);

assign or_ln21_1_fu_1046_p2 = (or_ln21_fu_1040_p2 | icmp_ln19_reg_2910);

assign or_ln21_fu_1040_p2 = (and_ln19_3_fu_1021_p2 | and_ln17_5_fu_932_p2);

assign or_ln23_1_fu_1113_p2 = (or_ln23_fu_1107_p2 | or_ln19_fu_949_p2);

assign or_ln23_fu_1107_p2 = (and_ln21_1_fu_1087_p2 | and_ln19_3_fu_1021_p2);

assign outStream_TDATA = outStream_V_data_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_1_ack_in = outStream_V_data_1_state[1'd1];

assign outStream_V_data_1_ack_out = outStream_TREADY;

assign outStream_V_data_1_load_A = (outStream_V_data_1_state_cmp_full & ~outStream_V_data_1_sel_wr);

assign outStream_V_data_1_load_B = (outStream_V_data_1_state_cmp_full & outStream_V_data_1_sel_wr);

assign outStream_V_data_1_sel = outStream_V_data_1_sel_rd;

assign outStream_V_data_1_state_cmp_full = ((outStream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_1_vld_in = call_ln73_write_output_fu_654_outStream_TVALID;

assign outStream_V_data_1_vld_out = outStream_V_data_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_in = call_ln73_write_output_fu_654_outStream_TVALID;

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_in = call_ln73_write_output_fu_654_outStream_TVALID;

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_in = call_ln73_write_output_fu_654_outStream_TVALID;

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_in = call_ln73_write_output_fu_654_outStream_TVALID;

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_in = call_ln73_write_output_fu_654_outStream_TVALID;

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_in = call_ln73_write_output_fu_654_outStream_TVALID;

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign out_col_fu_1034_p2 = (8'd1 + select_ln19_fu_954_p3);

assign out_row_fu_870_p2 = (8'd1 + out_row_0_reg_558);

assign row_stride_fu_943_p2 = (2'd1 + select_ln17_fu_876_p3);

assign select_ln117_1_fu_2020_p3 = ((and_ln117_2_fu_2014_p2[0:0] === 1'b1) ? tmp_4_reg_3162 : select_ln117_reg_3155);

assign select_ln117_2_fu_2274_p3 = ((and_ln117_4_fu_2268_p2[0:0] === 1'b1) ? tmp_8_reg_3176 : select_ln117_1_reg_3169_pp0_iter5_reg);

assign select_ln117_fu_1765_p3 = ((and_ln117_fu_1759_p2[0:0] === 1'b1) ? tmp_1_reg_3143 : 32'd4286578687);

assign select_ln17_1_fu_891_p3 = ((icmp_ln19_reg_2910[0:0] === 1'b1) ? shl_ln30_mid1_fu_883_p3 : shl_ln_reg_2851);

assign select_ln17_2_fu_1422_p3 = ((icmp_ln19_reg_2910_pp0_iter1_reg[0:0] === 1'b1) ? icmp_ln62_3_fu_1417_p2 : icmp_ln62_reg_2856_pp0_iter1_reg);

assign select_ln17_3_fu_903_p3 = ((icmp_ln19_reg_2910[0:0] === 1'b1) ? icmp_ln34_2_fu_897_p2 : icmp_ln34_reg_2861);

assign select_ln17_4_fu_936_p3 = ((icmp_ln19_reg_2910[0:0] === 1'b1) ? out_row_fu_870_p2 : out_row_0_reg_558);

assign select_ln17_fu_876_p3 = ((icmp_ln19_reg_2910[0:0] === 1'b1) ? 2'd0 : row_stride_0_reg_582);

assign select_ln19_1_fu_982_p3 = ((and_ln17_5_fu_932_p2[0:0] === 1'b1) ? icmp_ln34_3_fu_976_p2 : select_ln17_3_fu_903_p3);

assign select_ln19_2_fu_996_p3 = ((and_ln17_5_fu_932_p2[0:0] === 1'b1) ? icmp_ln55_2_fu_990_p2 : and_ln17_fu_909_p2);

assign select_ln19_3_fu_1004_p3 = ((or_ln19_fu_949_p2[0:0] === 1'b1) ? 9'd0 : shl_ln1_reg_2871);

assign select_ln19_4_fu_1240_p3 = ((or_ln19_reg_2960[0:0] === 1'b1) ? 9'd0 : col_idx_reg_2881);

assign select_ln19_5_fu_1246_p3 = ((or_ln19_reg_2960[0:0] === 1'b1) ? 9'd1 : add_ln23_reg_2896);

assign select_ln19_6_fu_1026_p3 = ((and_ln17_5_fu_932_p2[0:0] === 1'b1) ? row_stride_fu_943_p2 : select_ln17_fu_876_p3);

assign select_ln19_7_fu_1350_p3 = ((or_ln19_reg_2960[0:0] === 1'b1) ? 14'd0 : sext_ln23_2_fu_1347_p1);

assign select_ln19_8_fu_1233_p3 = ((icmp_ln19_reg_2910[0:0] === 1'b1) ? 15'd1 : add_ln19_1_fu_1227_p2);

assign select_ln19_fu_954_p3 = ((or_ln19_fu_949_p2[0:0] === 1'b1) ? 8'd0 : out_col_0_reg_606);

assign select_ln21_1_fu_1067_p3 = ((and_ln19_3_fu_1021_p2[0:0] === 1'b1) ? shl_ln31_mid1_fu_1059_p3 : select_ln19_3_fu_1004_p3);

assign select_ln21_2_fu_1530_p3 = ((and_ln19_3_reg_2973_pp0_iter2_reg[0:0] === 1'b1) ? icmp_ln62_4_fu_1525_p2 : and_ln19_fu_1520_p2);

assign select_ln21_3_fu_1279_p3 = ((and_ln19_3_reg_2973[0:0] === 1'b1) ? shl_ln31_mid1_reg_2992 : select_ln19_4_fu_1240_p3);

assign select_ln21_4_fu_1295_p3 = ((and_ln19_3_reg_2973[0:0] === 1'b1) ? add_ln21_2_fu_1289_p2 : select_ln19_5_fu_1246_p3);

assign select_ln21_5_fu_1093_p3 = ((and_ln19_3_fu_1021_p2[0:0] === 1'b1) ? out_col_fu_1034_p2 : select_ln19_fu_954_p3);

assign select_ln21_6_fu_1357_p3 = ((and_ln19_3_reg_2973[0:0] === 1'b1) ? sext_ln23_1_fu_1343_p1 : select_ln19_7_fu_1350_p3);

assign select_ln21_7_fu_1219_p3 = ((or_ln19_fu_949_p2[0:0] === 1'b1) ? 14'd1 : add_ln21_1_fu_1213_p2);

assign select_ln21_fu_1051_p3 = ((or_ln21_1_fu_1046_p2[0:0] === 1'b1) ? 2'd0 : col_stride_0_reg_630);

assign select_ln23_1_fu_1149_p3 = ((and_ln21_1_fu_1087_p2[0:0] === 1'b1) ? and_ln55_1_fu_1143_p2 : and_ln21_fu_1081_p2);

assign select_ln23_2_fu_1329_p3 = ((and_ln21_1_reg_2998[0:0] === 1'b1) ? add_ln31_1_reg_3017 : select_ln21_3_fu_1279_p3);

assign select_ln23_3_fu_1364_p3 = ((and_ln21_1_reg_2998[0:0] === 1'b1) ? sext_ln23_fu_1339_p1 : select_ln21_6_fu_1357_p3);

assign select_ln23_4_fu_1381_p3 = ((and_ln21_1_reg_2998[0:0] === 1'b1) ? add_ln23_3_fu_1375_p2 : select_ln21_4_fu_1295_p3);

assign select_ln23_5_fu_1157_p3 = ((and_ln21_1_fu_1087_p2[0:0] === 1'b1) ? col_stride_fu_1101_p2 : select_ln21_fu_1051_p3);

assign select_ln23_6_fu_1205_p3 = ((or_ln21_1_fu_1046_p2[0:0] === 1'b1) ? 7'd1 : add_ln23_1_fu_1199_p2);

assign select_ln23_fu_1119_p3 = ((or_ln23_1_fu_1113_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_input_ch_idx_0_phi_fu_646_p4);

assign select_ln34_1_fu_1271_p3 = ((and_ln34_1_fu_1260_p2[0:0] === 1'b1) ? add_ln35_1_fu_1265_p2 : 10'd0);

assign select_ln34_2_fu_1321_p3 = ((and_ln34_2_fu_1310_p2[0:0] === 1'b1) ? add_ln35_2_fu_1315_p2 : 10'd0);

assign sext_ln23_1_fu_1343_p1 = select_ln34_1_fu_1271_p3;

assign sext_ln23_2_fu_1347_p1 = conv_count_1_reg_2886;

assign sext_ln23_fu_1339_p1 = select_ln34_2_fu_1321_p3;

assign sext_ln34_1_fu_972_p1 = $signed(sub_ln34_1_fu_966_p2);

assign sext_ln34_fu_730_p1 = $signed(sub_ln34_fu_724_p2);

assign sext_ln729_fu_1397_p1 = $signed(add_ln729_fu_1392_p2);

assign sext_ln835_1_fu_1537_p1 = $signed(add_ln835_1_reg_3095_pp0_iter2_reg);

assign sext_ln835_fu_1428_p1 = $signed(add_ln835_reg_3090);

assign shl_ln1_fu_746_p3 = {{ap_phi_mux_out_col_0_phi_fu_610_p4}, {1'd0}};

assign shl_ln30_mid1_fu_883_p3 = {{out_row_fu_870_p2}, {1'd0}};

assign shl_ln31_mid1_fu_1059_p3 = {{out_col_fu_1034_p2}, {1'd0}};

assign shl_ln_fu_706_p3 = {{ap_phi_mux_out_row_0_phi_fu_562_p4}, {1'd0}};

assign sub_ln34_1_fu_966_p2 = (3'd0 - zext_ln34_1_fu_962_p1);

assign sub_ln34_fu_724_p2 = (3'd0 - zext_ln34_fu_720_p1);

assign tmp_12_fu_2398_p4 = {{bitcast_ln117_5_fu_2395_p1[30:23]}};

assign tmp_13_fu_2369_p4 = {{bitcast_ln117_6_fu_2366_p1[30:23]}};

assign tmp_2_fu_1727_p4 = {{bitcast_ln117_fu_1724_p1[30:23]}};

assign tmp_5_fu_1941_p4 = {{bitcast_ln117_1_fu_1938_p1[30:23]}};

assign tmp_6_fu_1958_p4 = {{bitcast_ln117_2_fu_1955_p1[30:23]}};

assign tmp_9_fu_2195_p4 = {{bitcast_ln117_3_fu_2192_p1[30:23]}};

assign tmp_s_fu_2212_p4 = {{bitcast_ln117_4_fu_2209_p1[30:23]}};

assign trunc_ln101_1_fu_1285_p1 = select_ln34_1_fu_1271_p3[8:0];

assign trunc_ln101_2_fu_1371_p1 = select_ln34_2_fu_1321_p3[8:0];

assign trunc_ln101_fu_812_p1 = conv_count_1_fu_792_p3[8:0];

assign trunc_ln117_1_fu_1951_p1 = bitcast_ln117_1_fu_1938_p1[22:0];

assign trunc_ln117_2_fu_1968_p1 = bitcast_ln117_2_fu_1955_p1[22:0];

assign trunc_ln117_3_fu_2205_p1 = bitcast_ln117_3_fu_2192_p1[22:0];

assign trunc_ln117_4_fu_2222_p1 = bitcast_ln117_4_fu_2209_p1[22:0];

assign trunc_ln117_5_fu_2408_p1 = bitcast_ln117_5_fu_2395_p1[22:0];

assign trunc_ln117_6_fu_2379_p1 = bitcast_ln117_6_fu_2366_p1[22:0];

assign trunc_ln117_fu_1737_p1 = bitcast_ln117_fu_1724_p1[22:0];

assign trunc_ln58_fu_1433_p1 = select_ln23_reg_3010_pp0_iter1_reg[3:0];

assign xor_ln17_fu_840_p2 = (icmp_ln19_fu_834_p2 ^ 1'd1);

assign xor_ln19_fu_858_p2 = (icmp_ln21_fu_852_p2 ^ 1'd1);

assign xor_ln21_fu_1075_p2 = (1'd1 ^ and_ln19_3_fu_1021_p2);

assign zext_ln23_1_fu_1127_p1 = col_stride_fu_1101_p2;

assign zext_ln23_2_fu_1335_p1 = select_ln23_2_fu_1329_p3;

assign zext_ln23_3_fu_1388_p1 = select_ln23_4_fu_1381_p3;

assign zext_ln23_fu_760_p1 = ap_phi_mux_col_stride_0_phi_fu_634_p4;

assign zext_ln31_1_fu_1252_p1 = shl_ln31_mid1_reg_2992;

assign zext_ln31_2_fu_1302_p1 = add_ln31_1_reg_3017;

assign zext_ln31_fu_770_p1 = col_idx_fu_764_p2;

assign zext_ln34_1_fu_962_p1 = row_stride_fu_943_p2;

assign zext_ln34_fu_720_p1 = ap_phi_mux_row_stride_0_phi_fu_586_p4;

always @ (posedge ap_clk) begin
    shl_ln_reg_2851[0] <= 1'b0;
    shl_ln1_reg_2871[0] <= 1'b0;
    shl_ln31_mid1_reg_2992[0] <= 1'b0;
end

endmodule //yolo_max_pool_top
