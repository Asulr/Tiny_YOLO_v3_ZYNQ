// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module post_process (
        ap_clk,
        ap_rst,
        sub0_val_output_V,
        sub1_val_output_V,
        sub2_val_output_V,
        sub3_val_output_V,
        acc_flag,
        leaky_V,
        bias_V,
        input_ch_idx_V,
        val_output_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] sub0_val_output_V;
input  [15:0] sub1_val_output_V;
input  [15:0] sub2_val_output_V;
input  [15:0] sub3_val_output_V;
input   acc_flag;
input  [0:0] leaky_V;
input  [15:0] bias_V;
input  [3:0] input_ch_idx_V;
input  [15:0] val_output_V;
output  [15:0] ap_return;
input   ap_ce;

reg[15:0] ap_return;

reg  signed [15:0] bias_V_read_reg_762;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] bias_V_read_reg_762_pp0_iter1_reg;
reg   [0:0] leaky_V_read_reg_768;
reg   [0:0] leaky_V_read_reg_768_pp0_iter1_reg;
reg   [0:0] leaky_V_read_reg_768_pp0_iter2_reg;
reg   [0:0] leaky_V_read_reg_768_pp0_iter3_reg;
reg   [0:0] acc_flag_read_reg_773;
reg   [0:0] acc_flag_read_reg_773_pp0_iter1_reg;
reg   [0:0] acc_flag_read_reg_773_pp0_iter2_reg;
reg   [0:0] acc_flag_read_reg_773_pp0_iter3_reg;
reg  signed [15:0] sub3_val_output_V_re_reg_779;
reg  signed [15:0] sub2_val_output_V_re_reg_785;
reg   [0:0] p_Result_5_reg_791;
wire   [15:0] p_Val2_6_fu_242_p2;
reg   [15:0] p_Val2_6_reg_798;
reg   [0:0] p_Result_6_reg_804;
reg   [0:0] p_Result_9_reg_811;
wire   [15:0] p_Val2_12_fu_411_p2;
reg   [15:0] p_Val2_12_reg_818;
reg   [0:0] p_Result_10_reg_824;
wire  signed [15:0] p_Val2_13_fu_462_p3;
reg  signed [15:0] p_Val2_13_reg_831;
reg  signed [15:0] p_Val2_13_reg_831_pp0_iter3_reg;
wire  signed [15:0] activated_output_V_fu_550_p3;
reg  signed [15:0] activated_output_V_reg_836;
reg  signed [15:0] activated_output_V_reg_836_pp0_iter3_reg;
wire  signed [21:0] r_V_fu_753_p2;
reg  signed [21:0] r_V_reg_843;
wire   [6:0] trunc_ln718_fu_561_p1;
reg   [6:0] trunc_ln718_reg_851;
reg   [0:0] p_Result_13_reg_856;
reg   [0:0] Range2_all_ones_reg_862;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln879_fu_116_p2;
wire  signed [15:0] p_Val2_s_fu_122_p3;
wire  signed [15:0] rhs_V_fu_134_p0;
wire  signed [16:0] rhs_V_fu_134_p1;
wire  signed [16:0] lhs_V_fu_130_p1;
wire   [16:0] ret_V_fu_138_p2;
wire  signed [15:0] p_Val2_3_fu_152_p1;
wire   [15:0] p_Val2_3_fu_152_p2;
wire   [0:0] p_Result_4_fu_158_p3;
wire   [0:0] p_Result_s_fu_144_p3;
wire   [0:0] xor_ln786_fu_166_p2;
wire   [0:0] xor_ln340_9_fu_184_p2;
wire   [0:0] xor_ln340_16_fu_178_p2;
wire   [0:0] underflow_fu_172_p2;
wire   [0:0] or_ln340_fu_190_p2;
wire   [15:0] select_ln340_9_fu_196_p3;
wire   [15:0] select_ln388_9_fu_204_p3;
wire  signed [15:0] p_Val2_4_fu_212_p3;
wire  signed [15:0] rhs_V_1_fu_224_p0;
wire  signed [16:0] rhs_V_1_fu_224_p1;
wire  signed [16:0] lhs_V_1_fu_220_p1;
wire   [16:0] ret_V_6_fu_228_p2;
wire  signed [15:0] p_Val2_6_fu_242_p1;
wire   [0:0] xor_ln786_2_fu_256_p2;
wire   [0:0] xor_ln340_10_fu_270_p2;
wire   [0:0] xor_ln340_17_fu_266_p2;
wire   [0:0] underflow_1_fu_261_p2;
wire   [0:0] or_ln340_11_fu_275_p2;
wire   [15:0] select_ln340_10_fu_280_p3;
wire   [15:0] select_ln388_10_fu_287_p3;
wire  signed [15:0] p_Val2_7_fu_294_p3;
wire  signed [16:0] rhs_V_2_fu_306_p1;
wire  signed [16:0] lhs_V_2_fu_302_p1;
wire   [16:0] ret_V_7_fu_309_p2;
wire   [15:0] p_Val2_9_fu_323_p2;
wire   [0:0] p_Result_8_fu_328_p3;
wire   [0:0] p_Result_7_fu_315_p3;
wire   [0:0] xor_ln786_3_fu_336_p2;
wire   [0:0] xor_ln340_11_fu_354_p2;
wire   [0:0] xor_ln340_18_fu_348_p2;
wire   [0:0] underflow_2_fu_342_p2;
wire   [0:0] or_ln340_12_fu_360_p2;
wire   [15:0] select_ln340_11_fu_366_p3;
wire   [15:0] select_ln388_11_fu_374_p3;
wire  signed [15:0] p_Val2_10_fu_382_p3;
wire  signed [16:0] rhs_V_3_fu_394_p1;
wire  signed [16:0] lhs_V_3_fu_390_p1;
wire   [16:0] ret_V_8_fu_397_p2;
wire   [0:0] xor_ln786_4_fu_424_p2;
wire   [0:0] xor_ln340_12_fu_438_p2;
wire   [0:0] xor_ln340_19_fu_434_p2;
wire   [0:0] underflow_3_fu_429_p2;
wire   [0:0] or_ln340_13_fu_443_p2;
wire   [15:0] select_ln340_12_fu_448_p3;
wire   [15:0] select_ln388_12_fu_455_p3;
wire  signed [16:0] rhs_V_4_fu_474_p1;
wire  signed [16:0] lhs_V_4_fu_470_p1;
wire   [16:0] ret_V_9_fu_477_p2;
wire   [15:0] p_Val2_15_fu_491_p2;
wire   [0:0] p_Result_12_fu_496_p3;
wire   [0:0] p_Result_11_fu_483_p3;
wire   [0:0] xor_ln786_5_fu_504_p2;
wire   [0:0] xor_ln340_fu_522_p2;
wire   [0:0] xor_ln340_20_fu_516_p2;
wire   [0:0] underflow_4_fu_510_p2;
wire   [0:0] or_ln340_9_fu_528_p2;
wire   [15:0] select_ln340_fu_534_p3;
wire   [15:0] select_ln388_fu_542_p3;
wire   [13:0] trunc_ln_fu_585_p4;
wire   [0:0] r_fu_605_p2;
wire   [0:0] tmp_77_fu_598_p3;
wire   [0:0] tmp_79_fu_616_p3;
wire   [0:0] or_ln412_fu_610_p2;
wire   [0:0] and_ln415_fu_623_p2;
wire  signed [14:0] sext_ln713_fu_594_p1;
wire   [14:0] zext_ln415_fu_629_p1;
wire  signed [14:0] p_Val2_17_fu_633_p2;
wire   [0:0] tmp_80_fu_643_p3;
wire   [0:0] xor_ln416_1_fu_651_p2;
wire   [0:0] tmp_83_fu_670_p3;
wire   [0:0] xor_ln416_2_fu_683_p2;
wire   [0:0] or_ln416_1_fu_688_p2;
wire   [0:0] xor_ln779_fu_677_p2;
wire   [0:0] or_ln416_fu_694_p2;
wire   [0:0] carry_2_fu_657_p2;
wire   [0:0] p_Result_14_fu_662_p3;
wire   [0:0] deleted_ones_fu_700_p2;
wire   [0:0] and_ln781_fu_705_p2;
wire   [0:0] and_ln786_fu_710_p2;
wire   [0:0] or_ln786_fu_716_p2;
wire  signed [15:0] sext_ln415_fu_639_p1;
wire   [0:0] and_ln238_fu_730_p2;
wire   [0:0] tmp_fu_578_p3;
wire   [0:0] and_ln238_1_fu_734_p2;
wire   [15:0] select_ln340_13_fu_722_p3;
wire   [15:0] select_ln238_fu_740_p3;
wire   [5:0] r_V_fu_753_p0;
wire   [15:0] select_ln219_fu_747_p3;
reg    ap_ce_reg;
reg   [15:0] sub0_val_output_V_int_reg;
reg   [15:0] sub1_val_output_V_int_reg;
reg   [15:0] sub2_val_output_V_int_reg;
reg   [15:0] sub3_val_output_V_int_reg;
reg    acc_flag_int_reg;
reg   [0:0] leaky_V_int_reg;
reg   [15:0] bias_V_int_reg;
reg   [3:0] input_ch_idx_V_int_reg;
reg   [15:0] val_output_V_int_reg;
reg   [15:0] ap_return_int_reg;

yolo_conv_top_mul_mul_6ns_16s_22_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 22 ))
yolo_conv_top_mul_mul_6ns_16s_22_1_0_U34(
    .din0(r_V_fu_753_p0),
    .din1(activated_output_V_reg_836),
    .dout(r_V_fu_753_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce_reg) & (1'd1 == acc_flag_read_reg_773_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Range2_all_ones_reg_862 <= r_V_fu_753_p2[32'd21];
        p_Result_13_reg_856 <= r_V_fu_753_p2[32'd21];
        r_V_reg_843 <= r_V_fu_753_p2;
        trunc_ln718_reg_851 <= trunc_ln718_fu_561_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        acc_flag_int_reg <= acc_flag;
        bias_V_int_reg <= bias_V;
        input_ch_idx_V_int_reg <= input_ch_idx_V;
        leaky_V_int_reg <= leaky_V;
        sub0_val_output_V_int_reg <= sub0_val_output_V;
        sub1_val_output_V_int_reg <= sub1_val_output_V;
        sub2_val_output_V_int_reg <= sub2_val_output_V;
        sub3_val_output_V_int_reg <= sub3_val_output_V;
        val_output_V_int_reg <= val_output_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc_flag_read_reg_773 <= acc_flag_int_reg;
        acc_flag_read_reg_773_pp0_iter1_reg <= acc_flag_read_reg_773;
        acc_flag_read_reg_773_pp0_iter2_reg <= acc_flag_read_reg_773_pp0_iter1_reg;
        acc_flag_read_reg_773_pp0_iter3_reg <= acc_flag_read_reg_773_pp0_iter2_reg;
        activated_output_V_reg_836_pp0_iter3_reg <= activated_output_V_reg_836;
        bias_V_read_reg_762 <= bias_V_int_reg;
        bias_V_read_reg_762_pp0_iter1_reg <= bias_V_read_reg_762;
        leaky_V_read_reg_768 <= leaky_V_int_reg;
        leaky_V_read_reg_768_pp0_iter1_reg <= leaky_V_read_reg_768;
        leaky_V_read_reg_768_pp0_iter2_reg <= leaky_V_read_reg_768_pp0_iter1_reg;
        leaky_V_read_reg_768_pp0_iter3_reg <= leaky_V_read_reg_768_pp0_iter2_reg;
        p_Result_10_reg_824 <= p_Val2_12_fu_411_p2[32'd15];
        p_Result_5_reg_791 <= ret_V_6_fu_228_p2[32'd16];
        p_Result_6_reg_804 <= p_Val2_6_fu_242_p2[32'd15];
        p_Result_9_reg_811 <= ret_V_8_fu_397_p2[32'd16];
        p_Val2_12_reg_818 <= p_Val2_12_fu_411_p2;
        p_Val2_13_reg_831 <= p_Val2_13_fu_462_p3;
        p_Val2_13_reg_831_pp0_iter3_reg <= p_Val2_13_reg_831;
        p_Val2_6_reg_798 <= p_Val2_6_fu_242_p2;
        sub2_val_output_V_re_reg_785 <= sub2_val_output_V_int_reg;
        sub3_val_output_V_re_reg_779 <= sub3_val_output_V_int_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce_reg) & (1'd1 == acc_flag_read_reg_773_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        activated_output_V_reg_836 <= activated_output_V_fu_550_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln219_fu_747_p3;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln219_fu_747_p3;
    end
end

assign activated_output_V_fu_550_p3 = ((or_ln340_9_fu_528_p2[0:0] === 1'b1) ? select_ln340_fu_534_p3 : select_ln388_fu_542_p3);

assign and_ln238_1_fu_734_p2 = (tmp_fu_578_p3 & and_ln238_fu_730_p2);

assign and_ln238_fu_730_p2 = (leaky_V_read_reg_768_pp0_iter3_reg & acc_flag_read_reg_773_pp0_iter3_reg);

assign and_ln415_fu_623_p2 = (tmp_79_fu_616_p3 & or_ln412_fu_610_p2);

assign and_ln781_fu_705_p2 = (carry_2_fu_657_p2 & Range2_all_ones_reg_862);

assign and_ln786_fu_710_p2 = (p_Result_14_fu_662_p3 & deleted_ones_fu_700_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign carry_2_fu_657_p2 = (xor_ln416_1_fu_651_p2 & p_Result_13_reg_856);

assign deleted_ones_fu_700_p2 = (or_ln416_fu_694_p2 & Range2_all_ones_reg_862);

assign icmp_ln879_fu_116_p2 = ((input_ch_idx_V_int_reg == 4'd0) ? 1'b1 : 1'b0);

assign lhs_V_1_fu_220_p1 = p_Val2_4_fu_212_p3;

assign lhs_V_2_fu_302_p1 = p_Val2_7_fu_294_p3;

assign lhs_V_3_fu_390_p1 = p_Val2_10_fu_382_p3;

assign lhs_V_4_fu_470_p1 = p_Val2_13_fu_462_p3;

assign lhs_V_fu_130_p1 = p_Val2_s_fu_122_p3;

assign or_ln340_11_fu_275_p2 = (xor_ln340_10_fu_270_p2 | p_Result_6_reg_804);

assign or_ln340_12_fu_360_p2 = (xor_ln340_11_fu_354_p2 | p_Result_8_fu_328_p3);

assign or_ln340_13_fu_443_p2 = (xor_ln340_12_fu_438_p2 | p_Result_10_reg_824);

assign or_ln340_9_fu_528_p2 = (xor_ln340_fu_522_p2 | p_Result_12_fu_496_p3);

assign or_ln340_fu_190_p2 = (xor_ln340_9_fu_184_p2 | p_Result_4_fu_158_p3);

assign or_ln412_fu_610_p2 = (tmp_77_fu_598_p3 | r_fu_605_p2);

assign or_ln416_1_fu_688_p2 = (xor_ln416_2_fu_683_p2 | tmp_80_fu_643_p3);

assign or_ln416_fu_694_p2 = (xor_ln779_fu_677_p2 | or_ln416_1_fu_688_p2);

assign or_ln786_fu_716_p2 = (and_ln786_fu_710_p2 | and_ln781_fu_705_p2);

assign p_Result_11_fu_483_p3 = ret_V_9_fu_477_p2[32'd16];

assign p_Result_12_fu_496_p3 = p_Val2_15_fu_491_p2[32'd15];

assign p_Result_14_fu_662_p3 = p_Val2_17_fu_633_p2[32'd14];

assign p_Result_4_fu_158_p3 = p_Val2_3_fu_152_p2[32'd15];

assign p_Result_7_fu_315_p3 = ret_V_7_fu_309_p2[32'd16];

assign p_Result_8_fu_328_p3 = p_Val2_9_fu_323_p2[32'd15];

assign p_Result_s_fu_144_p3 = ret_V_fu_138_p2[32'd16];

assign p_Val2_10_fu_382_p3 = ((or_ln340_12_fu_360_p2[0:0] === 1'b1) ? select_ln340_11_fu_366_p3 : select_ln388_11_fu_374_p3);

assign p_Val2_12_fu_411_p2 = ($signed(p_Val2_10_fu_382_p3) + $signed(sub3_val_output_V_re_reg_779));

assign p_Val2_13_fu_462_p3 = ((or_ln340_13_fu_443_p2[0:0] === 1'b1) ? select_ln340_12_fu_448_p3 : select_ln388_12_fu_455_p3);

assign p_Val2_15_fu_491_p2 = ($signed(p_Val2_13_fu_462_p3) + $signed(bias_V_read_reg_762_pp0_iter1_reg));

assign p_Val2_17_fu_633_p2 = ($signed(sext_ln713_fu_594_p1) + $signed(zext_ln415_fu_629_p1));

assign p_Val2_3_fu_152_p1 = sub0_val_output_V_int_reg;

assign p_Val2_3_fu_152_p2 = ($signed(p_Val2_s_fu_122_p3) + $signed(p_Val2_3_fu_152_p1));

assign p_Val2_4_fu_212_p3 = ((or_ln340_fu_190_p2[0:0] === 1'b1) ? select_ln340_9_fu_196_p3 : select_ln388_9_fu_204_p3);

assign p_Val2_6_fu_242_p1 = sub1_val_output_V_int_reg;

assign p_Val2_6_fu_242_p2 = ($signed(p_Val2_4_fu_212_p3) + $signed(p_Val2_6_fu_242_p1));

assign p_Val2_7_fu_294_p3 = ((or_ln340_11_fu_275_p2[0:0] === 1'b1) ? select_ln340_10_fu_280_p3 : select_ln388_10_fu_287_p3);

assign p_Val2_9_fu_323_p2 = ($signed(p_Val2_7_fu_294_p3) + $signed(sub2_val_output_V_re_reg_785));

assign p_Val2_s_fu_122_p3 = ((icmp_ln879_fu_116_p2[0:0] === 1'b1) ? 16'd0 : val_output_V_int_reg);

assign r_V_fu_753_p0 = 22'd26;

assign r_fu_605_p2 = ((trunc_ln718_reg_851 != 7'd0) ? 1'b1 : 1'b0);

assign ret_V_6_fu_228_p2 = ($signed(rhs_V_1_fu_224_p1) + $signed(lhs_V_1_fu_220_p1));

assign ret_V_7_fu_309_p2 = ($signed(rhs_V_2_fu_306_p1) + $signed(lhs_V_2_fu_302_p1));

assign ret_V_8_fu_397_p2 = ($signed(rhs_V_3_fu_394_p1) + $signed(lhs_V_3_fu_390_p1));

assign ret_V_9_fu_477_p2 = ($signed(rhs_V_4_fu_474_p1) + $signed(lhs_V_4_fu_470_p1));

assign ret_V_fu_138_p2 = ($signed(rhs_V_fu_134_p1) + $signed(lhs_V_fu_130_p1));

assign rhs_V_1_fu_224_p0 = sub1_val_output_V_int_reg;

assign rhs_V_1_fu_224_p1 = rhs_V_1_fu_224_p0;

assign rhs_V_2_fu_306_p1 = sub2_val_output_V_re_reg_785;

assign rhs_V_3_fu_394_p1 = sub3_val_output_V_re_reg_779;

assign rhs_V_4_fu_474_p1 = bias_V_read_reg_762_pp0_iter1_reg;

assign rhs_V_fu_134_p0 = sub0_val_output_V_int_reg;

assign rhs_V_fu_134_p1 = rhs_V_fu_134_p0;

assign select_ln219_fu_747_p3 = ((acc_flag_read_reg_773_pp0_iter3_reg[0:0] === 1'b1) ? select_ln238_fu_740_p3 : p_Val2_13_reg_831_pp0_iter3_reg);

assign select_ln238_fu_740_p3 = ((and_ln238_1_fu_734_p2[0:0] === 1'b1) ? select_ln340_13_fu_722_p3 : activated_output_V_reg_836_pp0_iter3_reg);

assign select_ln340_10_fu_280_p3 = ((xor_ln340_17_fu_266_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_6_reg_798);

assign select_ln340_11_fu_366_p3 = ((xor_ln340_18_fu_348_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_9_fu_323_p2);

assign select_ln340_12_fu_448_p3 = ((xor_ln340_19_fu_434_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_12_reg_818);

assign select_ln340_13_fu_722_p3 = ((or_ln786_fu_716_p2[0:0] === 1'b1) ? sext_ln415_fu_639_p1 : 16'd32768);

assign select_ln340_9_fu_196_p3 = ((xor_ln340_16_fu_178_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_3_fu_152_p2);

assign select_ln340_fu_534_p3 = ((xor_ln340_20_fu_516_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_15_fu_491_p2);

assign select_ln388_10_fu_287_p3 = ((underflow_1_fu_261_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_6_reg_798);

assign select_ln388_11_fu_374_p3 = ((underflow_2_fu_342_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_9_fu_323_p2);

assign select_ln388_12_fu_455_p3 = ((underflow_3_fu_429_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_12_reg_818);

assign select_ln388_9_fu_204_p3 = ((underflow_fu_172_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_3_fu_152_p2);

assign select_ln388_fu_542_p3 = ((underflow_4_fu_510_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_15_fu_491_p2);

assign sext_ln415_fu_639_p1 = p_Val2_17_fu_633_p2;

assign sext_ln713_fu_594_p1 = $signed(trunc_ln_fu_585_p4);

assign tmp_77_fu_598_p3 = r_V_reg_843[32'd8];

assign tmp_79_fu_616_p3 = r_V_reg_843[32'd7];

assign tmp_80_fu_643_p3 = p_Val2_17_fu_633_p2[32'd14];

assign tmp_83_fu_670_p3 = r_V_reg_843[32'd20];

assign tmp_fu_578_p3 = activated_output_V_reg_836_pp0_iter3_reg[32'd15];

assign trunc_ln718_fu_561_p1 = r_V_fu_753_p2[6:0];

assign trunc_ln_fu_585_p4 = {{r_V_reg_843[21:8]}};

assign underflow_1_fu_261_p2 = (xor_ln786_2_fu_256_p2 & p_Result_5_reg_791);

assign underflow_2_fu_342_p2 = (xor_ln786_3_fu_336_p2 & p_Result_7_fu_315_p3);

assign underflow_3_fu_429_p2 = (xor_ln786_4_fu_424_p2 & p_Result_9_reg_811);

assign underflow_4_fu_510_p2 = (xor_ln786_5_fu_504_p2 & p_Result_11_fu_483_p3);

assign underflow_fu_172_p2 = (xor_ln786_fu_166_p2 & p_Result_s_fu_144_p3);

assign xor_ln340_10_fu_270_p2 = (p_Result_5_reg_791 ^ 1'd1);

assign xor_ln340_11_fu_354_p2 = (p_Result_7_fu_315_p3 ^ 1'd1);

assign xor_ln340_12_fu_438_p2 = (p_Result_9_reg_811 ^ 1'd1);

assign xor_ln340_16_fu_178_p2 = (p_Result_s_fu_144_p3 ^ p_Result_4_fu_158_p3);

assign xor_ln340_17_fu_266_p2 = (p_Result_6_reg_804 ^ p_Result_5_reg_791);

assign xor_ln340_18_fu_348_p2 = (p_Result_8_fu_328_p3 ^ p_Result_7_fu_315_p3);

assign xor_ln340_19_fu_434_p2 = (p_Result_9_reg_811 ^ p_Result_10_reg_824);

assign xor_ln340_20_fu_516_p2 = (p_Result_12_fu_496_p3 ^ p_Result_11_fu_483_p3);

assign xor_ln340_9_fu_184_p2 = (p_Result_s_fu_144_p3 ^ 1'd1);

assign xor_ln340_fu_522_p2 = (p_Result_11_fu_483_p3 ^ 1'd1);

assign xor_ln416_1_fu_651_p2 = (tmp_80_fu_643_p3 ^ 1'd1);

assign xor_ln416_2_fu_683_p2 = (p_Result_13_reg_856 ^ 1'd1);

assign xor_ln779_fu_677_p2 = (tmp_83_fu_670_p3 ^ 1'd1);

assign xor_ln786_2_fu_256_p2 = (p_Result_6_reg_804 ^ 1'd1);

assign xor_ln786_3_fu_336_p2 = (p_Result_8_fu_328_p3 ^ 1'd1);

assign xor_ln786_4_fu_424_p2 = (p_Result_10_reg_824 ^ 1'd1);

assign xor_ln786_5_fu_504_p2 = (p_Result_12_fu_496_p3 ^ 1'd1);

assign xor_ln786_fu_166_p2 = (p_Result_4_fu_158_p3 ^ 1'd1);

assign zext_ln415_fu_629_p1 = and_ln415_fu_623_p2;

endmodule //post_process
