// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="yolo_acc_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.033000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=692,HLS_SYN_LUT=1248,HLS_VERSION=2019_1}" *)

module yolo_acc_top (
        ap_clk,
        ap_rst_n,
        inStream_a_TDATA,
        inStream_a_TVALID,
        inStream_a_TREADY,
        inStream_a_TKEEP,
        inStream_a_TSTRB,
        inStream_a_TUSER,
        inStream_a_TLAST,
        inStream_a_TID,
        inStream_a_TDEST,
        inStream_b_TDATA,
        inStream_b_TVALID,
        inStream_b_TREADY,
        inStream_b_TKEEP,
        inStream_b_TSTRB,
        inStream_b_TUSER,
        inStream_b_TLAST,
        inStream_b_TID,
        inStream_b_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] inStream_a_TDATA;
input   inStream_a_TVALID;
output   inStream_a_TREADY;
input  [7:0] inStream_a_TKEEP;
input  [7:0] inStream_a_TSTRB;
input  [1:0] inStream_a_TUSER;
input  [0:0] inStream_a_TLAST;
input  [4:0] inStream_a_TID;
input  [5:0] inStream_a_TDEST;
input  [63:0] inStream_b_TDATA;
input   inStream_b_TVALID;
output   inStream_b_TREADY;
input  [7:0] inStream_b_TKEEP;
input  [7:0] inStream_b_TSTRB;
input  [1:0] inStream_b_TUSER;
input  [0:0] inStream_b_TLAST;
input  [4:0] inStream_b_TID;
input  [5:0] inStream_b_TDEST;
output  [63:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] inStream_a_V_data_0_data_out;
wire    inStream_a_V_data_0_vld_in;
wire    inStream_a_V_data_0_vld_out;
wire    inStream_a_V_data_0_ack_in;
reg    inStream_a_V_data_0_ack_out;
reg   [63:0] inStream_a_V_data_0_payload_A;
reg   [63:0] inStream_a_V_data_0_payload_B;
reg    inStream_a_V_data_0_sel_rd;
reg    inStream_a_V_data_0_sel_wr;
wire    inStream_a_V_data_0_sel;
wire    inStream_a_V_data_0_load_A;
wire    inStream_a_V_data_0_load_B;
reg   [1:0] inStream_a_V_data_0_state;
wire    inStream_a_V_data_0_state_cmp_full;
reg   [7:0] inStream_a_V_keep_V_0_data_out;
wire    inStream_a_V_keep_V_0_vld_in;
wire    inStream_a_V_keep_V_0_vld_out;
wire    inStream_a_V_keep_V_0_ack_in;
reg    inStream_a_V_keep_V_0_ack_out;
reg   [7:0] inStream_a_V_keep_V_0_payload_A;
reg   [7:0] inStream_a_V_keep_V_0_payload_B;
reg    inStream_a_V_keep_V_0_sel_rd;
reg    inStream_a_V_keep_V_0_sel_wr;
wire    inStream_a_V_keep_V_0_sel;
wire    inStream_a_V_keep_V_0_load_A;
wire    inStream_a_V_keep_V_0_load_B;
reg   [1:0] inStream_a_V_keep_V_0_state;
wire    inStream_a_V_keep_V_0_state_cmp_full;
reg   [7:0] inStream_a_V_strb_V_0_data_out;
wire    inStream_a_V_strb_V_0_vld_in;
wire    inStream_a_V_strb_V_0_vld_out;
wire    inStream_a_V_strb_V_0_ack_in;
reg    inStream_a_V_strb_V_0_ack_out;
reg   [7:0] inStream_a_V_strb_V_0_payload_A;
reg   [7:0] inStream_a_V_strb_V_0_payload_B;
reg    inStream_a_V_strb_V_0_sel_rd;
reg    inStream_a_V_strb_V_0_sel_wr;
wire    inStream_a_V_strb_V_0_sel;
wire    inStream_a_V_strb_V_0_load_A;
wire    inStream_a_V_strb_V_0_load_B;
reg   [1:0] inStream_a_V_strb_V_0_state;
wire    inStream_a_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_a_V_user_V_0_data_out;
wire    inStream_a_V_user_V_0_vld_in;
wire    inStream_a_V_user_V_0_vld_out;
wire    inStream_a_V_user_V_0_ack_in;
reg    inStream_a_V_user_V_0_ack_out;
reg   [1:0] inStream_a_V_user_V_0_payload_A;
reg   [1:0] inStream_a_V_user_V_0_payload_B;
reg    inStream_a_V_user_V_0_sel_rd;
reg    inStream_a_V_user_V_0_sel_wr;
wire    inStream_a_V_user_V_0_sel;
wire    inStream_a_V_user_V_0_load_A;
wire    inStream_a_V_user_V_0_load_B;
reg   [1:0] inStream_a_V_user_V_0_state;
wire    inStream_a_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_a_V_id_V_0_data_out;
wire    inStream_a_V_id_V_0_vld_in;
wire    inStream_a_V_id_V_0_vld_out;
wire    inStream_a_V_id_V_0_ack_in;
reg    inStream_a_V_id_V_0_ack_out;
reg   [4:0] inStream_a_V_id_V_0_payload_A;
reg   [4:0] inStream_a_V_id_V_0_payload_B;
reg    inStream_a_V_id_V_0_sel_rd;
reg    inStream_a_V_id_V_0_sel_wr;
wire    inStream_a_V_id_V_0_sel;
wire    inStream_a_V_id_V_0_load_A;
wire    inStream_a_V_id_V_0_load_B;
reg   [1:0] inStream_a_V_id_V_0_state;
wire    inStream_a_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_a_V_dest_V_0_data_out;
wire    inStream_a_V_dest_V_0_vld_in;
wire    inStream_a_V_dest_V_0_vld_out;
wire    inStream_a_V_dest_V_0_ack_in;
reg    inStream_a_V_dest_V_0_ack_out;
reg   [5:0] inStream_a_V_dest_V_0_payload_A;
reg   [5:0] inStream_a_V_dest_V_0_payload_B;
reg    inStream_a_V_dest_V_0_sel_rd;
reg    inStream_a_V_dest_V_0_sel_wr;
wire    inStream_a_V_dest_V_0_sel;
wire    inStream_a_V_dest_V_0_load_A;
wire    inStream_a_V_dest_V_0_load_B;
reg   [1:0] inStream_a_V_dest_V_0_state;
wire    inStream_a_V_dest_V_0_state_cmp_full;
reg   [63:0] inStream_b_V_data_0_data_out;
wire    inStream_b_V_data_0_vld_in;
wire    inStream_b_V_data_0_vld_out;
wire    inStream_b_V_data_0_ack_in;
reg    inStream_b_V_data_0_ack_out;
reg   [63:0] inStream_b_V_data_0_payload_A;
reg   [63:0] inStream_b_V_data_0_payload_B;
reg    inStream_b_V_data_0_sel_rd;
reg    inStream_b_V_data_0_sel_wr;
wire    inStream_b_V_data_0_sel;
wire    inStream_b_V_data_0_load_A;
wire    inStream_b_V_data_0_load_B;
reg   [1:0] inStream_b_V_data_0_state;
wire    inStream_b_V_data_0_state_cmp_full;
wire    inStream_b_V_dest_V_0_vld_in;
reg    inStream_b_V_dest_V_0_ack_out;
reg   [1:0] inStream_b_V_dest_V_0_state;
reg   [63:0] outStream_V_data_1_data_out;
reg    outStream_V_data_1_vld_in;
wire    outStream_V_data_1_vld_out;
wire    outStream_V_data_1_ack_in;
wire    outStream_V_data_1_ack_out;
reg   [63:0] outStream_V_data_1_payload_A;
reg   [63:0] outStream_V_data_1_payload_B;
reg    outStream_V_data_1_sel_rd;
reg    outStream_V_data_1_sel_wr;
wire    outStream_V_data_1_sel;
wire    outStream_V_data_1_load_A;
wire    outStream_V_data_1_load_B;
reg   [1:0] outStream_V_data_1_state;
wire    outStream_V_data_1_state_cmp_full;
reg   [7:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [7:0] outStream_V_keep_V_1_payload_A;
reg   [7:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [7:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [7:0] outStream_V_strb_V_1_payload_A;
reg   [7:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [5:0] input_h_V;
wire   [5:0] input_w_V;
reg   [5:0] input_w_V_0_data_reg;
reg    input_w_V_0_vld_reg;
reg    input_w_V_0_ack_out;
reg    inStream_a_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln18_fu_294_p2;
reg    inStream_b_TDATA_blk_n;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_state6;
reg   [5:0] input_h_V_read_reg_798;
reg   [5:0] input_w_V_read_reg_804;
wire    ap_CS_fsm_state2;
wire   [6:0] add_ln1354_fu_234_p2;
reg   [6:0] add_ln1354_reg_809;
wire   [6:0] add_ln1354_1_fu_243_p2;
reg   [6:0] add_ln1354_1_reg_814;
wire   [5:0] row_idx_fu_254_p2;
reg   [5:0] row_idx_reg_822;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
wire   [0:0] icmp_ln35_2_fu_264_p2;
reg   [0:0] icmp_ln35_2_reg_827;
wire   [0:0] icmp_ln14_fu_249_p2;
wire   [5:0] col_idx_fu_274_p2;
reg   [5:0] col_idx_reg_835;
wire    ap_CS_fsm_state4;
wire   [0:0] or_ln35_fu_289_p2;
reg   [0:0] or_ln35_reg_840;
wire   [0:0] icmp_ln16_fu_269_p2;
wire   [3:0] input_ch_idx_fu_300_p2;
reg   [3:0] input_ch_idx_reg_848;
reg    ap_block_state5;
reg    ap_block_state5_io;
wire   [0:0] tmp_last_V_fu_778_p2;
wire   [63:0] tmp_data_2_fu_785_p5;
reg   [5:0] i_op_assign_reg_197;
reg   [5:0] i_op_assign_1_reg_208;
reg   [3:0] input_ch_idx_0_reg_219;
wire   [6:0] zext_ln1354_fu_230_p1;
wire   [6:0] zext_ln1354_1_fu_240_p1;
wire   [6:0] zext_ln1598_fu_260_p1;
wire   [6:0] zext_ln18_fu_280_p1;
wire   [0:0] icmp_ln35_1_fu_284_p2;
wire  signed [15:0] p_Val2_s_fu_335_p1;
wire  signed [15:0] p_Val2_1_fu_373_p1;
wire  signed [16:0] lhs_V_fu_407_p1;
wire  signed [16:0] rhs_V_fu_411_p1;
wire   [16:0] ret_V_fu_415_p2;
wire   [15:0] p_Val2_6_fu_429_p2;
wire   [0:0] p_Result_1_fu_435_p3;
wire   [0:0] p_Result_s_fu_421_p3;
wire   [0:0] xor_ln786_fu_443_p2;
wire   [0:0] xor_ln340_fu_461_p2;
wire   [0:0] xor_ln340_4_fu_455_p2;
wire   [0:0] underflow_fu_449_p2;
wire   [0:0] or_ln340_fu_467_p2;
wire   [15:0] select_ln340_fu_473_p3;
wire   [15:0] select_ln388_fu_481_p3;
wire  signed [15:0] p_Val2_4_fu_339_p4;
wire  signed [15:0] p_Val2_5_fu_377_p4;
wire  signed [16:0] lhs_V_1_fu_497_p1;
wire  signed [16:0] rhs_V_1_fu_501_p1;
wire   [16:0] ret_V_1_fu_505_p2;
wire   [15:0] p_Val2_10_fu_519_p2;
wire   [0:0] p_Result_3_fu_525_p3;
wire   [0:0] p_Result_2_fu_511_p3;
wire   [0:0] xor_ln786_1_fu_533_p2;
wire   [0:0] xor_ln340_1_fu_551_p2;
wire   [0:0] xor_ln340_5_fu_545_p2;
wire   [0:0] underflow_1_fu_539_p2;
wire   [0:0] or_ln340_1_fu_557_p2;
wire   [15:0] select_ln340_1_fu_563_p3;
wire   [15:0] select_ln388_1_fu_571_p3;
wire  signed [15:0] p_Val2_8_fu_349_p4;
wire  signed [15:0] p_Val2_9_fu_387_p4;
wire  signed [16:0] lhs_V_2_fu_587_p1;
wire  signed [16:0] rhs_V_2_fu_591_p1;
wire   [16:0] ret_V_2_fu_595_p2;
wire   [15:0] p_Val2_12_fu_609_p2;
wire   [0:0] p_Result_5_fu_615_p3;
wire   [0:0] p_Result_4_fu_601_p3;
wire   [0:0] xor_ln786_2_fu_623_p2;
wire   [0:0] xor_ln340_2_fu_641_p2;
wire   [0:0] xor_ln340_6_fu_635_p2;
wire   [0:0] underflow_2_fu_629_p2;
wire   [0:0] or_ln340_2_fu_647_p2;
wire   [15:0] select_ln340_2_fu_653_p3;
wire   [15:0] select_ln388_2_fu_661_p3;
wire  signed [15:0] p_Val2_13_fu_359_p4;
wire  signed [15:0] p_Val2_2_fu_397_p4;
wire  signed [16:0] lhs_V_3_fu_677_p1;
wire  signed [16:0] rhs_V_3_fu_681_p1;
wire   [16:0] ret_V_3_fu_685_p2;
wire   [15:0] p_Val2_15_fu_699_p2;
wire   [0:0] p_Result_7_fu_705_p3;
wire   [0:0] p_Result_6_fu_691_p3;
wire   [0:0] xor_ln786_3_fu_713_p2;
wire   [0:0] xor_ln340_3_fu_731_p2;
wire   [0:0] xor_ln340_7_fu_725_p2;
wire   [0:0] underflow_3_fu_719_p2;
wire   [0:0] or_ln340_3_fu_737_p2;
wire   [15:0] select_ln340_3_fu_743_p3;
wire   [15:0] select_ln388_3_fu_751_p3;
wire   [0:0] icmp_ln35_fu_767_p2;
wire   [0:0] or_ln35_1_fu_773_p2;
wire   [15:0] tmp_data_sub_data_3_s_fu_759_p3;
wire   [15:0] tmp_data_sub_data_2_s_fu_669_p3;
wire   [15:0] tmp_data_sub_data_1_s_fu_579_p3;
wire   [15:0] tmp_data_sub_data_0_s_fu_489_p3;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 inStream_a_V_data_0_sel_rd = 1'b0;
#0 inStream_a_V_data_0_sel_wr = 1'b0;
#0 inStream_a_V_data_0_state = 2'd0;
#0 inStream_a_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_a_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_a_V_keep_V_0_state = 2'd0;
#0 inStream_a_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_a_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_a_V_strb_V_0_state = 2'd0;
#0 inStream_a_V_user_V_0_sel_rd = 1'b0;
#0 inStream_a_V_user_V_0_sel_wr = 1'b0;
#0 inStream_a_V_user_V_0_state = 2'd0;
#0 inStream_a_V_id_V_0_sel_rd = 1'b0;
#0 inStream_a_V_id_V_0_sel_wr = 1'b0;
#0 inStream_a_V_id_V_0_state = 2'd0;
#0 inStream_a_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_a_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_a_V_dest_V_0_state = 2'd0;
#0 inStream_b_V_data_0_sel_rd = 1'b0;
#0 inStream_b_V_data_0_sel_wr = 1'b0;
#0 inStream_b_V_data_0_state = 2'd0;
#0 inStream_b_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_1_sel_rd = 1'b0;
#0 outStream_V_data_1_sel_wr = 1'b0;
#0 outStream_V_data_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 input_w_V_0_data_reg = 6'd0;
#0 input_w_V_0_vld_reg = 1'b0;
end

yolo_acc_top_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
yolo_acc_top_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_h_V(input_h_V),
    .input_w_V(input_w_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_a_V_data_0_ack_out == 1'b1) & (inStream_a_V_data_0_vld_out == 1'b1))) begin
            inStream_a_V_data_0_sel_rd <= ~inStream_a_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_a_V_data_0_ack_in == 1'b1) & (inStream_a_V_data_0_vld_in == 1'b1))) begin
            inStream_a_V_data_0_sel_wr <= ~inStream_a_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_data_0_state <= 2'd0;
    end else begin
        if ((((inStream_a_V_data_0_state == 2'd2) & (inStream_a_V_data_0_vld_in == 1'b0)) | ((inStream_a_V_data_0_state == 2'd3) & (inStream_a_V_data_0_vld_in == 1'b0) & (inStream_a_V_data_0_ack_out == 1'b1)))) begin
            inStream_a_V_data_0_state <= 2'd2;
        end else if ((((inStream_a_V_data_0_state == 2'd1) & (inStream_a_V_data_0_ack_out == 1'b0)) | ((inStream_a_V_data_0_state == 2'd3) & (inStream_a_V_data_0_ack_out == 1'b0) & (inStream_a_V_data_0_vld_in == 1'b1)))) begin
            inStream_a_V_data_0_state <= 2'd1;
        end else if (((~((inStream_a_V_data_0_vld_in == 1'b0) & (inStream_a_V_data_0_ack_out == 1'b1)) & ~((inStream_a_V_data_0_ack_out == 1'b0) & (inStream_a_V_data_0_vld_in == 1'b1)) & (inStream_a_V_data_0_state == 2'd3)) | ((inStream_a_V_data_0_state == 2'd1) & (inStream_a_V_data_0_ack_out == 1'b1)) | ((inStream_a_V_data_0_state == 2'd2) & (inStream_a_V_data_0_vld_in == 1'b1)))) begin
            inStream_a_V_data_0_state <= 2'd3;
        end else begin
            inStream_a_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_a_V_dest_V_0_ack_out == 1'b1) & (inStream_a_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_a_V_dest_V_0_sel_rd <= ~inStream_a_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_a_V_dest_V_0_ack_in == 1'b1) & (inStream_a_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_a_V_dest_V_0_sel_wr <= ~inStream_a_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_a_V_dest_V_0_state == 2'd2) & (inStream_a_V_dest_V_0_vld_in == 1'b0)) | ((inStream_a_V_dest_V_0_state == 2'd3) & (inStream_a_V_dest_V_0_vld_in == 1'b0) & (inStream_a_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_a_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_a_V_dest_V_0_state == 2'd1) & (inStream_a_V_dest_V_0_ack_out == 1'b0)) | ((inStream_a_V_dest_V_0_state == 2'd3) & (inStream_a_V_dest_V_0_ack_out == 1'b0) & (inStream_a_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_a_V_dest_V_0_vld_in == 1'b0) & (inStream_a_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_a_V_dest_V_0_ack_out == 1'b0) & (inStream_a_V_dest_V_0_vld_in == 1'b1)) & (inStream_a_V_dest_V_0_state == 2'd3)) | ((inStream_a_V_dest_V_0_state == 2'd1) & (inStream_a_V_dest_V_0_ack_out == 1'b1)) | ((inStream_a_V_dest_V_0_state == 2'd2) & (inStream_a_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_a_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_a_V_id_V_0_ack_out == 1'b1) & (inStream_a_V_id_V_0_vld_out == 1'b1))) begin
            inStream_a_V_id_V_0_sel_rd <= ~inStream_a_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_a_V_id_V_0_ack_in == 1'b1) & (inStream_a_V_id_V_0_vld_in == 1'b1))) begin
            inStream_a_V_id_V_0_sel_wr <= ~inStream_a_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_a_V_id_V_0_state == 2'd2) & (inStream_a_V_id_V_0_vld_in == 1'b0)) | ((inStream_a_V_id_V_0_state == 2'd3) & (inStream_a_V_id_V_0_vld_in == 1'b0) & (inStream_a_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_a_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_a_V_id_V_0_state == 2'd1) & (inStream_a_V_id_V_0_ack_out == 1'b0)) | ((inStream_a_V_id_V_0_state == 2'd3) & (inStream_a_V_id_V_0_ack_out == 1'b0) & (inStream_a_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_a_V_id_V_0_vld_in == 1'b0) & (inStream_a_V_id_V_0_ack_out == 1'b1)) & ~((inStream_a_V_id_V_0_ack_out == 1'b0) & (inStream_a_V_id_V_0_vld_in == 1'b1)) & (inStream_a_V_id_V_0_state == 2'd3)) | ((inStream_a_V_id_V_0_state == 2'd1) & (inStream_a_V_id_V_0_ack_out == 1'b1)) | ((inStream_a_V_id_V_0_state == 2'd2) & (inStream_a_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_a_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_a_V_keep_V_0_ack_out == 1'b1) & (inStream_a_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_a_V_keep_V_0_sel_rd <= ~inStream_a_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_a_V_keep_V_0_vld_in == 1'b1) & (inStream_a_V_keep_V_0_ack_in == 1'b1))) begin
            inStream_a_V_keep_V_0_sel_wr <= ~inStream_a_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_a_V_keep_V_0_state == 2'd2) & (inStream_a_V_keep_V_0_vld_in == 1'b0)) | ((inStream_a_V_keep_V_0_state == 2'd3) & (inStream_a_V_keep_V_0_vld_in == 1'b0) & (inStream_a_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_a_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_a_V_keep_V_0_state == 2'd1) & (inStream_a_V_keep_V_0_ack_out == 1'b0)) | ((inStream_a_V_keep_V_0_state == 2'd3) & (inStream_a_V_keep_V_0_ack_out == 1'b0) & (inStream_a_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_a_V_keep_V_0_vld_in == 1'b0) & (inStream_a_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_a_V_keep_V_0_ack_out == 1'b0) & (inStream_a_V_keep_V_0_vld_in == 1'b1)) & (inStream_a_V_keep_V_0_state == 2'd3)) | ((inStream_a_V_keep_V_0_state == 2'd1) & (inStream_a_V_keep_V_0_ack_out == 1'b1)) | ((inStream_a_V_keep_V_0_state == 2'd2) & (inStream_a_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_a_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_a_V_strb_V_0_ack_out == 1'b1) & (inStream_a_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_a_V_strb_V_0_sel_rd <= ~inStream_a_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_a_V_strb_V_0_ack_in == 1'b1) & (inStream_a_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_a_V_strb_V_0_sel_wr <= ~inStream_a_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_a_V_strb_V_0_state == 2'd2) & (inStream_a_V_strb_V_0_vld_in == 1'b0)) | ((inStream_a_V_strb_V_0_state == 2'd3) & (inStream_a_V_strb_V_0_vld_in == 1'b0) & (inStream_a_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_a_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_a_V_strb_V_0_state == 2'd1) & (inStream_a_V_strb_V_0_ack_out == 1'b0)) | ((inStream_a_V_strb_V_0_state == 2'd3) & (inStream_a_V_strb_V_0_ack_out == 1'b0) & (inStream_a_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_a_V_strb_V_0_vld_in == 1'b0) & (inStream_a_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_a_V_strb_V_0_ack_out == 1'b0) & (inStream_a_V_strb_V_0_vld_in == 1'b1)) & (inStream_a_V_strb_V_0_state == 2'd3)) | ((inStream_a_V_strb_V_0_state == 2'd1) & (inStream_a_V_strb_V_0_ack_out == 1'b1)) | ((inStream_a_V_strb_V_0_state == 2'd2) & (inStream_a_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_a_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_a_V_user_V_0_ack_out == 1'b1) & (inStream_a_V_user_V_0_vld_out == 1'b1))) begin
            inStream_a_V_user_V_0_sel_rd <= ~inStream_a_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_a_V_user_V_0_ack_in == 1'b1) & (inStream_a_V_user_V_0_vld_in == 1'b1))) begin
            inStream_a_V_user_V_0_sel_wr <= ~inStream_a_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_a_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_a_V_user_V_0_state == 2'd2) & (inStream_a_V_user_V_0_vld_in == 1'b0)) | ((inStream_a_V_user_V_0_state == 2'd3) & (inStream_a_V_user_V_0_vld_in == 1'b0) & (inStream_a_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_a_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_a_V_user_V_0_state == 2'd1) & (inStream_a_V_user_V_0_ack_out == 1'b0)) | ((inStream_a_V_user_V_0_state == 2'd3) & (inStream_a_V_user_V_0_ack_out == 1'b0) & (inStream_a_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_a_V_user_V_0_vld_in == 1'b0) & (inStream_a_V_user_V_0_ack_out == 1'b1)) & ~((inStream_a_V_user_V_0_ack_out == 1'b0) & (inStream_a_V_user_V_0_vld_in == 1'b1)) & (inStream_a_V_user_V_0_state == 2'd3)) | ((inStream_a_V_user_V_0_state == 2'd1) & (inStream_a_V_user_V_0_ack_out == 1'b1)) | ((inStream_a_V_user_V_0_state == 2'd2) & (inStream_a_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_a_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_a_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_b_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_b_V_data_0_ack_out == 1'b1) & (inStream_b_V_data_0_vld_out == 1'b1))) begin
            inStream_b_V_data_0_sel_rd <= ~inStream_b_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_b_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_b_V_data_0_ack_in == 1'b1) & (inStream_b_V_data_0_vld_in == 1'b1))) begin
            inStream_b_V_data_0_sel_wr <= ~inStream_b_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_b_V_data_0_state <= 2'd0;
    end else begin
        if ((((inStream_b_V_data_0_state == 2'd2) & (inStream_b_V_data_0_vld_in == 1'b0)) | ((inStream_b_V_data_0_state == 2'd3) & (inStream_b_V_data_0_vld_in == 1'b0) & (inStream_b_V_data_0_ack_out == 1'b1)))) begin
            inStream_b_V_data_0_state <= 2'd2;
        end else if ((((inStream_b_V_data_0_state == 2'd1) & (inStream_b_V_data_0_ack_out == 1'b0)) | ((inStream_b_V_data_0_state == 2'd3) & (inStream_b_V_data_0_ack_out == 1'b0) & (inStream_b_V_data_0_vld_in == 1'b1)))) begin
            inStream_b_V_data_0_state <= 2'd1;
        end else if (((~((inStream_b_V_data_0_vld_in == 1'b0) & (inStream_b_V_data_0_ack_out == 1'b1)) & ~((inStream_b_V_data_0_ack_out == 1'b0) & (inStream_b_V_data_0_vld_in == 1'b1)) & (inStream_b_V_data_0_state == 2'd3)) | ((inStream_b_V_data_0_state == 2'd1) & (inStream_b_V_data_0_ack_out == 1'b1)) | ((inStream_b_V_data_0_state == 2'd2) & (inStream_b_V_data_0_vld_in == 1'b1)))) begin
            inStream_b_V_data_0_state <= 2'd3;
        end else begin
            inStream_b_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_b_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_b_V_dest_V_0_state == 2'd2) & (inStream_b_V_dest_V_0_vld_in == 1'b0)) | ((inStream_b_V_dest_V_0_state == 2'd3) & (inStream_b_V_dest_V_0_vld_in == 1'b0) & (inStream_b_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_b_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_b_V_dest_V_0_state == 2'd1) & (inStream_b_V_dest_V_0_ack_out == 1'b0)) | ((inStream_b_V_dest_V_0_state == 2'd3) & (inStream_b_V_dest_V_0_ack_out == 1'b0) & (inStream_b_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_b_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_b_V_dest_V_0_vld_in == 1'b0) & (inStream_b_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_b_V_dest_V_0_ack_out == 1'b0) & (inStream_b_V_dest_V_0_vld_in == 1'b1)) & (inStream_b_V_dest_V_0_state == 2'd3)) | ((inStream_b_V_dest_V_0_state == 2'd1) & (inStream_b_V_dest_V_0_ack_out == 1'b1)) | ((inStream_b_V_dest_V_0_state == 2'd2) & (inStream_b_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_b_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_b_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_out == 1'b1) & (outStream_V_data_1_vld_out == 1'b1))) begin
            outStream_V_data_1_sel_rd <= ~outStream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_in == 1'b1) & (outStream_V_data_1_vld_in == 1'b1))) begin
            outStream_V_data_1_sel_wr <= ~outStream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd2;
        end else if ((((outStream_V_data_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd1;
        end else if (((~((outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)) & (outStream_V_data_1_state == 2'd3)) | ((outStream_V_data_1_state == 2'd1) & (outStream_V_data_1_ack_out == 1'b1)) | ((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd3;
        end else begin
            outStream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_op_assign_1_reg_208 <= col_idx_reg_835;
    end else if ((~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (icmp_ln14_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_op_assign_1_reg_208 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_op_assign_reg_197 <= row_idx_reg_822;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_op_assign_reg_197 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        input_ch_idx_0_reg_219 <= 4'd0;
    end else if (((outStream_V_data_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        input_ch_idx_0_reg_219 <= input_ch_idx_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln1354_1_reg_814 <= add_ln1354_1_fu_243_p2;
        add_ln1354_reg_809 <= add_ln1354_fu_234_p2;
        input_w_V_read_reg_804 <= input_w_V_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        col_idx_reg_835 <= col_idx_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (icmp_ln14_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln35_2_reg_827 <= icmp_ln35_2_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_data_0_load_A == 1'b1)) begin
        inStream_a_V_data_0_payload_A <= inStream_a_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_data_0_load_B == 1'b1)) begin
        inStream_a_V_data_0_payload_B <= inStream_a_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_dest_V_0_load_A == 1'b1)) begin
        inStream_a_V_dest_V_0_payload_A <= inStream_a_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_dest_V_0_load_B == 1'b1)) begin
        inStream_a_V_dest_V_0_payload_B <= inStream_a_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_id_V_0_load_A == 1'b1)) begin
        inStream_a_V_id_V_0_payload_A <= inStream_a_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_id_V_0_load_B == 1'b1)) begin
        inStream_a_V_id_V_0_payload_B <= inStream_a_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_keep_V_0_load_A == 1'b1)) begin
        inStream_a_V_keep_V_0_payload_A <= inStream_a_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_keep_V_0_load_B == 1'b1)) begin
        inStream_a_V_keep_V_0_payload_B <= inStream_a_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_strb_V_0_load_A == 1'b1)) begin
        inStream_a_V_strb_V_0_payload_A <= inStream_a_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_strb_V_0_load_B == 1'b1)) begin
        inStream_a_V_strb_V_0_payload_B <= inStream_a_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_user_V_0_load_A == 1'b1)) begin
        inStream_a_V_user_V_0_payload_A <= inStream_a_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_a_V_user_V_0_load_B == 1'b1)) begin
        inStream_a_V_user_V_0_payload_B <= inStream_a_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_b_V_data_0_load_A == 1'b1)) begin
        inStream_b_V_data_0_payload_A <= inStream_b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_b_V_data_0_load_B == 1'b1)) begin
        inStream_b_V_data_0_payload_B <= inStream_b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        input_ch_idx_reg_848 <= input_ch_idx_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_h_V_read_reg_798 <= input_h_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_w_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_w_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (input_w_V_0_vld_reg == 1'b1)))) begin
        input_w_V_0_data_reg <= input_w_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        or_ln35_reg_840 <= or_ln35_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_A == 1'b1)) begin
        outStream_V_data_1_payload_A <= tmp_data_2_fu_785_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_B == 1'b1)) begin
        outStream_V_data_1_payload_B <= tmp_data_2_fu_785_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= inStream_a_V_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= inStream_a_V_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= inStream_a_V_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= inStream_a_V_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= inStream_a_V_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= inStream_a_V_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= tmp_last_V_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= tmp_last_V_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= inStream_a_V_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= inStream_a_V_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= inStream_a_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= inStream_a_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        row_idx_reg_822 <= row_idx_fu_254_p2;
    end
end

always @ (*) begin
    if ((~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (icmp_ln14_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (icmp_ln14_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_a_TDATA_blk_n = inStream_a_V_data_0_state[1'd0];
    end else begin
        inStream_a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_a_V_data_0_ack_out = 1'b1;
    end else begin
        inStream_a_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_a_V_data_0_sel == 1'b1)) begin
        inStream_a_V_data_0_data_out = inStream_a_V_data_0_payload_B;
    end else begin
        inStream_a_V_data_0_data_out = inStream_a_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_a_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_a_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_a_V_dest_V_0_sel == 1'b1)) begin
        inStream_a_V_dest_V_0_data_out = inStream_a_V_dest_V_0_payload_B;
    end else begin
        inStream_a_V_dest_V_0_data_out = inStream_a_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_a_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_a_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_a_V_id_V_0_sel == 1'b1)) begin
        inStream_a_V_id_V_0_data_out = inStream_a_V_id_V_0_payload_B;
    end else begin
        inStream_a_V_id_V_0_data_out = inStream_a_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_a_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_a_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_a_V_keep_V_0_sel == 1'b1)) begin
        inStream_a_V_keep_V_0_data_out = inStream_a_V_keep_V_0_payload_B;
    end else begin
        inStream_a_V_keep_V_0_data_out = inStream_a_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_a_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_a_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_a_V_strb_V_0_sel == 1'b1)) begin
        inStream_a_V_strb_V_0_data_out = inStream_a_V_strb_V_0_payload_B;
    end else begin
        inStream_a_V_strb_V_0_data_out = inStream_a_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_a_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_a_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_a_V_user_V_0_sel == 1'b1)) begin
        inStream_a_V_user_V_0_data_out = inStream_a_V_user_V_0_payload_B;
    end else begin
        inStream_a_V_user_V_0_data_out = inStream_a_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_b_TDATA_blk_n = inStream_b_V_data_0_state[1'd0];
    end else begin
        inStream_b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_b_V_data_0_ack_out = 1'b1;
    end else begin
        inStream_b_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_b_V_data_0_sel == 1'b1)) begin
        inStream_b_V_data_0_data_out = inStream_b_V_data_0_payload_B;
    end else begin
        inStream_b_V_data_0_data_out = inStream_b_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        inStream_b_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_b_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (icmp_ln14_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        input_w_V_0_ack_out = 1'b1;
    end else begin
        input_w_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        outStream_TDATA_blk_n = outStream_V_data_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_1_sel == 1'b1)) begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_B;
    end else begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_V_data_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (icmp_ln14_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (icmp_ln14_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0))) & (icmp_ln18_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((outStream_V_data_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1354_1_fu_243_p2 = ($signed(zext_ln1354_1_fu_240_p1) + $signed(7'd127));

assign add_ln1354_fu_234_p2 = ($signed(zext_ln1354_fu_230_p1) + $signed(7'd127));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state3 = ((outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | (outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = (((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_b_V_data_0_vld_out == 1'b0)) | ((icmp_ln18_fu_294_p2 == 1'd0) & (inStream_a_V_data_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln18_fu_294_p2 == 1'd0) & (outStream_V_data_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_idx_fu_274_p2 = (i_op_assign_1_reg_208 + 6'd1);

assign icmp_ln14_fu_249_p2 = ((i_op_assign_reg_197 == input_h_V_read_reg_798) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_269_p2 = ((i_op_assign_1_reg_208 == input_w_V_read_reg_804) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_294_p2 = ((input_ch_idx_0_reg_219 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_284_p2 = ((zext_ln18_fu_280_p1 != add_ln1354_reg_809) ? 1'b1 : 1'b0);

assign icmp_ln35_2_fu_264_p2 = ((zext_ln1598_fu_260_p1 != add_ln1354_1_reg_814) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_767_p2 = ((input_ch_idx_0_reg_219 != 4'd7) ? 1'b1 : 1'b0);

assign inStream_a_TREADY = inStream_a_V_dest_V_0_state[1'd1];

assign inStream_a_V_data_0_ack_in = inStream_a_V_data_0_state[1'd1];

assign inStream_a_V_data_0_load_A = (inStream_a_V_data_0_state_cmp_full & ~inStream_a_V_data_0_sel_wr);

assign inStream_a_V_data_0_load_B = (inStream_a_V_data_0_state_cmp_full & inStream_a_V_data_0_sel_wr);

assign inStream_a_V_data_0_sel = inStream_a_V_data_0_sel_rd;

assign inStream_a_V_data_0_state_cmp_full = ((inStream_a_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_a_V_data_0_vld_in = inStream_a_TVALID;

assign inStream_a_V_data_0_vld_out = inStream_a_V_data_0_state[1'd0];

assign inStream_a_V_dest_V_0_ack_in = inStream_a_V_dest_V_0_state[1'd1];

assign inStream_a_V_dest_V_0_load_A = (inStream_a_V_dest_V_0_state_cmp_full & ~inStream_a_V_dest_V_0_sel_wr);

assign inStream_a_V_dest_V_0_load_B = (inStream_a_V_dest_V_0_state_cmp_full & inStream_a_V_dest_V_0_sel_wr);

assign inStream_a_V_dest_V_0_sel = inStream_a_V_dest_V_0_sel_rd;

assign inStream_a_V_dest_V_0_state_cmp_full = ((inStream_a_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_a_V_dest_V_0_vld_in = inStream_a_TVALID;

assign inStream_a_V_dest_V_0_vld_out = inStream_a_V_dest_V_0_state[1'd0];

assign inStream_a_V_id_V_0_ack_in = inStream_a_V_id_V_0_state[1'd1];

assign inStream_a_V_id_V_0_load_A = (inStream_a_V_id_V_0_state_cmp_full & ~inStream_a_V_id_V_0_sel_wr);

assign inStream_a_V_id_V_0_load_B = (inStream_a_V_id_V_0_state_cmp_full & inStream_a_V_id_V_0_sel_wr);

assign inStream_a_V_id_V_0_sel = inStream_a_V_id_V_0_sel_rd;

assign inStream_a_V_id_V_0_state_cmp_full = ((inStream_a_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_a_V_id_V_0_vld_in = inStream_a_TVALID;

assign inStream_a_V_id_V_0_vld_out = inStream_a_V_id_V_0_state[1'd0];

assign inStream_a_V_keep_V_0_ack_in = inStream_a_V_keep_V_0_state[1'd1];

assign inStream_a_V_keep_V_0_load_A = (inStream_a_V_keep_V_0_state_cmp_full & ~inStream_a_V_keep_V_0_sel_wr);

assign inStream_a_V_keep_V_0_load_B = (inStream_a_V_keep_V_0_state_cmp_full & inStream_a_V_keep_V_0_sel_wr);

assign inStream_a_V_keep_V_0_sel = inStream_a_V_keep_V_0_sel_rd;

assign inStream_a_V_keep_V_0_state_cmp_full = ((inStream_a_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_a_V_keep_V_0_vld_in = inStream_a_TVALID;

assign inStream_a_V_keep_V_0_vld_out = inStream_a_V_keep_V_0_state[1'd0];

assign inStream_a_V_strb_V_0_ack_in = inStream_a_V_strb_V_0_state[1'd1];

assign inStream_a_V_strb_V_0_load_A = (inStream_a_V_strb_V_0_state_cmp_full & ~inStream_a_V_strb_V_0_sel_wr);

assign inStream_a_V_strb_V_0_load_B = (inStream_a_V_strb_V_0_state_cmp_full & inStream_a_V_strb_V_0_sel_wr);

assign inStream_a_V_strb_V_0_sel = inStream_a_V_strb_V_0_sel_rd;

assign inStream_a_V_strb_V_0_state_cmp_full = ((inStream_a_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_a_V_strb_V_0_vld_in = inStream_a_TVALID;

assign inStream_a_V_strb_V_0_vld_out = inStream_a_V_strb_V_0_state[1'd0];

assign inStream_a_V_user_V_0_ack_in = inStream_a_V_user_V_0_state[1'd1];

assign inStream_a_V_user_V_0_load_A = (inStream_a_V_user_V_0_state_cmp_full & ~inStream_a_V_user_V_0_sel_wr);

assign inStream_a_V_user_V_0_load_B = (inStream_a_V_user_V_0_state_cmp_full & inStream_a_V_user_V_0_sel_wr);

assign inStream_a_V_user_V_0_sel = inStream_a_V_user_V_0_sel_rd;

assign inStream_a_V_user_V_0_state_cmp_full = ((inStream_a_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_a_V_user_V_0_vld_in = inStream_a_TVALID;

assign inStream_a_V_user_V_0_vld_out = inStream_a_V_user_V_0_state[1'd0];

assign inStream_b_TREADY = inStream_b_V_dest_V_0_state[1'd1];

assign inStream_b_V_data_0_ack_in = inStream_b_V_data_0_state[1'd1];

assign inStream_b_V_data_0_load_A = (inStream_b_V_data_0_state_cmp_full & ~inStream_b_V_data_0_sel_wr);

assign inStream_b_V_data_0_load_B = (inStream_b_V_data_0_state_cmp_full & inStream_b_V_data_0_sel_wr);

assign inStream_b_V_data_0_sel = inStream_b_V_data_0_sel_rd;

assign inStream_b_V_data_0_state_cmp_full = ((inStream_b_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_b_V_data_0_vld_in = inStream_b_TVALID;

assign inStream_b_V_data_0_vld_out = inStream_b_V_data_0_state[1'd0];

assign inStream_b_V_dest_V_0_vld_in = inStream_b_TVALID;

assign input_ch_idx_fu_300_p2 = (input_ch_idx_0_reg_219 + 4'd1);

assign lhs_V_1_fu_497_p1 = p_Val2_4_fu_339_p4;

assign lhs_V_2_fu_587_p1 = p_Val2_8_fu_349_p4;

assign lhs_V_3_fu_677_p1 = p_Val2_13_fu_359_p4;

assign lhs_V_fu_407_p1 = p_Val2_s_fu_335_p1;

assign or_ln340_1_fu_557_p2 = (xor_ln340_1_fu_551_p2 | p_Result_3_fu_525_p3);

assign or_ln340_2_fu_647_p2 = (xor_ln340_2_fu_641_p2 | p_Result_5_fu_615_p3);

assign or_ln340_3_fu_737_p2 = (xor_ln340_3_fu_731_p2 | p_Result_7_fu_705_p3);

assign or_ln340_fu_467_p2 = (xor_ln340_fu_461_p2 | p_Result_1_fu_435_p3);

assign or_ln35_1_fu_773_p2 = (or_ln35_reg_840 | icmp_ln35_fu_767_p2);

assign or_ln35_fu_289_p2 = (icmp_ln35_2_reg_827 | icmp_ln35_1_fu_284_p2);

assign outStream_TDATA = outStream_V_data_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_1_ack_in = outStream_V_data_1_state[1'd1];

assign outStream_V_data_1_ack_out = outStream_TREADY;

assign outStream_V_data_1_load_A = (outStream_V_data_1_state_cmp_full & ~outStream_V_data_1_sel_wr);

assign outStream_V_data_1_load_B = (outStream_V_data_1_state_cmp_full & outStream_V_data_1_sel_wr);

assign outStream_V_data_1_sel = outStream_V_data_1_sel_rd;

assign outStream_V_data_1_state_cmp_full = ((outStream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_1_vld_out = outStream_V_data_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign p_Result_1_fu_435_p3 = p_Val2_6_fu_429_p2[32'd15];

assign p_Result_2_fu_511_p3 = ret_V_1_fu_505_p2[32'd16];

assign p_Result_3_fu_525_p3 = p_Val2_10_fu_519_p2[32'd15];

assign p_Result_4_fu_601_p3 = ret_V_2_fu_595_p2[32'd16];

assign p_Result_5_fu_615_p3 = p_Val2_12_fu_609_p2[32'd15];

assign p_Result_6_fu_691_p3 = ret_V_3_fu_685_p2[32'd16];

assign p_Result_7_fu_705_p3 = p_Val2_15_fu_699_p2[32'd15];

assign p_Result_s_fu_421_p3 = ret_V_fu_415_p2[32'd16];

assign p_Val2_10_fu_519_p2 = ($signed(p_Val2_5_fu_377_p4) + $signed(p_Val2_4_fu_339_p4));

assign p_Val2_12_fu_609_p2 = ($signed(p_Val2_9_fu_387_p4) + $signed(p_Val2_8_fu_349_p4));

assign p_Val2_13_fu_359_p4 = {{inStream_a_V_data_0_data_out[63:48]}};

assign p_Val2_15_fu_699_p2 = ($signed(p_Val2_2_fu_397_p4) + $signed(p_Val2_13_fu_359_p4));

assign p_Val2_1_fu_373_p1 = inStream_b_V_data_0_data_out[15:0];

assign p_Val2_2_fu_397_p4 = {{inStream_b_V_data_0_data_out[63:48]}};

assign p_Val2_4_fu_339_p4 = {{inStream_a_V_data_0_data_out[31:16]}};

assign p_Val2_5_fu_377_p4 = {{inStream_b_V_data_0_data_out[31:16]}};

assign p_Val2_6_fu_429_p2 = ($signed(p_Val2_1_fu_373_p1) + $signed(p_Val2_s_fu_335_p1));

assign p_Val2_8_fu_349_p4 = {{inStream_a_V_data_0_data_out[47:32]}};

assign p_Val2_9_fu_387_p4 = {{inStream_b_V_data_0_data_out[47:32]}};

assign p_Val2_s_fu_335_p1 = inStream_a_V_data_0_data_out[15:0];

assign ret_V_1_fu_505_p2 = ($signed(lhs_V_1_fu_497_p1) + $signed(rhs_V_1_fu_501_p1));

assign ret_V_2_fu_595_p2 = ($signed(lhs_V_2_fu_587_p1) + $signed(rhs_V_2_fu_591_p1));

assign ret_V_3_fu_685_p2 = ($signed(lhs_V_3_fu_677_p1) + $signed(rhs_V_3_fu_681_p1));

assign ret_V_fu_415_p2 = ($signed(lhs_V_fu_407_p1) + $signed(rhs_V_fu_411_p1));

assign rhs_V_1_fu_501_p1 = p_Val2_5_fu_377_p4;

assign rhs_V_2_fu_591_p1 = p_Val2_9_fu_387_p4;

assign rhs_V_3_fu_681_p1 = p_Val2_2_fu_397_p4;

assign rhs_V_fu_411_p1 = p_Val2_1_fu_373_p1;

assign row_idx_fu_254_p2 = (i_op_assign_reg_197 + 6'd1);

assign select_ln340_1_fu_563_p3 = ((xor_ln340_5_fu_545_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_10_fu_519_p2);

assign select_ln340_2_fu_653_p3 = ((xor_ln340_6_fu_635_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_12_fu_609_p2);

assign select_ln340_3_fu_743_p3 = ((xor_ln340_7_fu_725_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_15_fu_699_p2);

assign select_ln340_fu_473_p3 = ((xor_ln340_4_fu_455_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_6_fu_429_p2);

assign select_ln388_1_fu_571_p3 = ((underflow_1_fu_539_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_10_fu_519_p2);

assign select_ln388_2_fu_661_p3 = ((underflow_2_fu_629_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_12_fu_609_p2);

assign select_ln388_3_fu_751_p3 = ((underflow_3_fu_719_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_15_fu_699_p2);

assign select_ln388_fu_481_p3 = ((underflow_fu_449_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_6_fu_429_p2);

assign tmp_data_2_fu_785_p5 = {{{{tmp_data_sub_data_3_s_fu_759_p3}, {tmp_data_sub_data_2_s_fu_669_p3}}, {tmp_data_sub_data_1_s_fu_579_p3}}, {tmp_data_sub_data_0_s_fu_489_p3}};

assign tmp_data_sub_data_0_s_fu_489_p3 = ((or_ln340_fu_467_p2[0:0] === 1'b1) ? select_ln340_fu_473_p3 : select_ln388_fu_481_p3);

assign tmp_data_sub_data_1_s_fu_579_p3 = ((or_ln340_1_fu_557_p2[0:0] === 1'b1) ? select_ln340_1_fu_563_p3 : select_ln388_1_fu_571_p3);

assign tmp_data_sub_data_2_s_fu_669_p3 = ((or_ln340_2_fu_647_p2[0:0] === 1'b1) ? select_ln340_2_fu_653_p3 : select_ln388_2_fu_661_p3);

assign tmp_data_sub_data_3_s_fu_759_p3 = ((or_ln340_3_fu_737_p2[0:0] === 1'b1) ? select_ln340_3_fu_743_p3 : select_ln388_3_fu_751_p3);

assign tmp_last_V_fu_778_p2 = (or_ln35_1_fu_773_p2 ^ 1'd1);

assign underflow_1_fu_539_p2 = (xor_ln786_1_fu_533_p2 & p_Result_2_fu_511_p3);

assign underflow_2_fu_629_p2 = (xor_ln786_2_fu_623_p2 & p_Result_4_fu_601_p3);

assign underflow_3_fu_719_p2 = (xor_ln786_3_fu_713_p2 & p_Result_6_fu_691_p3);

assign underflow_fu_449_p2 = (xor_ln786_fu_443_p2 & p_Result_s_fu_421_p3);

assign xor_ln340_1_fu_551_p2 = (p_Result_2_fu_511_p3 ^ 1'd1);

assign xor_ln340_2_fu_641_p2 = (p_Result_4_fu_601_p3 ^ 1'd1);

assign xor_ln340_3_fu_731_p2 = (p_Result_6_fu_691_p3 ^ 1'd1);

assign xor_ln340_4_fu_455_p2 = (p_Result_s_fu_421_p3 ^ p_Result_1_fu_435_p3);

assign xor_ln340_5_fu_545_p2 = (p_Result_3_fu_525_p3 ^ p_Result_2_fu_511_p3);

assign xor_ln340_6_fu_635_p2 = (p_Result_5_fu_615_p3 ^ p_Result_4_fu_601_p3);

assign xor_ln340_7_fu_725_p2 = (p_Result_7_fu_705_p3 ^ p_Result_6_fu_691_p3);

assign xor_ln340_fu_461_p2 = (p_Result_s_fu_421_p3 ^ 1'd1);

assign xor_ln786_1_fu_533_p2 = (p_Result_3_fu_525_p3 ^ 1'd1);

assign xor_ln786_2_fu_623_p2 = (p_Result_5_fu_615_p3 ^ 1'd1);

assign xor_ln786_3_fu_713_p2 = (p_Result_7_fu_705_p3 ^ 1'd1);

assign xor_ln786_fu_443_p2 = (p_Result_1_fu_435_p3 ^ 1'd1);

assign zext_ln1354_1_fu_240_p1 = input_h_V_read_reg_798;

assign zext_ln1354_fu_230_p1 = input_w_V_0_data_reg;

assign zext_ln1598_fu_260_p1 = i_op_assign_reg_197;

assign zext_ln18_fu_280_p1 = i_op_assign_1_reg_208;

endmodule //yolo_acc_top
