-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_max_pool_top is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of yolo_max_pool_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yolo_max_pool_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.118500,HLS_SYN_LAT=1384491,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=1,HLS_SYN_FF=1947,HLS_SYN_LUT=3308,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_1A2 : STD_LOGIC_VECTOR (11 downto 0) := "000110100010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv13_1A2 : STD_LOGIC_VECTOR (12 downto 0) := "0000110100010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_vld_in : STD_LOGIC;
    signal inStream_V_data_0_vld_out : STD_LOGIC;
    signal inStream_V_data_0_ack_in : STD_LOGIC;
    signal inStream_V_data_0_ack_out : STD_LOGIC;
    signal inStream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_0_sel : STD_LOGIC;
    signal inStream_V_data_0_load_A : STD_LOGIC;
    signal inStream_V_data_0_load_B : STD_LOGIC;
    signal inStream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_vld_in : STD_LOGIC;
    signal outStream_V_data_1_vld_out : STD_LOGIC;
    signal outStream_V_data_1_ack_in : STD_LOGIC;
    signal outStream_V_data_1_ack_out : STD_LOGIC;
    signal outStream_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_1_sel : STD_LOGIC;
    signal outStream_V_data_1_load_A : STD_LOGIC;
    signal outStream_V_data_1_load_B : STD_LOGIC;
    signal outStream_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal output_h_V : STD_LOGIC_VECTOR (8 downto 0);
    signal output_w_V : STD_LOGIC_VECTOR (8 downto 0);
    signal input_h_V : STD_LOGIC_VECTOR (8 downto 0);
    signal input_w_V : STD_LOGIC_VECTOR (8 downto 0);
    signal input_fold_ch_V : STD_LOGIC_VECTOR (3 downto 0);
    signal stride_V : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln49_reg_2356 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_2356_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_33_reg_2583 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TDATA_blk_n : STD_LOGIC;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal select_ln209_35_reg_2587 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_35_reg_2587_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten296_reg_618 : STD_LOGIC_VECTOR (25 downto 0);
    signal t_V_reg_630 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten174_reg_642 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten77_reg_654 : STD_LOGIC_VECTOR (14 downto 0);
    signal t_V_2_reg_666 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_678 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_4_reg_690 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_1_reg_702 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_V_3_reg_713 : STD_LOGIC_VECTOR (1 downto 0);
    signal stride_V_read_reg_2129 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_fold_ch_V_read_reg_2137 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_w_V_read_reg_2145 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_h_V_read_reg_2153 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_w_V_read_reg_2160 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_h_V_read_reg_2166 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_fu_800_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln627_fu_806_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln20_fu_818_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln627_1_fu_824_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln21_fu_836_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln627_2_fu_842_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln22_fu_854_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln627_3_fu_860_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln209_2_fu_878_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln209_2_reg_2254 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln22_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln209_3_fu_891_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln209_3_reg_2260 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln209_4_fu_903_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln209_4_reg_2267 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln209_2_fu_909_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln209_2_reg_2273 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln1354_fu_915_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1354_reg_2281 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_924_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_reg_2287 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1354_2_fu_933_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1354_2_reg_2293 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_1_fu_942_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_1_reg_2299 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln209_5_fu_2123_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln209_5_reg_2304 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln99_2_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_2_reg_2309 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_2_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_2_reg_2314 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_2320 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_2326 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_2333 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_2339 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln209_fu_990_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln209_reg_2344 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln209_1_fu_1000_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln209_1_reg_2350 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln49_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_row_V_fu_1010_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_row_V_reg_2360 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln52_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_2365 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln209_6_fu_1025_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln209_6_reg_2383 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_2_fu_1035_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_2_reg_2390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_2395 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_1_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_1_reg_2400 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_10_fu_1058_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_10_reg_2405 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_idx_V_fu_1107_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_idx_V_reg_2420 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state9_pp0_stage1_iter0 : BOOLEAN;
    signal ap_predicate_op299_read_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_count_V_1_fu_1130_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_count_V_1_reg_2425 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln99_1_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln99_1_reg_2430 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1353_fu_1171_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_reg_2435 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_fu_1177_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln49_reg_2440 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln209_fu_1183_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln209_reg_2445 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln49_fu_1252_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln49_reg_2450 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_stride_V_fu_1258_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_stride_V_reg_2455 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln209_1_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln209_1_reg_2460 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_12_fu_1296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_12_reg_2468 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_13_fu_1308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_13_reg_2474 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_14_fu_1320_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_14_reg_2480 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_17_fu_1338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_17_reg_2486 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_22_fu_1351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_22_reg_2491 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_23_fu_1373_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln209_23_reg_2501 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln209_7_fu_1385_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln209_7_reg_2506 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_25_fu_1395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_25_reg_2515 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_31_fu_1403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_31_reg_2520 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_fu_1410_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln55_reg_2530 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_stride_V_fu_1418_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_stride_V_reg_2535 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln209_32_fu_1436_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln209_32_reg_2542 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln203_fu_1448_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln203_reg_2547 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln203_reg_2547_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal input_ch_idx_V_fu_1454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_ch_idx_V_reg_2558 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln58_1_fu_1466_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_1_reg_2563 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln55_1_fu_1480_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln55_1_reg_2568 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln52_1_fu_1494_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln52_1_reg_2573 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln52_fu_1534_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln52_reg_2578 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln209_33_fu_1681_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_35_fu_1715_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_35_reg_2587_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_35_reg_2587_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_36_fu_1726_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_36_reg_2591 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_36_reg_2591_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_37_fu_1739_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln209_37_reg_2597 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln209_37_reg_2597_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln58_fu_1746_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln58_reg_2606 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln203_fu_1756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_reg_2611 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buff_group_0_va_5_reg_2619 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_5_reg_2624 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_5_reg_2629 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_5_reg_2634 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln879_1_fu_1777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2639 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2639_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2639_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2639_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buff_group_0_va_6_reg_2654 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_7_reg_2659 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_7_reg_2659_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_6_reg_2674 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_7_reg_2679 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_7_reg_2679_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_6_reg_2694 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_7_reg_2699 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_7_reg_2699_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_6_reg_2714 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_7_reg_2719 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_7_reg_2719_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_keep_V_load_reg_2724 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_load_reg_2724_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_load_reg_2729 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_load_reg_2729_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_load_reg_2734 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_load_reg_2734_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_load_reg_2739 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_load_reg_2739_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_load_reg_2744 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_load_reg_2744_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln162_2_fu_1944_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_2_reg_2749 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_3_fu_1966_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_3_reg_2754 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_4_fu_1988_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_4_reg_2759 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_5_fu_2010_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_5_reg_2764 : STD_LOGIC_VECTOR (12 downto 0);
    signal line_buff_group_0_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_0_val_1_V_0_reg_2769 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal line_buff_group_1_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_1_val_1_V_0_reg_2775 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_2_val_1_V_0_reg_2781 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_3_val_1_V_0_reg_2787 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_0_val_1_V_1_reg_2813 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_1_val_1_V_1_reg_2819 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_2_val_1_V_1_reg_2825 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_3_val_1_V_1_reg_2831 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_0_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_0_va_10_reg_2837 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_10_reg_2843 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_10_reg_2849 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_10_reg_2855 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal line_buff_group_0_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_ce0 : STD_LOGIC;
    signal line_buff_group_0_va_we0 : STD_LOGIC;
    signal line_buff_group_0_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_0_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_ce1 : STD_LOGIC;
    signal line_buff_group_0_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_0_va_1_we0 : STD_LOGIC;
    signal line_buff_group_0_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_0_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_1_ce1 : STD_LOGIC;
    signal line_buff_group_1_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_ce0 : STD_LOGIC;
    signal line_buff_group_1_va_we0 : STD_LOGIC;
    signal line_buff_group_1_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_ce1 : STD_LOGIC;
    signal line_buff_group_1_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_1_va_1_we0 : STD_LOGIC;
    signal line_buff_group_1_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_1_ce1 : STD_LOGIC;
    signal line_buff_group_2_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_ce0 : STD_LOGIC;
    signal line_buff_group_2_va_we0 : STD_LOGIC;
    signal line_buff_group_2_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_ce1 : STD_LOGIC;
    signal line_buff_group_2_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_2_va_1_we0 : STD_LOGIC;
    signal line_buff_group_2_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_1_ce1 : STD_LOGIC;
    signal line_buff_group_3_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_ce0 : STD_LOGIC;
    signal line_buff_group_3_va_we0 : STD_LOGIC;
    signal line_buff_group_3_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_ce1 : STD_LOGIC;
    signal line_buff_group_3_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_3_va_1_we0 : STD_LOGIC;
    signal line_buff_group_3_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_1_ce1 : STD_LOGIC;
    signal call_ln134_write_output_fu_772_ap_start : STD_LOGIC;
    signal call_ln134_write_output_fu_772_ap_done : STD_LOGIC;
    signal call_ln134_write_output_fu_772_ap_idle : STD_LOGIC;
    signal call_ln134_write_output_fu_772_ap_ready : STD_LOGIC;
    signal call_ln134_write_output_fu_772_val_output_0_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln134_write_output_fu_772_val_output_1_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln134_write_output_fu_772_val_output_2_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln134_write_output_fu_772_val_output_3_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TVALID : STD_LOGIC;
    signal call_ln134_write_output_fu_772_outStream_TREADY : STD_LOGIC;
    signal call_ln134_write_output_fu_772_outStream_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal call_ln134_write_output_fu_772_outStream_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ln134_write_output_fu_772_ap_ce : STD_LOGIC;
    signal ap_block_state9_pp0_stage1_iter0_ignore_call69 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1_ignore_call69 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2_ignore_call69 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3_ignore_call69 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter4_ignore_call69 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp446 : BOOLEAN;
    signal phi_ln19_reg_530 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln19_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_541 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_ln20_reg_552 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln20_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul299_reg_563 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_ln21_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln21_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul301_reg_585 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_ln22_reg_596 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul303_reg_607 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_indvar_flatten296_phi_fu_622_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_t_V_phi_fu_634_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten174_phi_fu_646_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_indvar_flatten77_phi_fu_658_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_t_V_2_phi_fu_670_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_682_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_t_V_4_phi_fu_694_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_t_V_1_phi_fu_706_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_t_V_3_phi_fu_717_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_p_016_phi_fu_728_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_016_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_016_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_018_phi_fu_740_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_018_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_018_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_020_phi_fu_752_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_020_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_020_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_0_phi_fu_764_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_input_data_sub_s_fu_1806_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_reg_760 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_reg_760 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln134_write_output_fu_772_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln162_fu_1880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln162_1_fu_1897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln162_2_fu_2015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln162_3_fu_2019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln162_4_fu_2023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln162_5_fu_2027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_keep_V_fu_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_200 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_fu_204 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_fu_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln209_2_fu_878_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln209_2_fu_878_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln209_3_fu_891_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln209_3_fu_891_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln209_4_fu_903_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln209_4_fu_903_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1354_fu_912_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1354_1_fu_921_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1354_2_fu_930_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1354_3_fu_939_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln209_fu_990_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln209_3_fu_986_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln209_1_fu_1000_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln209_6_fu_1025_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln209_14_fu_1021_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln123_3_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln209_fu_1065_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_idx_V_fu_1073_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln209_4_fu_1069_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln209_5_fu_1094_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln209_1_fu_1103_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln895_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_count_V_fu_1124_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln99_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_1_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_1167_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln895_2_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_3_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_1_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_1_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_1_fu_1190_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln209_15_fu_1276_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln209_2_fu_1284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln895_3_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_3_fu_1200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_4_fu_1303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_4_fu_1211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln209_16_fu_1280_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln99_3_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_5_fu_1218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_6_fu_1224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_2_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_7_fu_1235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_8_fu_1242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_9_fu_1247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_11_fu_1268_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln209_3_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln209_4_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_col_V_fu_1357_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln209_7_fu_1385_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln209_17_fu_1381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln123_4_fu_1390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_16_fu_1327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_21_fu_1345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln209_5_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln209_6_fu_1430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln203_fu_1448_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln58_fu_1460_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_fu_1474_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln52_fu_1488_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln209_fu_1501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_15_fu_1505_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln895_4_fu_1545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_1_fu_1550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln214_1_fu_1555_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_5_fu_1568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_3_fu_1572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_18_fu_1511_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln99_2_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_4_fu_1589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln99_3_fu_1600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln209_2_fu_1517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln70_1_fu_1560_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_19_fu_1522_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_1_fu_1613_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_1_fu_1624_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln209_20_fu_1528_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln209_24_fu_1539_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln209_18_fu_1637_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln209_3_fu_1640_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln895_5_fu_1646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_2_fu_1652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln214_2_fu_1657_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_6_fu_1671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_4_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_26_fu_1577_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_27_fu_1583_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_34_fu_1688_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln99_4_fu_1704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_5_fu_1699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln99_5_fu_1709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_28_fu_1606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln70_2_fu_1663_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln209_29_fu_1617_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_2_fu_1722_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_2_fu_1733_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln209_30_fu_1630_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln209_19_fu_1695_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_fu_1751_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln879_fu_1764_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln879_fu_1767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_1772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln209_20_fu_1869_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_fu_1875_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln209_22_fu_1872_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln162_1_fu_1892_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_fu_1927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln209_21_fu_1909_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln178_fu_1933_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln178_fu_1940_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_3_fu_1949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_3_fu_1955_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln178_1_fu_1962_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_6_fu_1971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_6_fu_1977_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln178_2_fu_1984_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_9_fu_1993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_9_fu_1999_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln178_3_fu_2006_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_1_fu_2031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_1_fu_2035_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_2_fu_2041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_4_fu_2054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_4_fu_2058_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_5_fu_2064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_7_fu_2077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_7_fu_2081_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_8_fu_2087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_10_fu_2100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_10_fu_2104_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_11_fu_2110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln209_5_fu_2123_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln209_5_fu_2123_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln203_fu_1448_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln209_2_fu_878_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln209_2_fu_878_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln209_3_fu_891_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln209_3_fu_891_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln209_4_fu_903_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln209_4_fu_903_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln209_5_fu_2123_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln209_5_fu_2123_p10 : STD_LOGIC_VECTOR (25 downto 0);

    component write_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_output_0_V : IN STD_LOGIC_VECTOR (15 downto 0);
        val_output_1_V : IN STD_LOGIC_VECTOR (15 downto 0);
        val_output_2_V : IN STD_LOGIC_VECTOR (15 downto 0);
        val_output_3_V : IN STD_LOGIC_VECTOR (15 downto 0);
        curr_input_keep_V : IN STD_LOGIC_VECTOR (7 downto 0);
        curr_input_strb_V : IN STD_LOGIC_VECTOR (7 downto 0);
        curr_input_user_V : IN STD_LOGIC_VECTOR (1 downto 0);
        curr_input_id_V : IN STD_LOGIC_VECTOR (4 downto 0);
        curr_input_dest_V : IN STD_LOGIC_VECTOR (5 downto 0);
        outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        outStream_TVALID : OUT STD_LOGIC;
        outStream_TREADY : IN STD_LOGIC;
        outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
        last_V : IN STD_LOGIC_VECTOR (0 downto 0);
        outStream_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component yolo_max_pool_top_mul_mul_17ns_9ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component yolo_max_pool_top_line_buff_group_0_va IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yolo_max_pool_top_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        output_h_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_w_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_h_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_w_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_fold_ch_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        stride_V : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    yolo_max_pool_top_CTRL_BUS_s_axi_U : component yolo_max_pool_top_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        output_h_V => output_h_V,
        output_w_V => output_w_V,
        input_h_V => input_h_V,
        input_w_V => input_w_V,
        input_fold_ch_V => input_fold_ch_V,
        stride_V => stride_V);

    line_buff_group_0_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_0_va_address0,
        ce0 => line_buff_group_0_va_ce0,
        we0 => line_buff_group_0_va_we0,
        d0 => line_buff_group_0_va_1_q0,
        q0 => line_buff_group_0_va_q0,
        address1 => line_buff_group_0_va_address1,
        ce1 => line_buff_group_0_va_ce1,
        q1 => line_buff_group_0_va_q1);

    line_buff_group_0_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_0_va_1_address0,
        ce0 => line_buff_group_0_va_1_ce0,
        we0 => line_buff_group_0_va_1_we0,
        d0 => ap_phi_mux_p_0_phi_fu_764_p4,
        q0 => line_buff_group_0_va_1_q0,
        address1 => line_buff_group_0_va_1_address1,
        ce1 => line_buff_group_0_va_1_ce1,
        q1 => line_buff_group_0_va_1_q1);

    line_buff_group_1_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_1_va_address0,
        ce0 => line_buff_group_1_va_ce0,
        we0 => line_buff_group_1_va_we0,
        d0 => line_buff_group_1_va_1_q0,
        q0 => line_buff_group_1_va_q0,
        address1 => line_buff_group_1_va_address1,
        ce1 => line_buff_group_1_va_ce1,
        q1 => line_buff_group_1_va_q1);

    line_buff_group_1_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_1_va_1_address0,
        ce0 => line_buff_group_1_va_1_ce0,
        we0 => line_buff_group_1_va_1_we0,
        d0 => ap_phi_mux_p_020_phi_fu_752_p4,
        q0 => line_buff_group_1_va_1_q0,
        address1 => line_buff_group_1_va_1_address1,
        ce1 => line_buff_group_1_va_1_ce1,
        q1 => line_buff_group_1_va_1_q1);

    line_buff_group_2_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_2_va_address0,
        ce0 => line_buff_group_2_va_ce0,
        we0 => line_buff_group_2_va_we0,
        d0 => line_buff_group_2_va_1_q0,
        q0 => line_buff_group_2_va_q0,
        address1 => line_buff_group_2_va_address1,
        ce1 => line_buff_group_2_va_ce1,
        q1 => line_buff_group_2_va_q1);

    line_buff_group_2_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_2_va_1_address0,
        ce0 => line_buff_group_2_va_1_ce0,
        we0 => line_buff_group_2_va_1_we0,
        d0 => ap_phi_mux_p_018_phi_fu_740_p4,
        q0 => line_buff_group_2_va_1_q0,
        address1 => line_buff_group_2_va_1_address1,
        ce1 => line_buff_group_2_va_1_ce1,
        q1 => line_buff_group_2_va_1_q1);

    line_buff_group_3_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_3_va_address0,
        ce0 => line_buff_group_3_va_ce0,
        we0 => line_buff_group_3_va_we0,
        d0 => line_buff_group_3_va_1_q0,
        q0 => line_buff_group_3_va_q0,
        address1 => line_buff_group_3_va_address1,
        ce1 => line_buff_group_3_va_ce1,
        q1 => line_buff_group_3_va_q1);

    line_buff_group_3_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_3_va_1_address0,
        ce0 => line_buff_group_3_va_1_ce0,
        we0 => line_buff_group_3_va_1_we0,
        d0 => ap_phi_mux_p_016_phi_fu_728_p4,
        q0 => line_buff_group_3_va_1_q0,
        address1 => line_buff_group_3_va_1_address1,
        ce1 => line_buff_group_3_va_1_ce1,
        q1 => line_buff_group_3_va_1_q1);

    call_ln134_write_output_fu_772 : component write_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => call_ln134_write_output_fu_772_ap_start,
        ap_done => call_ln134_write_output_fu_772_ap_done,
        ap_idle => call_ln134_write_output_fu_772_ap_idle,
        ap_ready => call_ln134_write_output_fu_772_ap_ready,
        val_output_0_V => call_ln134_write_output_fu_772_val_output_0_V,
        val_output_1_V => call_ln134_write_output_fu_772_val_output_1_V,
        val_output_2_V => call_ln134_write_output_fu_772_val_output_2_V,
        val_output_3_V => call_ln134_write_output_fu_772_val_output_3_V,
        curr_input_keep_V => tmp_keep_V_load_reg_2724_pp0_iter3_reg,
        curr_input_strb_V => tmp_strb_V_load_reg_2729_pp0_iter3_reg,
        curr_input_user_V => tmp_user_V_load_reg_2734_pp0_iter3_reg,
        curr_input_id_V => tmp_id_V_load_reg_2739_pp0_iter3_reg,
        curr_input_dest_V => tmp_dest_V_load_reg_2744_pp0_iter3_reg,
        outStream_TDATA => call_ln134_write_output_fu_772_outStream_TDATA,
        outStream_TVALID => call_ln134_write_output_fu_772_outStream_TVALID,
        outStream_TREADY => call_ln134_write_output_fu_772_outStream_TREADY,
        outStream_TKEEP => call_ln134_write_output_fu_772_outStream_TKEEP,
        outStream_TSTRB => call_ln134_write_output_fu_772_outStream_TSTRB,
        outStream_TUSER => call_ln134_write_output_fu_772_outStream_TUSER,
        outStream_TLAST => call_ln134_write_output_fu_772_outStream_TLAST,
        outStream_TID => call_ln134_write_output_fu_772_outStream_TID,
        outStream_TDEST => call_ln134_write_output_fu_772_outStream_TDEST,
        last_V => and_ln879_1_reg_2639_pp0_iter4_reg,
        outStream_TDATA_blk_n => call_ln134_write_output_fu_772_outStream_TDATA_blk_n,
        ap_ce => call_ln134_write_output_fu_772_ap_ce);

    yolo_max_pool_top_mul_mul_17ns_9ns_26_1_1_U18 : component yolo_max_pool_top_mul_mul_17ns_9ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 9,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln209_5_fu_2123_p0,
        din1 => mul_ln209_5_fu_2123_p1,
        dout => mul_ln209_5_fu_2123_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ln134_write_output_fu_772_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                call_ln134_write_output_fu_772_ap_start_reg <= ap_const_logic_0;
            else
                if (((select_ln209_35_reg_2587_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    call_ln134_write_output_fu_772_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ln134_write_output_fu_772_ap_ready = ap_const_logic_1)) then 
                    call_ln134_write_output_fu_772_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_0_ack_out = ap_const_logic_1) and (inStream_V_data_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_0_sel_rd <= not(inStream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_0_ack_in = ap_const_logic_1) and (inStream_V_data_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_0_sel_wr <= not(inStream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_0_state = ap_const_lv2_2) and (inStream_V_data_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_0_state = ap_const_lv2_3) and (inStream_V_data_0_vld_in = ap_const_logic_0) and (inStream_V_data_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_0_state = ap_const_lv2_1) and (inStream_V_data_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_0_state = ap_const_lv2_3) and (inStream_V_data_0_ack_out = ap_const_logic_0) and (inStream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_0_vld_in = ap_const_logic_0) and (inStream_V_data_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_0_ack_out = ap_const_logic_0) and (inStream_V_data_0_vld_in = ap_const_logic_1))) and (inStream_V_data_0_state = ap_const_lv2_3)) or ((inStream_V_data_0_state = ap_const_lv2_1) and (inStream_V_data_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_0_state = ap_const_lv2_2) and (inStream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_out = ap_const_logic_1) and (outStream_V_data_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_rd <= not(outStream_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_in = ap_const_logic_1) and (outStream_V_data_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_wr <= not(outStream_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1))) and (outStream_V_data_1_state = ap_const_lv2_3)) or ((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_V_data_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_016_reg_724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (select_ln209_33_fu_1681_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter1_p_016_reg_724 <= ap_const_lv16_8000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_phi_reg_pp0_iter1_p_016_reg_724 <= ap_phi_reg_pp0_iter0_p_016_reg_724;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_018_reg_736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (select_ln209_33_fu_1681_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter1_p_018_reg_736 <= ap_const_lv16_8000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_phi_reg_pp0_iter1_p_018_reg_736 <= ap_phi_reg_pp0_iter0_p_018_reg_736;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_020_reg_748_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (select_ln209_33_fu_1681_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter1_p_020_reg_748 <= ap_const_lv16_8000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_phi_reg_pp0_iter1_p_020_reg_748 <= ap_phi_reg_pp0_iter0_p_020_reg_748;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_0_reg_760_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (select_ln209_33_fu_1681_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter1_p_0_reg_760 <= ap_const_lv16_8000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_phi_reg_pp0_iter1_p_0_reg_760 <= ap_phi_reg_pp0_iter0_p_0_reg_760;
            end if; 
        end if;
    end process;

    indvar_flatten174_reg_642_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten174_reg_642 <= select_ln52_1_reg_2573;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten174_reg_642 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    indvar_flatten296_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten296_reg_618 <= add_ln49_reg_2440;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten296_reg_618 <= ap_const_lv26_0;
            end if; 
        end if;
    end process;

    indvar_flatten77_reg_654_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten77_reg_654 <= select_ln55_1_reg_2568;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten77_reg_654 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_678 <= select_ln58_1_reg_2563;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_678 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_ln19_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_812_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln19_reg_530 <= add_ln19_fu_800_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln19_reg_530 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln20_reg_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_812_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln20_reg_552 <= ap_const_lv3_0;
            elsif (((icmp_ln20_fu_830_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln20_reg_552 <= add_ln20_fu_818_p2;
            end if; 
        end if;
    end process;

    phi_ln21_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln21_reg_574 <= ap_const_lv3_0;
            elsif (((icmp_ln21_fu_848_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln21_reg_574 <= add_ln21_fu_836_p2;
            end if; 
        end if;
    end process;

    phi_ln22_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_848_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln22_reg_596 <= ap_const_lv3_0;
            elsif (((icmp_ln22_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln22_reg_596 <= add_ln22_fu_854_p2;
            end if; 
        end if;
    end process;

    phi_mul299_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_812_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul299_reg_563 <= ap_const_lv12_0;
            elsif (((icmp_ln20_fu_830_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul299_reg_563 <= add_ln627_1_fu_824_p2;
            end if; 
        end if;
    end process;

    phi_mul301_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul301_reg_585 <= ap_const_lv12_0;
            elsif (((icmp_ln21_fu_848_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul301_reg_585 <= add_ln627_2_fu_842_p2;
            end if; 
        end if;
    end process;

    phi_mul303_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_848_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul303_reg_607 <= ap_const_lv12_0;
            elsif (((icmp_ln22_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul303_reg_607 <= add_ln627_3_fu_860_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_812_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_541 <= add_ln627_fu_806_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_541 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                t_V_1_reg_702 <= select_ln52_reg_2578;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_1_reg_702 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    t_V_2_reg_666_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_2_reg_666 <= select_ln55_reg_2530;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_2_reg_666 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_3_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                t_V_3_reg_713 <= select_ln58_reg_2606;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_3_reg_713 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    t_V_4_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_4_reg_690 <= input_ch_idx_V_reg_2558;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_4_reg_690 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    t_V_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_reg_630 <= select_ln49_reg_2450;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_reg_630 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln1353_reg_2435 <= add_ln1353_fu_1171_p2;
                col_idx_V_reg_2420 <= col_idx_V_fu_1107_p2;
                conv_count_V_1_reg_2425 <= conv_count_V_1_fu_1130_p3;
                    mul_ln203_reg_2547_pp0_iter1_reg(12 downto 1) <= mul_ln203_reg_2547(12 downto 1);
                or_ln99_1_reg_2430 <= or_ln99_1_fu_1161_p2;
                tmp_dest_V_load_reg_2744_pp0_iter3_reg <= tmp_dest_V_load_reg_2744;
                tmp_id_V_load_reg_2739_pp0_iter3_reg <= tmp_id_V_load_reg_2739;
                tmp_keep_V_load_reg_2724_pp0_iter3_reg <= tmp_keep_V_load_reg_2724;
                tmp_strb_V_load_reg_2729_pp0_iter3_reg <= tmp_strb_V_load_reg_2729;
                tmp_user_V_load_reg_2734_pp0_iter3_reg <= tmp_user_V_load_reg_2734;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln1354_2_reg_2293 <= add_ln1354_2_fu_933_p2;
                add_ln1354_reg_2281 <= add_ln1354_fu_915_p2;
                icmp_ln123_2_reg_2314 <= icmp_ln123_2_fu_960_p2;
                icmp_ln55_reg_2339 <= icmp_ln55_fu_981_p2;
                icmp_ln58_reg_2333 <= icmp_ln58_fu_976_p2;
                icmp_ln61_reg_2326 <= icmp_ln61_fu_971_p2;
                icmp_ln887_2_reg_2320 <= icmp_ln887_2_fu_966_p2;
                icmp_ln99_2_reg_2309 <= icmp_ln99_2_fu_954_p2;
                mul_ln209_5_reg_2304 <= mul_ln209_5_fu_2123_p2;
                ret_V_1_reg_2299 <= ret_V_1_fu_942_p2;
                ret_V_reg_2287 <= ret_V_fu_924_p2;
                    zext_ln209_2_reg_2273(1 downto 0) <= zext_ln209_2_fu_909_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln209_35_reg_2587_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln162_2_reg_2749 <= add_ln162_2_fu_1944_p2;
                add_ln162_3_reg_2754 <= add_ln162_3_fu_1966_p2;
                add_ln162_4_reg_2759 <= add_ln162_4_fu_1988_p2;
                add_ln162_5_reg_2764 <= add_ln162_5_fu_2010_p2;
                tmp_dest_V_load_reg_2744 <= tmp_dest_V_fu_208;
                tmp_id_V_load_reg_2739 <= tmp_id_V_fu_204;
                tmp_keep_V_load_reg_2724 <= tmp_keep_V_fu_192;
                tmp_strb_V_load_reg_2729 <= tmp_strb_V_fu_196;
                tmp_user_V_load_reg_2734 <= tmp_user_V_fu_200;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln49_reg_2440 <= add_ln49_fu_1177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln209_35_fu_1715_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln879_1_reg_2639 <= and_ln879_1_fu_1777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln879_1_reg_2639_pp0_iter2_reg <= and_ln879_1_reg_2639;
                and_ln879_1_reg_2639_pp0_iter3_reg <= and_ln879_1_reg_2639_pp0_iter2_reg;
                and_ln879_1_reg_2639_pp0_iter4_reg <= and_ln879_1_reg_2639_pp0_iter3_reg;
                icmp_ln49_reg_2356 <= icmp_ln49_fu_1005_p2;
                icmp_ln49_reg_2356_pp0_iter1_reg <= icmp_ln49_reg_2356;
                line_buff_group_0_va_5_reg_2619 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
                line_buff_group_0_va_6_reg_2654 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
                line_buff_group_0_va_7_reg_2659 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
                line_buff_group_0_va_7_reg_2659_pp0_iter3_reg <= line_buff_group_0_va_7_reg_2659;
                line_buff_group_1_va_5_reg_2624 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
                line_buff_group_1_va_6_reg_2674 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
                line_buff_group_1_va_7_reg_2679 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
                line_buff_group_1_va_7_reg_2679_pp0_iter3_reg <= line_buff_group_1_va_7_reg_2679;
                line_buff_group_2_va_5_reg_2629 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
                line_buff_group_2_va_6_reg_2694 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
                line_buff_group_2_va_7_reg_2699 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
                line_buff_group_2_va_7_reg_2699_pp0_iter3_reg <= line_buff_group_2_va_7_reg_2699;
                line_buff_group_3_va_5_reg_2634 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
                line_buff_group_3_va_6_reg_2714 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
                line_buff_group_3_va_7_reg_2719 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
                line_buff_group_3_va_7_reg_2719_pp0_iter3_reg <= line_buff_group_3_va_7_reg_2719;
                mul_ln209_1_reg_2350 <= mul_ln209_1_fu_1000_p2;
                mul_ln209_reg_2344 <= mul_ln209_fu_990_p2;
                select_ln209_35_reg_2587_pp0_iter2_reg <= select_ln209_35_reg_2587;
                select_ln209_35_reg_2587_pp0_iter3_reg <= select_ln209_35_reg_2587_pp0_iter2_reg;
                select_ln209_35_reg_2587_pp0_iter4_reg <= select_ln209_35_reg_2587_pp0_iter3_reg;
                select_ln209_36_reg_2591_pp0_iter2_reg <= select_ln209_36_reg_2591;
                select_ln209_37_reg_2597_pp0_iter2_reg <= select_ln209_37_reg_2597;
                sext_ln203_reg_2611 <= sext_ln203_fu_1756_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                col_stride_V_reg_2535 <= col_stride_V_fu_1418_p2;
                    mul_ln203_reg_2547(12 downto 1) <= mul_ln203_fu_1448_p2(12 downto 1);
                mul_ln209_7_reg_2506 <= mul_ln209_7_fu_1385_p2;
                or_ln209_1_reg_2460 <= or_ln209_1_fu_1264_p2;
                row_stride_V_reg_2455 <= row_stride_V_fu_1258_p2;
                select_ln209_12_reg_2468 <= select_ln209_12_fu_1296_p3;
                select_ln209_13_reg_2474 <= select_ln209_13_fu_1308_p3;
                select_ln209_14_reg_2480 <= select_ln209_14_fu_1320_p3;
                select_ln209_17_reg_2486 <= select_ln209_17_fu_1338_p3;
                select_ln209_22_reg_2491 <= select_ln209_22_fu_1351_p3;
                select_ln209_23_reg_2501 <= select_ln209_23_fu_1373_p3;
                select_ln209_25_reg_2515 <= select_ln209_25_fu_1395_p3;
                select_ln209_31_reg_2520 <= select_ln209_31_fu_1403_p3;
                select_ln209_32_reg_2542 <= select_ln209_32_fu_1436_p3;
                select_ln209_reg_2445 <= select_ln209_fu_1183_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_1005_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln52_reg_2365 <= icmp_ln52_fu_1016_p2;
                icmp_ln58_1_reg_2400 <= icmp_ln58_1_fu_1048_p2;
                icmp_ln61_1_reg_2395 <= icmp_ln61_1_fu_1043_p2;
                mul_ln209_6_reg_2383 <= mul_ln209_6_fu_1025_p2;
                out_row_V_reg_2360 <= out_row_V_fu_1010_p2;
                select_ln209_10_reg_2405 <= select_ln209_10_fu_1058_p3;
                select_ln209_2_reg_2390 <= select_ln209_2_fu_1035_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_0_load_A = ap_const_logic_1)) then
                inStream_V_data_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_0_load_B = ap_const_logic_1)) then
                inStream_V_data_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_ch_idx_V_reg_2558 <= input_ch_idx_V_fu_1454_p2;
                select_ln49_reg_2450 <= select_ln49_fu_1252_p3;
                select_ln52_1_reg_2573 <= select_ln52_1_fu_1494_p3;
                select_ln55_1_reg_2568 <= select_ln55_1_fu_1480_p3;
                select_ln55_reg_2530 <= select_ln55_fu_1410_p3;
                select_ln58_1_reg_2563 <= select_ln58_1_fu_1466_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_fold_ch_V_read_reg_2137 <= input_fold_ch_V;
                input_h_V_read_reg_2153 <= input_h_V;
                input_w_V_read_reg_2145 <= input_w_V;
                output_h_V_read_reg_2166 <= output_h_V;
                output_w_V_read_reg_2160 <= output_w_V;
                stride_V_read_reg_2129 <= stride_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln209_35_reg_2587_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                line_buff_group_0_va_10_reg_2837 <= line_buff_group_0_va_q1;
                line_buff_group_1_va_10_reg_2843 <= line_buff_group_1_va_q1;
                line_buff_group_2_va_10_reg_2849 <= line_buff_group_2_va_q1;
                line_buff_group_3_va_10_reg_2855 <= line_buff_group_3_va_q1;
                window_0_val_1_V_1_reg_2813 <= line_buff_group_0_va_1_q1;
                window_1_val_1_V_1_reg_2819 <= line_buff_group_1_va_1_q1;
                window_2_val_1_V_1_reg_2825 <= line_buff_group_2_va_1_q1;
                window_3_val_1_V_1_reg_2831 <= line_buff_group_3_va_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_866_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln209_2_reg_2254 <= mul_ln209_2_fu_878_p2;
                mul_ln209_3_reg_2260 <= mul_ln209_3_fu_891_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln209_4_reg_2267 <= mul_ln209_4_fu_903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_A = ap_const_logic_1)) then
                outStream_V_data_1_payload_A <= call_ln134_write_output_fu_772_outStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_B = ap_const_logic_1)) then
                outStream_V_data_1_payload_B <= call_ln134_write_output_fu_772_outStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln209_33_reg_2583 <= select_ln209_33_fu_1681_p3;
                select_ln209_35_reg_2587 <= select_ln209_35_fu_1715_p3;
                select_ln209_36_reg_2591 <= select_ln209_36_fu_1726_p3;
                select_ln209_37_reg_2597 <= select_ln209_37_fu_1739_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln52_reg_2578 <= select_ln52_fu_1534_p3;
                select_ln58_reg_2606 <= select_ln58_fu_1746_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln209_33_reg_2583 = ap_const_lv1_1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_dest_V_fu_208 <= inStream_V_dest_V_0_data_out;
                tmp_id_V_fu_204 <= inStream_V_id_V_0_data_out;
                tmp_keep_V_fu_192 <= inStream_V_keep_V_0_data_out;
                tmp_strb_V_fu_196 <= inStream_V_strb_V_0_data_out;
                tmp_user_V_fu_200 <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln209_35_reg_2587_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                window_0_val_1_V_0_reg_2769 <= line_buff_group_0_va_1_q1;
                window_1_val_1_V_0_reg_2775 <= line_buff_group_1_va_1_q1;
                window_2_val_1_V_0_reg_2781 <= line_buff_group_2_va_1_q1;
                window_3_val_1_V_0_reg_2787 <= line_buff_group_3_va_1_q1;
            end if;
        end if;
    end process;
    zext_ln209_2_reg_2273(8 downto 2) <= "0000000";
    mul_ln203_reg_2547(0) <= '0';
    mul_ln203_reg_2547_pp0_iter1_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, ap_enable_reg_pp0_iter4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln22_fu_866_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_subdone, icmp_ln19_fu_812_p2, icmp_ln20_fu_830_p2, icmp_ln21_fu_848_p2, ap_CS_fsm_state18, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln19_fu_812_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln20_fu_830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln21_fu_848_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln22_fu_866_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln49_reg_2356 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln49_reg_2356 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1353_1_fu_1624_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_1613_p1) + unsigned(ap_const_lv10_1));
    add_ln1353_2_fu_1733_p2 <= std_logic_vector(unsigned(zext_ln215_2_fu_1722_p1) + unsigned(ap_const_lv10_1));
    add_ln1353_fu_1171_p2 <= std_logic_vector(unsigned(rhs_V_fu_1167_p1) + unsigned(ap_const_lv10_1));
    add_ln1354_2_fu_933_p2 <= std_logic_vector(unsigned(zext_ln1354_2_fu_930_p1) + unsigned(ap_const_lv10_3FF));
    add_ln1354_fu_915_p2 <= std_logic_vector(unsigned(zext_ln1354_fu_912_p1) + unsigned(ap_const_lv3_7));
    add_ln162_1_fu_1892_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2547_pp0_iter1_reg) + unsigned(zext_ln209_22_fu_1872_p1));
    add_ln162_2_fu_1944_p2 <= std_logic_vector(unsigned(zext_ln178_fu_1940_p1) + unsigned(mul_ln203_reg_2547_pp0_iter1_reg));
    add_ln162_3_fu_1966_p2 <= std_logic_vector(unsigned(zext_ln178_1_fu_1962_p1) + unsigned(mul_ln203_reg_2547_pp0_iter1_reg));
    add_ln162_4_fu_1988_p2 <= std_logic_vector(unsigned(zext_ln178_2_fu_1984_p1) + unsigned(mul_ln203_reg_2547_pp0_iter1_reg));
    add_ln162_5_fu_2010_p2 <= std_logic_vector(unsigned(zext_ln178_3_fu_2006_p1) + unsigned(mul_ln203_reg_2547_pp0_iter1_reg));
    add_ln162_fu_1875_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2547_pp0_iter1_reg) + unsigned(zext_ln209_20_fu_1869_p1));
    add_ln19_fu_800_p2 <= std_logic_vector(unsigned(phi_ln19_reg_530) + unsigned(ap_const_lv3_1));
    add_ln203_fu_1751_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2547) + unsigned(zext_ln209_19_fu_1695_p1));
    add_ln209_2_fu_1284_p2 <= std_logic_vector(unsigned(select_ln209_1_fu_1190_p3) + unsigned(zext_ln209_15_fu_1276_p1));
    add_ln209_3_fu_1640_p2 <= std_logic_vector(unsigned(select_ln209_24_fu_1539_p3) + unsigned(zext_ln209_18_fu_1637_p1));
    add_ln20_fu_818_p2 <= std_logic_vector(unsigned(phi_ln20_reg_552) + unsigned(ap_const_lv3_1));
    add_ln214_1_fu_1555_p2 <= std_logic_vector(unsigned(mul_ln209_7_reg_2506) + unsigned(ap_const_lv9_1FF));
    add_ln214_2_fu_1657_p2 <= std_logic_vector(unsigned(add_ln209_3_fu_1640_p2) + unsigned(ap_const_lv9_1FF));
    add_ln21_fu_836_p2 <= std_logic_vector(unsigned(phi_ln21_reg_574) + unsigned(ap_const_lv3_1));
    add_ln22_fu_854_p2 <= std_logic_vector(unsigned(phi_ln22_reg_596) + unsigned(ap_const_lv3_1));
    add_ln49_fu_1177_p2 <= std_logic_vector(unsigned(indvar_flatten296_reg_618) + unsigned(ap_const_lv26_1));
    add_ln52_fu_1488_p2 <= std_logic_vector(unsigned(indvar_flatten174_reg_642) + unsigned(ap_const_lv17_1));
    add_ln55_fu_1474_p2 <= std_logic_vector(unsigned(indvar_flatten77_reg_654) + unsigned(ap_const_lv15_1));
    add_ln58_fu_1460_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_678) + unsigned(ap_const_lv6_1));
    add_ln627_1_fu_824_p2 <= std_logic_vector(unsigned(phi_mul299_reg_563) + unsigned(ap_const_lv12_1A2));
    add_ln627_2_fu_842_p2 <= std_logic_vector(unsigned(phi_mul301_reg_585) + unsigned(ap_const_lv12_1A2));
    add_ln627_3_fu_860_p2 <= std_logic_vector(unsigned(phi_mul303_reg_607) + unsigned(ap_const_lv12_1A2));
    add_ln627_fu_806_p2 <= std_logic_vector(unsigned(phi_mul_reg_541) + unsigned(ap_const_lv12_1A2));
    and_ln77_1_fu_1230_p2 <= (icmp_ln887_3_fu_1207_p2 and icmp_ln887_2_reg_2320);
    and_ln77_2_fu_1333_p2 <= (icmp_ln887_4_fu_1303_p2 and icmp_ln887_2_reg_2320);
    and_ln77_3_fu_1572_p2 <= (select_ln209_13_reg_2474 and icmp_ln887_5_fu_1568_p2);
    and_ln77_4_fu_1676_p2 <= (select_ln209_13_reg_2474 and icmp_ln887_6_fu_1671_p2);
    and_ln77_fu_1143_p2 <= (icmp_ln887_fu_1084_p2 and icmp_ln887_1_fu_1138_p2);
    and_ln879_1_fu_1777_p2 <= (select_ln209_25_reg_2515 and and_ln879_fu_1772_p2);
    and_ln879_fu_1772_p2 <= (select_ln209_2_reg_2390 and icmp_ln879_fu_1767_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter1, call_ln134_write_output_fu_772_outStream_TDATA_blk_n, ap_enable_reg_pp0_iter4, select_ln209_35_reg_2587_pp0_iter4_reg, ap_predicate_op299_read_state11)
    begin
                ap_block_pp0_stage1_11001 <= (((select_ln209_35_reg_2587_pp0_iter4_reg = ap_const_lv1_0) and (call_ln134_write_output_fu_772_outStream_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp446_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter1, ap_predicate_op299_read_state11)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp446 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter1, call_ln134_write_output_fu_772_outStream_TDATA_blk_n, ap_enable_reg_pp0_iter4, select_ln209_35_reg_2587_pp0_iter4_reg, ap_predicate_op299_read_state11)
    begin
                ap_block_pp0_stage1_subdone <= (((select_ln209_35_reg_2587_pp0_iter4_reg = ap_const_lv1_0) and (call_ln134_write_output_fu_772_outStream_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage1_iter1_assign_proc : process(inStream_V_data_0_vld_out, ap_predicate_op299_read_state11)
    begin
                ap_block_state11_pp0_stage1_iter1 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op299_read_state11 = ap_const_boolean_1));
    end process;


    ap_block_state11_pp0_stage1_iter1_ignore_call69_assign_proc : process(inStream_V_data_0_vld_out, ap_predicate_op299_read_state11)
    begin
                ap_block_state11_pp0_stage1_iter1_ignore_call69 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op299_read_state11 = ap_const_boolean_1));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2_ignore_call69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3_ignore_call69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage1_iter4_assign_proc : process(call_ln134_write_output_fu_772_outStream_TDATA_blk_n, select_ln209_35_reg_2587_pp0_iter4_reg)
    begin
                ap_block_state17_pp0_stage1_iter4 <= ((select_ln209_35_reg_2587_pp0_iter4_reg = ap_const_lv1_0) and (call_ln134_write_output_fu_772_outStream_TDATA_blk_n = ap_const_logic_0));
    end process;

        ap_block_state17_pp0_stage1_iter4_ignore_call69 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state)
    begin
                ap_block_state18 <= ((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0_ignore_call69 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln49_reg_2356)
    begin
        if ((icmp_ln49_reg_2356 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state18)
    begin
        if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten174_phi_fu_646_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, indvar_flatten174_reg_642, ap_CS_fsm_pp0_stage0, select_ln52_1_reg_2573, ap_block_pp0_stage0)
    begin
        if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten174_phi_fu_646_p4 <= select_ln52_1_reg_2573;
        else 
            ap_phi_mux_indvar_flatten174_phi_fu_646_p4 <= indvar_flatten174_reg_642;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten296_phi_fu_622_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, indvar_flatten296_reg_618, ap_CS_fsm_pp0_stage0, add_ln49_reg_2440, ap_block_pp0_stage0)
    begin
        if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten296_phi_fu_622_p4 <= add_ln49_reg_2440;
        else 
            ap_phi_mux_indvar_flatten296_phi_fu_622_p4 <= indvar_flatten296_reg_618;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten77_phi_fu_658_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, indvar_flatten77_reg_654, ap_CS_fsm_pp0_stage0, select_ln55_1_reg_2568, ap_block_pp0_stage0)
    begin
        if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten77_phi_fu_658_p4 <= select_ln55_1_reg_2568;
        else 
            ap_phi_mux_indvar_flatten77_phi_fu_658_p4 <= indvar_flatten77_reg_654;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_682_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, indvar_flatten_reg_678, ap_CS_fsm_pp0_stage0, select_ln58_1_reg_2563, ap_block_pp0_stage0)
    begin
        if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_682_p4 <= select_ln58_1_reg_2563;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_682_p4 <= indvar_flatten_reg_678;
        end if; 
    end process;


    ap_phi_mux_p_016_phi_fu_728_p4_assign_proc : process(inStream_V_data_0_data_out, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln49_reg_2356_pp0_iter1_reg, select_ln209_33_reg_2583, ap_phi_reg_pp0_iter1_p_016_reg_724)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln209_33_reg_2583 = ap_const_lv1_1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_016_phi_fu_728_p4 <= inStream_V_data_0_data_out(63 downto 48);
        else 
            ap_phi_mux_p_016_phi_fu_728_p4 <= ap_phi_reg_pp0_iter1_p_016_reg_724;
        end if; 
    end process;


    ap_phi_mux_p_018_phi_fu_740_p4_assign_proc : process(inStream_V_data_0_data_out, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln49_reg_2356_pp0_iter1_reg, select_ln209_33_reg_2583, ap_phi_reg_pp0_iter1_p_018_reg_736)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln209_33_reg_2583 = ap_const_lv1_1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_018_phi_fu_740_p4 <= inStream_V_data_0_data_out(47 downto 32);
        else 
            ap_phi_mux_p_018_phi_fu_740_p4 <= ap_phi_reg_pp0_iter1_p_018_reg_736;
        end if; 
    end process;


    ap_phi_mux_p_020_phi_fu_752_p4_assign_proc : process(inStream_V_data_0_data_out, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln49_reg_2356_pp0_iter1_reg, select_ln209_33_reg_2583, ap_phi_reg_pp0_iter1_p_020_reg_748)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln209_33_reg_2583 = ap_const_lv1_1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_020_phi_fu_752_p4 <= inStream_V_data_0_data_out(31 downto 16);
        else 
            ap_phi_mux_p_020_phi_fu_752_p4 <= ap_phi_reg_pp0_iter1_p_020_reg_748;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_764_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln49_reg_2356_pp0_iter1_reg, select_ln209_33_reg_2583, curr_input_data_sub_s_fu_1806_p1, ap_phi_reg_pp0_iter1_p_0_reg_760)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln209_33_reg_2583 = ap_const_lv1_1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_0_phi_fu_764_p4 <= curr_input_data_sub_s_fu_1806_p1;
        else 
            ap_phi_mux_p_0_phi_fu_764_p4 <= ap_phi_reg_pp0_iter1_p_0_reg_760;
        end if; 
    end process;


    ap_phi_mux_t_V_1_phi_fu_706_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln49_reg_2356_pp0_iter1_reg, t_V_1_reg_702, select_ln52_reg_2578)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_t_V_1_phi_fu_706_p4 <= select_ln52_reg_2578;
        else 
            ap_phi_mux_t_V_1_phi_fu_706_p4 <= t_V_1_reg_702;
        end if; 
    end process;


    ap_phi_mux_t_V_2_phi_fu_670_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, t_V_2_reg_666, ap_CS_fsm_pp0_stage0, select_ln55_reg_2530, ap_block_pp0_stage0)
    begin
        if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_t_V_2_phi_fu_670_p4 <= select_ln55_reg_2530;
        else 
            ap_phi_mux_t_V_2_phi_fu_670_p4 <= t_V_2_reg_666;
        end if; 
    end process;


    ap_phi_mux_t_V_3_phi_fu_717_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln49_reg_2356_pp0_iter1_reg, t_V_3_reg_713, select_ln58_reg_2606)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_t_V_3_phi_fu_717_p4 <= select_ln58_reg_2606;
        else 
            ap_phi_mux_t_V_3_phi_fu_717_p4 <= t_V_3_reg_713;
        end if; 
    end process;


    ap_phi_mux_t_V_4_phi_fu_694_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, t_V_4_reg_690, ap_CS_fsm_pp0_stage0, input_ch_idx_V_reg_2558, ap_block_pp0_stage0)
    begin
        if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_t_V_4_phi_fu_694_p4 <= input_ch_idx_V_reg_2558;
        else 
            ap_phi_mux_t_V_4_phi_fu_694_p4 <= t_V_4_reg_690;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_634_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln49_reg_2356, t_V_reg_630, ap_CS_fsm_pp0_stage0, select_ln49_reg_2450, ap_block_pp0_stage0)
    begin
        if (((icmp_ln49_reg_2356 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_t_V_phi_fu_634_p4 <= select_ln49_reg_2450;
        else 
            ap_phi_mux_t_V_phi_fu_634_p4 <= t_V_reg_630;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_016_reg_724 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_018_reg_736 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_020_reg_748 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_reg_760 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op299_read_state11_assign_proc : process(icmp_ln49_reg_2356_pp0_iter1_reg, select_ln209_33_reg_2583)
    begin
                ap_predicate_op299_read_state11 <= ((select_ln209_33_reg_2583 = ap_const_lv1_1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state18)
    begin
        if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    call_ln134_write_output_fu_772_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp446)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp446))) then 
            call_ln134_write_output_fu_772_ap_ce <= ap_const_logic_1;
        else 
            call_ln134_write_output_fu_772_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ln134_write_output_fu_772_ap_start <= call_ln134_write_output_fu_772_ap_start_reg;
    call_ln134_write_output_fu_772_outStream_TREADY <= ((outStream_V_dest_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_id_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_last_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_user_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_strb_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_keep_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_data_1_ack_in and ap_CS_fsm_pp0_stage1));
    call_ln134_write_output_fu_772_val_output_0_V <= 
        window_0_val_1_V_1_reg_2813 when (icmp_ln1494_2_fu_2041_p2(0) = '1') else 
        select_ln178_1_fu_2035_p3;
    call_ln134_write_output_fu_772_val_output_1_V <= 
        window_1_val_1_V_1_reg_2819 when (icmp_ln1494_5_fu_2064_p2(0) = '1') else 
        select_ln178_4_fu_2058_p3;
    call_ln134_write_output_fu_772_val_output_2_V <= 
        window_2_val_1_V_1_reg_2825 when (icmp_ln1494_8_fu_2087_p2(0) = '1') else 
        select_ln178_7_fu_2081_p3;
    call_ln134_write_output_fu_772_val_output_3_V <= 
        window_3_val_1_V_1_reg_2831 when (icmp_ln1494_11_fu_2110_p2(0) = '1') else 
        select_ln178_10_fu_2104_p3;
    col_idx_V_fu_1107_p2 <= std_logic_vector(unsigned(zext_ln209_1_fu_1103_p1) + unsigned(mul_ln209_1_reg_2350));
    col_stride_V_fu_1418_p2 <= std_logic_vector(unsigned(select_ln209_23_fu_1373_p3) + unsigned(ap_const_lv2_1));
    conv_count_V_1_fu_1130_p3 <= 
        ap_const_lv9_0 when (or_ln70_fu_1118_p2(0) = '1') else 
        conv_count_V_fu_1124_p2;
    conv_count_V_fu_1124_p2 <= std_logic_vector(unsigned(col_idx_V_fu_1107_p2) + unsigned(ap_const_lv9_1FF));
    curr_input_data_sub_s_fu_1806_p1 <= inStream_V_data_0_data_out(16 - 1 downto 0);
    icmp_ln123_1_fu_1098_p2 <= "1" when (zext_ln209_5_fu_1094_p1 = add_ln1354_2_reg_2293) else "0";
    icmp_ln123_2_fu_960_p2 <= "1" when (add_ln1354_2_fu_933_p2 = ap_const_lv10_0) else "0";
    icmp_ln123_3_fu_1030_p2 <= "1" when (zext_ln209_14_fu_1021_p1 = ret_V_reg_2287) else "0";
    icmp_ln123_4_fu_1390_p2 <= "1" when (zext_ln209_17_fu_1381_p1 = add_ln1354_2_reg_2293) else "0";
    icmp_ln123_fu_995_p2 <= "1" when (zext_ln209_3_fu_986_p1 = ret_V_reg_2287) else "0";
    icmp_ln1494_10_fu_2100_p2 <= "1" when (signed(line_buff_group_3_va_10_reg_2855) < signed(window_3_val_1_V_0_reg_2787)) else "0";
    icmp_ln1494_11_fu_2110_p2 <= "1" when (signed(select_ln178_10_fu_2104_p3) < signed(window_3_val_1_V_1_reg_2831)) else "0";
    icmp_ln1494_1_fu_2031_p2 <= "1" when (signed(line_buff_group_0_va_10_reg_2837) < signed(window_0_val_1_V_0_reg_2769)) else "0";
    icmp_ln1494_2_fu_2041_p2 <= "1" when (signed(select_ln178_1_fu_2035_p3) < signed(window_0_val_1_V_1_reg_2813)) else "0";
    icmp_ln1494_3_fu_1949_p2 <= "1" when (signed(line_buff_group_1_va_q1) > signed(line_buff_group_1_va_q0)) else "0";
    icmp_ln1494_4_fu_2054_p2 <= "1" when (signed(line_buff_group_1_va_10_reg_2843) < signed(window_1_val_1_V_0_reg_2775)) else "0";
    icmp_ln1494_5_fu_2064_p2 <= "1" when (signed(select_ln178_4_fu_2058_p3) < signed(window_1_val_1_V_1_reg_2819)) else "0";
    icmp_ln1494_6_fu_1971_p2 <= "1" when (signed(line_buff_group_2_va_q1) > signed(line_buff_group_2_va_q0)) else "0";
    icmp_ln1494_7_fu_2077_p2 <= "1" when (signed(line_buff_group_2_va_10_reg_2849) < signed(window_2_val_1_V_0_reg_2781)) else "0";
    icmp_ln1494_8_fu_2087_p2 <= "1" when (signed(select_ln178_7_fu_2081_p3) < signed(window_2_val_1_V_1_reg_2825)) else "0";
    icmp_ln1494_9_fu_1993_p2 <= "1" when (signed(line_buff_group_3_va_q1) > signed(line_buff_group_3_va_q0)) else "0";
    icmp_ln1494_fu_1927_p2 <= "1" when (signed(line_buff_group_0_va_q1) > signed(line_buff_group_0_va_q0)) else "0";
    icmp_ln19_fu_812_p2 <= "1" when (phi_ln19_reg_530 = ap_const_lv3_7) else "0";
    icmp_ln20_fu_830_p2 <= "1" when (phi_ln20_reg_552 = ap_const_lv3_7) else "0";
    icmp_ln21_fu_848_p2 <= "1" when (phi_ln21_reg_574 = ap_const_lv3_7) else "0";
    icmp_ln22_fu_866_p2 <= "1" when (phi_ln22_reg_596 = ap_const_lv3_7) else "0";
    icmp_ln49_fu_1005_p2 <= "1" when (ap_phi_mux_indvar_flatten296_phi_fu_622_p4 = mul_ln209_5_reg_2304) else "0";
    icmp_ln52_fu_1016_p2 <= "1" when (ap_phi_mux_indvar_flatten174_phi_fu_646_p4 = mul_ln209_4_reg_2267) else "0";
    icmp_ln55_1_fu_1053_p2 <= "1" when (ap_phi_mux_indvar_flatten77_phi_fu_658_p4 = mul_ln209_3_reg_2260) else "0";
    icmp_ln55_fu_981_p2 <= "1" when (mul_ln209_3_reg_2260 = ap_const_lv15_0) else "0";
    icmp_ln58_1_fu_1048_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_682_p4 = mul_ln209_2_reg_2254) else "0";
    icmp_ln58_fu_976_p2 <= "1" when (mul_ln209_2_reg_2254 = ap_const_lv6_0) else "0";
    icmp_ln61_1_fu_1043_p2 <= "1" when (ap_phi_mux_t_V_4_phi_fu_694_p4 = input_fold_ch_V_read_reg_2137) else "0";
    icmp_ln61_fu_971_p2 <= "1" when (input_fold_ch_V_read_reg_2137 = ap_const_lv4_0) else "0";
    icmp_ln879_fu_1767_p2 <= "1" when (zext_ln879_fu_1764_p1 = ret_V_1_reg_2299) else "0";
    icmp_ln887_1_fu_1138_p2 <= "1" when (unsigned(col_idx_V_fu_1107_p2) < unsigned(input_w_V_read_reg_2145)) else "0";
    icmp_ln887_2_fu_966_p2 <= "0" when (input_w_V_read_reg_2145 = ap_const_lv9_0) else "1";
    icmp_ln887_3_fu_1207_p2 <= "1" when (unsigned(mul_ln209_6_reg_2383) < unsigned(input_h_V_read_reg_2153)) else "0";
    icmp_ln887_4_fu_1303_p2 <= "1" when (unsigned(add_ln209_2_fu_1284_p2) < unsigned(input_h_V_read_reg_2153)) else "0";
    icmp_ln887_5_fu_1568_p2 <= "1" when (unsigned(mul_ln209_7_reg_2506) < unsigned(input_w_V_read_reg_2145)) else "0";
    icmp_ln887_6_fu_1671_p2 <= "1" when (unsigned(add_ln209_3_fu_1640_p2) < unsigned(input_w_V_read_reg_2145)) else "0";
    icmp_ln887_fu_1084_p2 <= "1" when (unsigned(row_idx_V_fu_1073_p2) < unsigned(input_h_V_read_reg_2153)) else "0";
    icmp_ln895_1_fu_1112_p2 <= "1" when (col_idx_V_fu_1107_p2 = ap_const_lv9_0) else "0";
    icmp_ln895_2_fu_1195_p2 <= "1" when (mul_ln209_6_reg_2383 = ap_const_lv9_0) else "0";
    icmp_ln895_3_fu_1290_p2 <= "1" when (add_ln209_2_fu_1284_p2 = ap_const_lv9_0) else "0";
    icmp_ln895_4_fu_1545_p2 <= "1" when (mul_ln209_7_reg_2506 = ap_const_lv9_0) else "0";
    icmp_ln895_5_fu_1646_p2 <= "1" when (add_ln209_3_fu_1640_p2 = ap_const_lv9_0) else "0";
    icmp_ln895_fu_1078_p2 <= "1" when (row_idx_V_fu_1073_p2 = ap_const_lv9_0) else "0";
    icmp_ln99_1_fu_1149_p2 <= "0" when (ap_phi_mux_t_V_3_phi_fu_717_p4 = ap_phi_mux_t_V_1_phi_fu_706_p4) else "1";
    icmp_ln99_2_fu_954_p2 <= "0" when (add_ln1354_fu_915_p2 = ap_const_lv3_0) else "1";
    icmp_ln99_3_fu_1315_p2 <= "0" when (zext_ln209_16_fu_1280_p1 = add_ln1354_reg_2281) else "1";
    icmp_ln99_4_fu_1589_p2 <= "0" when (select_ln52_fu_1534_p3 = ap_const_lv2_0) else "1";
    icmp_ln99_5_fu_1699_p2 <= "0" when (col_stride_V_reg_2535 = select_ln52_fu_1534_p3) else "1";
    icmp_ln99_fu_1089_p2 <= "0" when (zext_ln209_4_fu_1069_p1 = add_ln1354_reg_2281) else "1";

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_0_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln49_reg_2356_pp0_iter1_reg, select_ln209_33_reg_2583)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln209_33_reg_2583 = ap_const_lv1_1) and (icmp_ln49_reg_2356_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_TDATA_blk_n <= inStream_V_data_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_0_ack_in <= inStream_V_data_0_state(1);

    inStream_V_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op299_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            inStream_V_data_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_0_data_out_assign_proc : process(inStream_V_data_0_payload_A, inStream_V_data_0_payload_B, inStream_V_data_0_sel)
    begin
        if ((inStream_V_data_0_sel = ap_const_logic_1)) then 
            inStream_V_data_0_data_out <= inStream_V_data_0_payload_B;
        else 
            inStream_V_data_0_data_out <= inStream_V_data_0_payload_A;
        end if; 
    end process;

    inStream_V_data_0_load_A <= (inStream_V_data_0_state_cmp_full and not(inStream_V_data_0_sel_wr));
    inStream_V_data_0_load_B <= (inStream_V_data_0_state_cmp_full and inStream_V_data_0_sel_wr);
    inStream_V_data_0_sel <= inStream_V_data_0_sel_rd;
    inStream_V_data_0_state_cmp_full <= '0' when (inStream_V_data_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_0_vld_in <= inStream_TVALID;
    inStream_V_data_0_vld_out <= inStream_V_data_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op299_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op299_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            inStream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op299_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op299_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op299_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op299_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    input_ch_idx_V_fu_1454_p2 <= std_logic_vector(unsigned(select_ln209_32_fu_1436_p3) + unsigned(ap_const_lv4_1));

    line_buff_group_0_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1756_p1, line_buff_group_0_va_5_reg_2619, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_0_va_1_address0 <= line_buff_group_0_va_5_reg_2619;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_0_va_1_address0 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
            else 
                line_buff_group_0_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_0_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_0_va_6_reg_2654, line_buff_group_0_va_7_reg_2659_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_0_va_1_address1 <= line_buff_group_0_va_7_reg_2659_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_0_va_1_address1 <= line_buff_group_0_va_6_reg_2654;
            else 
                line_buff_group_0_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_0_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            line_buff_group_0_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_0_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_0_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2611, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_fu_1880_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_0_va_address0 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_0_va_address0 <= sext_ln203_reg_2611(12 - 1 downto 0);
        else 
            line_buff_group_0_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_1_fu_1897_p1, sext_ln162_2_fu_2015_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_0_va_address1 <= sext_ln162_2_fu_2015_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_0_va_address1 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
        else 
            line_buff_group_0_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_0_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_0_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_0_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1756_p1, line_buff_group_1_va_5_reg_2624, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_1_va_1_address0 <= line_buff_group_1_va_5_reg_2624;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_1_va_1_address0 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
            else 
                line_buff_group_1_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_1_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_1_va_6_reg_2674, line_buff_group_1_va_7_reg_2679_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_1_va_1_address1 <= line_buff_group_1_va_7_reg_2679_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_1_va_1_address1 <= line_buff_group_1_va_6_reg_2674;
            else 
                line_buff_group_1_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_1_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            line_buff_group_1_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_1_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_1_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2611, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_fu_1880_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_1_va_address0 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_1_va_address0 <= sext_ln203_reg_2611(12 - 1 downto 0);
        else 
            line_buff_group_1_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_1_fu_1897_p1, sext_ln162_3_fu_2019_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_1_va_address1 <= sext_ln162_3_fu_2019_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_1_va_address1 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
        else 
            line_buff_group_1_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_1_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_1_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_1_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1756_p1, line_buff_group_2_va_5_reg_2629, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_2_va_1_address0 <= line_buff_group_2_va_5_reg_2629;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_2_va_1_address0 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
            else 
                line_buff_group_2_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_2_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_2_va_6_reg_2694, line_buff_group_2_va_7_reg_2699_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_2_va_1_address1 <= line_buff_group_2_va_7_reg_2699_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_2_va_1_address1 <= line_buff_group_2_va_6_reg_2694;
            else 
                line_buff_group_2_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_2_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            line_buff_group_2_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_2_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_2_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2611, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_fu_1880_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_2_va_address0 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_2_va_address0 <= sext_ln203_reg_2611(12 - 1 downto 0);
        else 
            line_buff_group_2_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_1_fu_1897_p1, sext_ln162_4_fu_2023_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_2_va_address1 <= sext_ln162_4_fu_2023_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_2_va_address1 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
        else 
            line_buff_group_2_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_2_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_2_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_2_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1756_p1, line_buff_group_3_va_5_reg_2634, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_3_va_1_address0 <= line_buff_group_3_va_5_reg_2634;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_3_va_1_address0 <= sext_ln203_fu_1756_p1(12 - 1 downto 0);
            else 
                line_buff_group_3_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_3_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_3_va_6_reg_2714, line_buff_group_3_va_7_reg_2719_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_3_va_1_address1 <= line_buff_group_3_va_7_reg_2719_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_3_va_1_address1 <= line_buff_group_3_va_6_reg_2714;
            else 
                line_buff_group_3_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_3_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            line_buff_group_3_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_3_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_3_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2611, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_fu_1880_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_3_va_address0 <= sext_ln162_fu_1880_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_3_va_address0 <= sext_ln203_reg_2611(12 - 1 downto 0);
        else 
            line_buff_group_3_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, sext_ln162_1_fu_1897_p1, sext_ln162_5_fu_2027_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_3_va_address1 <= sext_ln162_5_fu_2027_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_3_va_address1 <= sext_ln162_1_fu_1897_p1(12 - 1 downto 0);
        else 
            line_buff_group_3_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_3_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_buff_group_3_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_group_3_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln203_fu_1448_p0 <= mul_ln203_fu_1448_p00(4 - 1 downto 0);
    mul_ln203_fu_1448_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_32_fu_1436_p3),13));
    mul_ln203_fu_1448_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln203_fu_1448_p0) * unsigned(ap_const_lv13_1A2), 13));
    mul_ln209_1_fu_1000_p0 <= zext_ln209_2_reg_2273(2 - 1 downto 0);
    mul_ln209_1_fu_1000_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln209_1_fu_1000_p0) * signed(ap_phi_mux_t_V_2_phi_fu_670_p4))), 9));
    mul_ln209_2_fu_878_p0 <= mul_ln209_2_fu_878_p00(4 - 1 downto 0);
    mul_ln209_2_fu_878_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_fold_ch_V_read_reg_2137),6));
    mul_ln209_2_fu_878_p1 <= mul_ln209_2_fu_878_p10(2 - 1 downto 0);
    mul_ln209_2_fu_878_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2129),6));
    mul_ln209_2_fu_878_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_2_fu_878_p0) * unsigned(mul_ln209_2_fu_878_p1), 6));
    mul_ln209_3_fu_891_p0 <= mul_ln209_3_fu_891_p00(6 - 1 downto 0);
    mul_ln209_3_fu_891_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_2_fu_878_p2),15));
    mul_ln209_3_fu_891_p1 <= mul_ln209_3_fu_891_p10(9 - 1 downto 0);
    mul_ln209_3_fu_891_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_w_V_read_reg_2160),15));
    mul_ln209_3_fu_891_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_3_fu_891_p0) * unsigned(mul_ln209_3_fu_891_p1), 15));
    mul_ln209_4_fu_903_p0 <= mul_ln209_4_fu_903_p00(15 - 1 downto 0);
    mul_ln209_4_fu_903_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_3_reg_2260),17));
    mul_ln209_4_fu_903_p1 <= mul_ln209_4_fu_903_p10(2 - 1 downto 0);
    mul_ln209_4_fu_903_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2129),17));
    mul_ln209_4_fu_903_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_4_fu_903_p0) * unsigned(mul_ln209_4_fu_903_p1), 17));
    mul_ln209_5_fu_2123_p0 <= mul_ln209_5_fu_2123_p00(17 - 1 downto 0);
    mul_ln209_5_fu_2123_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_4_reg_2267),26));
    mul_ln209_5_fu_2123_p1 <= mul_ln209_5_fu_2123_p10(9 - 1 downto 0);
    mul_ln209_5_fu_2123_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_h_V_read_reg_2166),26));
    mul_ln209_6_fu_1025_p1 <= zext_ln209_2_reg_2273(2 - 1 downto 0);
    mul_ln209_6_fu_1025_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(out_row_V_fu_1010_p2) * signed('0' &mul_ln209_6_fu_1025_p1))), 9));
    mul_ln209_7_fu_1385_p1 <= zext_ln209_2_reg_2273(2 - 1 downto 0);
    mul_ln209_7_fu_1385_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(out_col_V_fu_1357_p2) * signed('0' &mul_ln209_7_fu_1385_p1))), 9));
    mul_ln209_fu_990_p0 <= zext_ln209_2_reg_2273(2 - 1 downto 0);
    mul_ln209_fu_990_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln209_fu_990_p0) * signed(ap_phi_mux_t_V_phi_fu_634_p4))), 9));
    or_ln209_1_fu_1264_p2 <= (select_ln209_10_reg_2405 or icmp_ln52_reg_2365);
    or_ln209_2_fu_1517_p2 <= (select_ln209_10_reg_2405 or or_ln209_fu_1501_p2);
    or_ln209_3_fu_1363_p2 <= (select_ln209_22_fu_1351_p3 or select_ln209_10_reg_2405);
    or_ln209_4_fu_1368_p2 <= (or_ln209_3_fu_1363_p2 or icmp_ln52_reg_2365);
    or_ln209_5_fu_1424_p2 <= (select_ln209_31_fu_1403_p3 or select_ln209_22_fu_1351_p3);
    or_ln209_6_fu_1430_p2 <= (or_ln209_5_fu_1424_p2 or or_ln209_1_fu_1264_p2);
    or_ln209_fu_1501_p2 <= (or_ln99_1_reg_2430 or icmp_ln52_reg_2365);
    or_ln70_1_fu_1550_p2 <= (select_ln209_12_reg_2468 or icmp_ln895_4_fu_1545_p2);
    or_ln70_2_fu_1652_p2 <= (select_ln209_12_reg_2468 or icmp_ln895_5_fu_1646_p2);
    or_ln70_fu_1118_p2 <= (icmp_ln895_fu_1078_p2 or icmp_ln895_1_fu_1112_p2);
    or_ln99_1_fu_1161_p2 <= (or_ln99_fu_1155_p2 or icmp_ln99_1_fu_1149_p2);
    or_ln99_2_fu_1595_p2 <= (select_ln209_14_reg_2480 or or_ln70_1_fu_1550_p2);
    or_ln99_3_fu_1600_p2 <= (or_ln99_2_fu_1595_p2 or icmp_ln99_4_fu_1589_p2);
    or_ln99_4_fu_1704_p2 <= (select_ln209_14_reg_2480 or or_ln70_2_fu_1652_p2);
    or_ln99_5_fu_1709_p2 <= (or_ln99_4_fu_1704_p2 or icmp_ln99_5_fu_1699_p2);
    or_ln99_fu_1155_p2 <= (or_ln70_fu_1118_p2 or icmp_ln99_fu_1089_p2);
    outStream_TDATA <= outStream_V_data_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, call_ln134_write_output_fu_772_outStream_TDATA_blk_n, ap_enable_reg_pp0_iter4, select_ln209_35_reg_2587_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln209_35_reg_2587_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outStream_TDATA_blk_n <= call_ln134_write_output_fu_772_outStream_TDATA_blk_n;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_1_ack_in <= outStream_V_data_1_state(1);
    outStream_V_data_1_ack_out <= outStream_TREADY;

    outStream_V_data_1_data_out_assign_proc : process(outStream_V_data_1_payload_A, outStream_V_data_1_payload_B, outStream_V_data_1_sel)
    begin
        if ((outStream_V_data_1_sel = ap_const_logic_1)) then 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_B;
        else 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_A;
        end if; 
    end process;

    outStream_V_data_1_load_A <= (outStream_V_data_1_state_cmp_full and not(outStream_V_data_1_sel_wr));
    outStream_V_data_1_load_B <= (outStream_V_data_1_state_cmp_full and outStream_V_data_1_sel_wr);
    outStream_V_data_1_sel <= outStream_V_data_1_sel_rd;
    outStream_V_data_1_state_cmp_full <= '0' when (outStream_V_data_1_state = ap_const_lv2_1) else '1';
    outStream_V_data_1_vld_in <= call_ln134_write_output_fu_772_outStream_TVALID;
    outStream_V_data_1_vld_out <= outStream_V_data_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_dest_V_1_vld_in <= call_ln134_write_output_fu_772_outStream_TVALID;
    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_id_V_1_vld_in <= call_ln134_write_output_fu_772_outStream_TVALID;
    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_keep_V_1_vld_in <= call_ln134_write_output_fu_772_outStream_TVALID;
    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_last_V_1_vld_in <= call_ln134_write_output_fu_772_outStream_TVALID;
    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_strb_V_1_vld_in <= call_ln134_write_output_fu_772_outStream_TVALID;
    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_user_V_1_vld_in <= call_ln134_write_output_fu_772_outStream_TVALID;
    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    out_col_V_fu_1357_p2 <= std_logic_vector(unsigned(select_ln209_11_fu_1268_p3) + unsigned(ap_const_lv9_1));
    out_row_V_fu_1010_p2 <= std_logic_vector(signed(ap_phi_mux_t_V_phi_fu_634_p4) + signed(ap_const_lv9_1));
    ret_V_1_fu_942_p2 <= std_logic_vector(unsigned(zext_ln1354_3_fu_939_p1) + unsigned(ap_const_lv5_1F));
    ret_V_fu_924_p2 <= std_logic_vector(unsigned(zext_ln1354_1_fu_921_p1) + unsigned(ap_const_lv10_3FF));
    rhs_V_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_count_V_1_fu_1130_p3),10));
    row_idx_V_fu_1073_p2 <= std_logic_vector(unsigned(zext_ln209_fu_1065_p1) + unsigned(mul_ln209_reg_2344));
    row_stride_V_fu_1258_p2 <= std_logic_vector(unsigned(select_ln209_fu_1183_p3) + unsigned(ap_const_lv2_1));
    select_ln178_10_fu_2104_p3 <= 
        window_3_val_1_V_0_reg_2787 when (icmp_ln1494_10_fu_2100_p2(0) = '1') else 
        line_buff_group_3_va_10_reg_2855;
    select_ln178_1_fu_2035_p3 <= 
        window_0_val_1_V_0_reg_2769 when (icmp_ln1494_1_fu_2031_p2(0) = '1') else 
        line_buff_group_0_va_10_reg_2837;
    select_ln178_3_fu_1955_p3 <= 
        select_ln209_37_reg_2597_pp0_iter2_reg when (icmp_ln1494_3_fu_1949_p2(0) = '1') else 
        zext_ln209_21_fu_1909_p1;
    select_ln178_4_fu_2058_p3 <= 
        window_1_val_1_V_0_reg_2775 when (icmp_ln1494_4_fu_2054_p2(0) = '1') else 
        line_buff_group_1_va_10_reg_2843;
    select_ln178_6_fu_1977_p3 <= 
        select_ln209_37_reg_2597_pp0_iter2_reg when (icmp_ln1494_6_fu_1971_p2(0) = '1') else 
        zext_ln209_21_fu_1909_p1;
    select_ln178_7_fu_2081_p3 <= 
        window_2_val_1_V_0_reg_2781 when (icmp_ln1494_7_fu_2077_p2(0) = '1') else 
        line_buff_group_2_va_10_reg_2849;
    select_ln178_9_fu_1999_p3 <= 
        select_ln209_37_reg_2597_pp0_iter2_reg when (icmp_ln1494_9_fu_1993_p2(0) = '1') else 
        zext_ln209_21_fu_1909_p1;
    select_ln178_fu_1933_p3 <= 
        select_ln209_37_reg_2597_pp0_iter2_reg when (icmp_ln1494_fu_1927_p2(0) = '1') else 
        zext_ln209_21_fu_1909_p1;
    select_ln209_10_fu_1058_p3 <= 
        icmp_ln55_reg_2339 when (icmp_ln52_fu_1016_p2(0) = '1') else 
        icmp_ln55_1_fu_1053_p2;
    select_ln209_11_fu_1268_p3 <= 
        ap_const_lv9_0 when (or_ln209_1_fu_1264_p2(0) = '1') else 
        t_V_2_reg_666;
    select_ln209_12_fu_1296_p3 <= 
        icmp_ln895_3_fu_1290_p2 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_3_fu_1200_p3;
    select_ln209_13_fu_1308_p3 <= 
        icmp_ln887_4_fu_1303_p2 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_4_fu_1211_p3;
    select_ln209_14_fu_1320_p3 <= 
        icmp_ln99_3_fu_1315_p2 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_5_fu_1218_p3;
    select_ln209_15_fu_1505_p3 <= 
        ap_const_lv9_0 when (or_ln209_1_reg_2460(0) = '1') else 
        mul_ln209_1_reg_2350;
    select_ln209_16_fu_1327_p3 <= 
        icmp_ln123_2_reg_2314 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_6_fu_1224_p3;
    select_ln209_17_fu_1338_p3 <= 
        and_ln77_2_fu_1333_p2 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_7_fu_1235_p3;
    select_ln209_18_fu_1511_p3 <= 
        ap_const_lv9_0 when (or_ln209_1_reg_2460(0) = '1') else 
        col_idx_V_reg_2420;
    select_ln209_19_fu_1522_p3 <= 
        ap_const_lv9_0 when (or_ln209_1_reg_2460(0) = '1') else 
        conv_count_V_1_reg_2425;
    select_ln209_1_fu_1190_p3 <= 
        mul_ln209_6_reg_2383 when (icmp_ln52_reg_2365(0) = '1') else 
        mul_ln209_reg_2344;
    select_ln209_20_fu_1528_p3 <= 
        ap_const_lv10_1 when (or_ln209_1_reg_2460(0) = '1') else 
        add_ln1353_reg_2435;
    select_ln209_21_fu_1345_p3 <= 
        icmp_ln61_reg_2326 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_8_fu_1242_p3;
    select_ln209_22_fu_1351_p3 <= 
        icmp_ln58_reg_2333 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_9_fu_1247_p3;
    select_ln209_23_fu_1373_p3 <= 
        ap_const_lv2_0 when (or_ln209_4_fu_1368_p2(0) = '1') else 
        ap_phi_mux_t_V_3_phi_fu_717_p4;
    select_ln209_24_fu_1539_p3 <= 
        mul_ln209_7_reg_2506 when (select_ln209_22_reg_2491(0) = '1') else 
        select_ln209_15_fu_1505_p3;
    select_ln209_25_fu_1395_p3 <= 
        icmp_ln123_4_fu_1390_p2 when (select_ln209_22_fu_1351_p3(0) = '1') else 
        select_ln209_16_fu_1327_p3;
    select_ln209_26_fu_1577_p3 <= 
        and_ln77_3_fu_1572_p2 when (select_ln209_22_reg_2491(0) = '1') else 
        select_ln209_17_reg_2486;
    select_ln209_27_fu_1583_p3 <= 
        mul_ln209_7_reg_2506 when (select_ln209_22_reg_2491(0) = '1') else 
        select_ln209_18_fu_1511_p3;
    select_ln209_28_fu_1606_p3 <= 
        or_ln99_3_fu_1600_p2 when (select_ln209_22_reg_2491(0) = '1') else 
        or_ln209_2_fu_1517_p2;
    select_ln209_29_fu_1617_p3 <= 
        select_ln70_1_fu_1560_p3 when (select_ln209_22_reg_2491(0) = '1') else 
        select_ln209_19_fu_1522_p3;
    select_ln209_2_fu_1035_p3 <= 
        icmp_ln123_3_fu_1030_p2 when (icmp_ln52_fu_1016_p2(0) = '1') else 
        icmp_ln123_fu_995_p2;
    select_ln209_30_fu_1630_p3 <= 
        add_ln1353_1_fu_1624_p2 when (select_ln209_22_reg_2491(0) = '1') else 
        select_ln209_20_fu_1528_p3;
    select_ln209_31_fu_1403_p3 <= 
        icmp_ln61_reg_2326 when (select_ln209_22_fu_1351_p3(0) = '1') else 
        select_ln209_21_fu_1345_p3;
    select_ln209_32_fu_1436_p3 <= 
        ap_const_lv4_0 when (or_ln209_6_fu_1430_p2(0) = '1') else 
        t_V_4_reg_690;
    select_ln209_33_fu_1681_p3 <= 
        and_ln77_4_fu_1676_p2 when (select_ln209_31_reg_2520(0) = '1') else 
        select_ln209_26_fu_1577_p3;
    select_ln209_34_fu_1688_p3 <= 
        add_ln209_3_fu_1640_p2 when (select_ln209_31_reg_2520(0) = '1') else 
        select_ln209_27_fu_1583_p3;
    select_ln209_35_fu_1715_p3 <= 
        or_ln99_5_fu_1709_p2 when (select_ln209_31_reg_2520(0) = '1') else 
        select_ln209_28_fu_1606_p3;
    select_ln209_36_fu_1726_p3 <= 
        select_ln70_2_fu_1663_p3 when (select_ln209_31_reg_2520(0) = '1') else 
        select_ln209_29_fu_1617_p3;
    select_ln209_37_fu_1739_p3 <= 
        add_ln1353_2_fu_1733_p2 when (select_ln209_31_reg_2520(0) = '1') else 
        select_ln209_30_fu_1630_p3;
    select_ln209_3_fu_1200_p3 <= 
        icmp_ln895_2_fu_1195_p2 when (icmp_ln52_reg_2365(0) = '1') else 
        icmp_ln895_fu_1078_p2;
    select_ln209_4_fu_1211_p3 <= 
        icmp_ln887_3_fu_1207_p2 when (icmp_ln52_reg_2365(0) = '1') else 
        icmp_ln887_fu_1084_p2;
    select_ln209_5_fu_1218_p3 <= 
        icmp_ln99_2_reg_2309 when (icmp_ln52_reg_2365(0) = '1') else 
        icmp_ln99_fu_1089_p2;
    select_ln209_6_fu_1224_p3 <= 
        icmp_ln123_2_reg_2314 when (icmp_ln52_reg_2365(0) = '1') else 
        icmp_ln123_1_fu_1098_p2;
    select_ln209_7_fu_1235_p3 <= 
        and_ln77_1_fu_1230_p2 when (icmp_ln52_reg_2365(0) = '1') else 
        and_ln77_fu_1143_p2;
    select_ln209_8_fu_1242_p3 <= 
        icmp_ln61_reg_2326 when (icmp_ln52_reg_2365(0) = '1') else 
        icmp_ln61_1_reg_2395;
    select_ln209_9_fu_1247_p3 <= 
        icmp_ln58_reg_2333 when (icmp_ln52_reg_2365(0) = '1') else 
        icmp_ln58_1_reg_2400;
    select_ln209_fu_1183_p3 <= 
        ap_const_lv2_0 when (icmp_ln52_reg_2365(0) = '1') else 
        ap_phi_mux_t_V_1_phi_fu_706_p4;
    select_ln49_fu_1252_p3 <= 
        out_row_V_reg_2360 when (icmp_ln52_reg_2365(0) = '1') else 
        t_V_reg_630;
    select_ln52_1_fu_1494_p3 <= 
        ap_const_lv17_1 when (icmp_ln52_reg_2365(0) = '1') else 
        add_ln52_fu_1488_p2;
    select_ln52_fu_1534_p3 <= 
        row_stride_V_reg_2455 when (select_ln209_10_reg_2405(0) = '1') else 
        select_ln209_reg_2445;
    select_ln55_1_fu_1480_p3 <= 
        ap_const_lv15_1 when (or_ln209_1_fu_1264_p2(0) = '1') else 
        add_ln55_fu_1474_p2;
    select_ln55_fu_1410_p3 <= 
        out_col_V_fu_1357_p2 when (select_ln209_22_fu_1351_p3(0) = '1') else 
        select_ln209_11_fu_1268_p3;
    select_ln58_1_fu_1466_p3 <= 
        ap_const_lv6_1 when (or_ln209_4_fu_1368_p2(0) = '1') else 
        add_ln58_fu_1460_p2;
    select_ln58_fu_1746_p3 <= 
        col_stride_V_reg_2535 when (select_ln209_31_reg_2520(0) = '1') else 
        select_ln209_23_reg_2501;
    select_ln70_1_fu_1560_p3 <= 
        ap_const_lv9_0 when (or_ln70_1_fu_1550_p2(0) = '1') else 
        add_ln214_1_fu_1555_p2;
    select_ln70_2_fu_1663_p3 <= 
        ap_const_lv9_0 when (or_ln70_2_fu_1652_p2(0) = '1') else 
        add_ln214_2_fu_1657_p2;
        sext_ln162_1_fu_1897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln162_1_fu_1892_p2),64));

        sext_ln162_2_fu_2015_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln162_2_reg_2749),64));

        sext_ln162_3_fu_2019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln162_3_reg_2754),64));

        sext_ln162_4_fu_2023_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln162_4_reg_2759),64));

        sext_ln162_5_fu_2027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln162_5_reg_2764),64));

        sext_ln162_fu_1880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln162_fu_1875_p2),64));

        sext_ln203_fu_1756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_1751_p2),64));

    zext_ln1354_1_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_h_V_read_reg_2166),10));
    zext_ln1354_2_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_w_V_read_reg_2160),10));
    zext_ln1354_3_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_fold_ch_V_read_reg_2137),5));
    zext_ln1354_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2129),3));
    zext_ln178_1_fu_1962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln178_3_fu_1955_p3),13));
    zext_ln178_2_fu_1984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln178_6_fu_1977_p3),13));
    zext_ln178_3_fu_2006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln178_9_fu_1999_p3),13));
    zext_ln178_fu_1940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln178_fu_1933_p3),13));
    zext_ln209_14_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_row_V_fu_1010_p2),10));
    zext_ln209_15_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_stride_V_fu_1258_p2),9));
    zext_ln209_16_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_stride_V_fu_1258_p2),3));
    zext_ln209_17_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_col_V_fu_1357_p2),10));
    zext_ln209_18_fu_1637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_stride_V_reg_2535),9));
    zext_ln209_19_fu_1695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_34_fu_1688_p3),13));
    zext_ln209_1_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_3_phi_fu_717_p4),9));
    zext_ln209_20_fu_1869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_36_reg_2591),13));
    zext_ln209_21_fu_1909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_36_reg_2591_pp0_iter2_reg),10));
    zext_ln209_22_fu_1872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_37_reg_2597),13));
    zext_ln209_2_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2129),9));
    zext_ln209_3_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_634_p4),10));
    zext_ln209_4_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_1_phi_fu_706_p4),3));
    zext_ln209_5_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_666),10));
    zext_ln209_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_1_phi_fu_706_p4),9));
    zext_ln215_1_fu_1613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_1_fu_1560_p3),10));
    zext_ln215_2_fu_1722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_2_fu_1663_p3),10));
    zext_ln879_fu_1764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_32_reg_2542),5));
end behav;
