// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "post_process.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic post_process::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic post_process::ap_const_logic_0 = sc_dt::Log_0;
const bool post_process::ap_const_boolean_1 = true;
const bool post_process::ap_const_boolean_0 = false;
const sc_lv<4> post_process::ap_const_lv4_0 = "0000";
const sc_lv<32> post_process::ap_const_lv32_0 = "00000000000000000000000000000000";

post_process::post_process(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln703_10_fu_76_p2);
    sensitive << ( sub1_val_output_V );
    sensitive << ( add_ln703_9_fu_70_p2 );

    SC_METHOD(thread_add_ln703_8_fu_82_p2);
    sensitive << ( sub0_val_output_V_re_reg_91 );
    sensitive << ( p_Val2_s_reg_96 );

    SC_METHOD(thread_add_ln703_9_fu_70_p2);
    sensitive << ( sub2_val_output_V );
    sensitive << ( sub3_val_output_V );

    SC_METHOD(thread_add_ln703_fu_86_p2);
    sensitive << ( add_ln703_10_reg_101 );
    sensitive << ( add_ln703_8_fu_82_p2 );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_return);
    sensitive << ( add_ln703_fu_86_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_int_reg );

    SC_METHOD(thread_icmp_ln211_fu_56_p2);
    sensitive << ( input_ch_idx );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Val2_s_fu_62_p3);
    sensitive << ( val_output_V );
    sensitive << ( icmp_ln211_fu_56_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "post_process_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, sub0_val_output_V, "(port)sub0_val_output_V");
    sc_trace(mVcdFile, sub1_val_output_V, "(port)sub1_val_output_V");
    sc_trace(mVcdFile, sub2_val_output_V, "(port)sub2_val_output_V");
    sc_trace(mVcdFile, sub3_val_output_V, "(port)sub3_val_output_V");
    sc_trace(mVcdFile, input_ch_idx, "(port)input_ch_idx");
    sc_trace(mVcdFile, val_output_V, "(port)val_output_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, sub0_val_output_V_re_reg_91, "sub0_val_output_V_re_reg_91");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, p_Val2_s_fu_62_p3, "p_Val2_s_fu_62_p3");
    sc_trace(mVcdFile, p_Val2_s_reg_96, "p_Val2_s_reg_96");
    sc_trace(mVcdFile, add_ln703_10_fu_76_p2, "add_ln703_10_fu_76_p2");
    sc_trace(mVcdFile, add_ln703_10_reg_101, "add_ln703_10_reg_101");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln211_fu_56_p2, "icmp_ln211_fu_56_p2");
    sc_trace(mVcdFile, add_ln703_9_fu_70_p2, "add_ln703_9_fu_70_p2");
    sc_trace(mVcdFile, add_ln703_8_fu_82_p2, "add_ln703_8_fu_82_p2");
    sc_trace(mVcdFile, add_ln703_fu_86_p2, "add_ln703_fu_86_p2");
    sc_trace(mVcdFile, ap_ce_reg, "ap_ce_reg");
    sc_trace(mVcdFile, ap_return_int_reg, "ap_return_int_reg");
#endif

    }
}

post_process::~post_process() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void post_process::thread_ap_clk_no_reset_() {
    ap_ce_reg = ap_ce.read();
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        add_ln703_10_reg_101 = add_ln703_10_fu_76_p2.read();
        p_Val2_s_reg_96 = p_Val2_s_fu_62_p3.read();
        sub0_val_output_V_re_reg_91 = sub0_val_output_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_int_reg = add_ln703_fu_86_p2.read();
    }
}

void post_process::thread_add_ln703_10_fu_76_p2() {
    add_ln703_10_fu_76_p2 = (!add_ln703_9_fu_70_p2.read().is_01() || !sub1_val_output_V.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln703_9_fu_70_p2.read()) + sc_biguint<32>(sub1_val_output_V.read()));
}

void post_process::thread_add_ln703_8_fu_82_p2() {
    add_ln703_8_fu_82_p2 = (!p_Val2_s_reg_96.read().is_01() || !sub0_val_output_V_re_reg_91.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_Val2_s_reg_96.read()) + sc_biguint<32>(sub0_val_output_V_re_reg_91.read()));
}

void post_process::thread_add_ln703_9_fu_70_p2() {
    add_ln703_9_fu_70_p2 = (!sub2_val_output_V.read().is_01() || !sub3_val_output_V.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sub2_val_output_V.read()) + sc_biguint<32>(sub3_val_output_V.read()));
}

void post_process::thread_add_ln703_fu_86_p2() {
    add_ln703_fu_86_p2 = (!add_ln703_10_reg_101.read().is_01() || !add_ln703_8_fu_82_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln703_10_reg_101.read()) + sc_biguint<32>(add_ln703_8_fu_82_p2.read()));
}

void post_process::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void post_process::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void post_process::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void post_process::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void post_process::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return = ap_return_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return = add_ln703_fu_86_p2.read();
    }
}

void post_process::thread_icmp_ln211_fu_56_p2() {
    icmp_ln211_fu_56_p2 = (!input_ch_idx.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(input_ch_idx.read() == ap_const_lv4_0);
}

void post_process::thread_p_Val2_s_fu_62_p3() {
    p_Val2_s_fu_62_p3 = (!icmp_ln211_fu_56_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln211_fu_56_p2.read()[0].to_bool())? ap_const_lv32_0: val_output_V.read());
}

}

