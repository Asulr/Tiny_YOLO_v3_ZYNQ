// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _slide_window_HH_
#define _slide_window_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct slide_window : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<9> > conv_count;
    sc_out< sc_lv<12> > line_buff_val_0_V_address0;
    sc_out< sc_logic > line_buff_val_0_V_ce0;
    sc_in< sc_lv<16> > line_buff_val_0_V_q0;
    sc_out< sc_lv<12> > line_buff_val_0_V_address1;
    sc_out< sc_logic > line_buff_val_0_V_ce1;
    sc_in< sc_lv<16> > line_buff_val_0_V_q1;
    sc_out< sc_lv<12> > line_buff_val_1_V_address0;
    sc_out< sc_logic > line_buff_val_1_V_ce0;
    sc_in< sc_lv<16> > line_buff_val_1_V_q0;
    sc_out< sc_lv<12> > line_buff_val_1_V_address1;
    sc_out< sc_logic > line_buff_val_1_V_ce1;
    sc_in< sc_lv<16> > line_buff_val_1_V_q1;
    sc_out< sc_lv<12> > line_buff_val_2_V_address0;
    sc_out< sc_logic > line_buff_val_2_V_ce0;
    sc_in< sc_lv<16> > line_buff_val_2_V_q0;
    sc_out< sc_lv<12> > line_buff_val_2_V_address1;
    sc_out< sc_logic > line_buff_val_2_V_ce1;
    sc_in< sc_lv<16> > line_buff_val_2_V_q1;
    sc_in< sc_lv<4> > line_buff_val_V_offset;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;
    sc_out< sc_lv<16> > ap_return_2;
    sc_out< sc_lv<16> > ap_return_3;
    sc_out< sc_lv<16> > ap_return_4;
    sc_out< sc_lv<16> > ap_return_5;
    sc_out< sc_lv<16> > ap_return_6;
    sc_out< sc_lv<16> > ap_return_7;
    sc_out< sc_lv<16> > ap_return_8;


    // Module declarations
    slide_window(sc_module_name name);
    SC_HAS_PROCESS(slide_window);

    ~slide_window();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<9> > conv_count_read_reg_249;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<13> > mul_ln259_fu_139_p2;
    sc_signal< sc_lv<13> > mul_ln259_reg_255;
    sc_signal< sc_lv<9> > add_ln259_fu_145_p2;
    sc_signal< sc_lv<9> > add_ln259_reg_262;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<13> > add_ln259_4_fu_190_p2;
    sc_signal< sc_lv<13> > add_ln259_4_reg_297;
    sc_signal< sc_lv<16> > line_buff_val_0_V_l_reg_302;
    sc_signal< sc_lv<16> > line_buff_val_0_V_l_1_reg_307;
    sc_signal< sc_lv<16> > line_buff_val_1_V_l_reg_327;
    sc_signal< sc_lv<16> > line_buff_val_1_V_l_1_reg_332;
    sc_signal< sc_lv<16> > line_buff_val_2_V_l_reg_337;
    sc_signal< sc_lv<16> > line_buff_val_2_V_l_1_reg_342;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_lv<64> > sext_ln259_fu_159_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > sext_ln259_1_fu_174_p1;
    sc_signal< sc_lv<64> > sext_ln259_2_fu_195_p1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<4> > mul_ln259_fu_139_p0;
    sc_signal< sc_lv<13> > zext_ln259_1_fu_151_p1;
    sc_signal< sc_lv<13> > add_ln259_2_fu_154_p2;
    sc_signal< sc_lv<13> > zext_ln259_2_fu_166_p1;
    sc_signal< sc_lv<13> > add_ln259_3_fu_169_p2;
    sc_signal< sc_lv<9> > add_ln259_1_fu_181_p2;
    sc_signal< sc_lv<13> > zext_ln259_3_fu_186_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<13> > mul_ln259_fu_139_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage2;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<13> ap_const_lv13_1A2;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<9> ap_const_lv9_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln259_1_fu_181_p2();
    void thread_add_ln259_2_fu_154_p2();
    void thread_add_ln259_3_fu_169_p2();
    void thread_add_ln259_4_fu_190_p2();
    void thread_add_ln259_fu_145_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_line_buff_val_0_V_address0();
    void thread_line_buff_val_0_V_address1();
    void thread_line_buff_val_0_V_ce0();
    void thread_line_buff_val_0_V_ce1();
    void thread_line_buff_val_1_V_address0();
    void thread_line_buff_val_1_V_address1();
    void thread_line_buff_val_1_V_ce0();
    void thread_line_buff_val_1_V_ce1();
    void thread_line_buff_val_2_V_address0();
    void thread_line_buff_val_2_V_address1();
    void thread_line_buff_val_2_V_ce0();
    void thread_line_buff_val_2_V_ce1();
    void thread_mul_ln259_fu_139_p0();
    void thread_mul_ln259_fu_139_p00();
    void thread_mul_ln259_fu_139_p2();
    void thread_sext_ln259_1_fu_174_p1();
    void thread_sext_ln259_2_fu_195_p1();
    void thread_sext_ln259_fu_159_p1();
    void thread_zext_ln259_1_fu_151_p1();
    void thread_zext_ln259_2_fu_166_p1();
    void thread_zext_ln259_3_fu_186_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
