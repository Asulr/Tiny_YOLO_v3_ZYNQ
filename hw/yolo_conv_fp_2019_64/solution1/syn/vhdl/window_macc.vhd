-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity window_macc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of window_macc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal p_read_1_reg_281 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_3_reg_286 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_286_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_291 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_9_reg_301 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_12_reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_12_reg_311_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_13_reg_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_15_reg_321 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read18_reg_326 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_2_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_2_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_4_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_4_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_7_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_7_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_reg_351_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_1_reg_356_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_3_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_4_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_6_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln703_6_fu_208_p2 : signal is "no";
    signal add_ln703_6_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_2_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln703_2_fu_212_p2 : signal is "no";
    signal add_ln703_7_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read8_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read9_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read10_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read11_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read12_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read13_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read14_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read15_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read16_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read17_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);

    component yolo_conv_top_mul_mul_16s_16s_32_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    yolo_conv_top_mul_mul_16s_16s_32_1_0_U6 : component yolo_conv_top_mul_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_read1_int_reg,
        din1 => p_read10_int_reg,
        dout => mul_ln1118_1_fu_221_p2);

    yolo_conv_top_mul_mul_16s_16s_32_1_0_U7 : component yolo_conv_top_mul_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_read2_int_reg,
        din1 => p_read11_int_reg,
        dout => mul_ln1118_2_fu_227_p2);

    yolo_conv_top_mul_mul_16s_16s_32_1_0_U8 : component yolo_conv_top_mul_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_read4_int_reg,
        din1 => p_read13_int_reg,
        dout => mul_ln1118_4_fu_233_p2);

    yolo_conv_top_mul_mul_16s_16s_32_1_0_U9 : component yolo_conv_top_mul_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_read7_int_reg,
        din1 => p_read16_int_reg,
        dout => mul_ln1118_7_fu_239_p2);

    yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U10 : component yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_read18_reg_326,
        din1 => p_read_9_reg_301,
        din2 => mul_ln1118_1_reg_331,
        dout => grp_fu_245_p3);

    yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U11 : component yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_read_15_reg_321,
        din1 => p_read_6_reg_296,
        din2 => mul_ln1118_2_reg_336,
        dout => grp_fu_252_p3);

    yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U12 : component yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_read_13_reg_316,
        din1 => p_read_4_reg_291,
        din2 => mul_ln1118_4_reg_341,
        dout => grp_fu_259_p3);

    yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U13 : component yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_read_10_reg_306,
        din1 => p_read_1_reg_281,
        din2 => mul_ln1118_7_reg_346,
        dout => grp_fu_266_p3);

    yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U14 : component yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_read_12_reg_311_pp0_iter1_reg,
        din1 => p_read_3_reg_286_pp0_iter1_reg,
        din2 => add_ln703_4_reg_366,
        dout => grp_fu_273_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_ln703_1_reg_356 <= grp_fu_252_p3;
                add_ln703_1_reg_356_pp0_iter2_reg <= add_ln703_1_reg_356;
                add_ln703_3_reg_361 <= grp_fu_259_p3;
                add_ln703_4_reg_366 <= grp_fu_266_p3;
                add_ln703_6_reg_371 <= add_ln703_6_fu_208_p2;
                add_ln703_reg_351 <= grp_fu_245_p3;
                add_ln703_reg_351_pp0_iter2_reg <= add_ln703_reg_351;
                mul_ln1118_1_reg_331 <= mul_ln1118_1_fu_221_p2;
                mul_ln1118_2_reg_336 <= mul_ln1118_2_fu_227_p2;
                mul_ln1118_4_reg_341 <= mul_ln1118_4_fu_233_p2;
                mul_ln1118_7_reg_346 <= mul_ln1118_7_fu_239_p2;
                p_read18_reg_326 <= p_read_int_reg;
                p_read_10_reg_306 <= p_read8_int_reg;
                p_read_12_reg_311 <= p_read6_int_reg;
                p_read_12_reg_311_pp0_iter1_reg <= p_read_12_reg_311;
                p_read_13_reg_316 <= p_read5_int_reg;
                p_read_15_reg_321 <= p_read3_int_reg;
                p_read_1_reg_281 <= p_read17_int_reg;
                p_read_3_reg_286 <= p_read15_int_reg;
                p_read_3_reg_286_pp0_iter1_reg <= p_read_3_reg_286;
                p_read_4_reg_291 <= p_read14_int_reg;
                p_read_6_reg_296 <= p_read12_int_reg;
                p_read_9_reg_301 <= p_read9_int_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= add_ln703_7_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read10_int_reg <= p_read10;
                p_read11_int_reg <= p_read11;
                p_read12_int_reg <= p_read12;
                p_read13_int_reg <= p_read13;
                p_read14_int_reg <= p_read14;
                p_read15_int_reg <= p_read15;
                p_read16_int_reg <= p_read16;
                p_read17_int_reg <= p_read17;
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
                p_read8_int_reg <= p_read8;
                p_read9_int_reg <= p_read9;
                p_read_int_reg <= p_read;
            end if;
        end if;
    end process;
    add_ln703_2_fu_212_p2 <= std_logic_vector(signed(add_ln703_1_reg_356_pp0_iter2_reg) + signed(add_ln703_reg_351_pp0_iter2_reg));
    add_ln703_6_fu_208_p2 <= std_logic_vector(signed(grp_fu_273_p3) + signed(add_ln703_3_reg_361));
    add_ln703_7_fu_216_p2 <= std_logic_vector(unsigned(add_ln703_6_reg_371) + unsigned(add_ln703_2_fu_212_p2));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(add_ln703_7_fu_216_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= add_ln703_7_fu_216_p2;
        end if; 
    end process;

end behav;
