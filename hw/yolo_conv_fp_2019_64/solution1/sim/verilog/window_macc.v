// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module window_macc (
        ap_clk,
        ap_rst,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
input  [15:0] p_read6;
input  [15:0] p_read7;
input  [15:0] p_read8;
input  [15:0] p_read9;
input  [15:0] p_read10;
input  [15:0] p_read11;
input  [15:0] p_read12;
input  [15:0] p_read13;
input  [15:0] p_read14;
input  [15:0] p_read15;
input  [15:0] p_read16;
input  [15:0] p_read17;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

reg  signed [15:0] p_read_1_reg_281;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] p_read_3_reg_286;
reg  signed [15:0] p_read_3_reg_286_pp0_iter1_reg;
reg  signed [15:0] p_read_4_reg_291;
reg  signed [15:0] p_read_6_reg_296;
reg  signed [15:0] p_read_9_reg_301;
reg  signed [15:0] p_read_10_reg_306;
reg   [15:0] p_read_12_reg_311;
reg  signed [15:0] p_read_12_reg_311_pp0_iter1_reg;
reg  signed [15:0] p_read_13_reg_316;
reg  signed [15:0] p_read_15_reg_321;
reg  signed [15:0] p_read18_reg_326;
wire  signed [31:0] mul_ln1118_1_fu_221_p2;
reg  signed [31:0] mul_ln1118_1_reg_331;
wire  signed [31:0] mul_ln1118_2_fu_227_p2;
reg  signed [31:0] mul_ln1118_2_reg_336;
wire  signed [31:0] mul_ln1118_4_fu_233_p2;
reg  signed [31:0] mul_ln1118_4_reg_341;
wire  signed [31:0] mul_ln1118_7_fu_239_p2;
reg  signed [31:0] mul_ln1118_7_reg_346;
wire  signed [31:0] grp_fu_245_p3;
reg  signed [31:0] add_ln703_reg_351;
reg  signed [31:0] add_ln703_reg_351_pp0_iter2_reg;
wire  signed [31:0] grp_fu_252_p3;
reg  signed [31:0] add_ln703_1_reg_356;
reg  signed [31:0] add_ln703_1_reg_356_pp0_iter2_reg;
wire  signed [31:0] grp_fu_259_p3;
reg  signed [31:0] add_ln703_3_reg_361;
wire  signed [31:0] grp_fu_266_p3;
reg  signed [31:0] add_ln703_4_reg_366;
(* use_dsp48 = "no" *) wire   [31:0] add_ln703_6_fu_208_p2;
reg   [31:0] add_ln703_6_reg_371;
wire    ap_block_pp0_stage0;
wire  signed [31:0] grp_fu_273_p3;
(* use_dsp48 = "no" *) wire   [31:0] add_ln703_2_fu_212_p2;
wire   [31:0] add_ln703_7_fu_216_p2;
reg    ap_ce_reg;
reg   [15:0] p_read_int_reg;
reg  signed [15:0] p_read1_int_reg;
reg  signed [15:0] p_read2_int_reg;
reg   [15:0] p_read3_int_reg;
reg  signed [15:0] p_read4_int_reg;
reg   [15:0] p_read5_int_reg;
reg   [15:0] p_read6_int_reg;
reg  signed [15:0] p_read7_int_reg;
reg   [15:0] p_read8_int_reg;
reg   [15:0] p_read9_int_reg;
reg  signed [15:0] p_read10_int_reg;
reg  signed [15:0] p_read11_int_reg;
reg   [15:0] p_read12_int_reg;
reg  signed [15:0] p_read13_int_reg;
reg   [15:0] p_read14_int_reg;
reg   [15:0] p_read15_int_reg;
reg  signed [15:0] p_read16_int_reg;
reg   [15:0] p_read17_int_reg;
reg   [31:0] ap_return_int_reg;

yolo_conv_top_mul_mul_16s_16s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mul_mul_16s_16s_32_1_0_U6(
    .din0(p_read1_int_reg),
    .din1(p_read10_int_reg),
    .dout(mul_ln1118_1_fu_221_p2)
);

yolo_conv_top_mul_mul_16s_16s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mul_mul_16s_16s_32_1_0_U7(
    .din0(p_read2_int_reg),
    .din1(p_read11_int_reg),
    .dout(mul_ln1118_2_fu_227_p2)
);

yolo_conv_top_mul_mul_16s_16s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mul_mul_16s_16s_32_1_0_U8(
    .din0(p_read4_int_reg),
    .din1(p_read13_int_reg),
    .dout(mul_ln1118_4_fu_233_p2)
);

yolo_conv_top_mul_mul_16s_16s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mul_mul_16s_16s_32_1_0_U9(
    .din0(p_read7_int_reg),
    .din1(p_read16_int_reg),
    .dout(mul_ln1118_7_fu_239_p2)
);

yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U10(
    .din0(p_read18_reg_326),
    .din1(p_read_9_reg_301),
    .din2(mul_ln1118_1_reg_331),
    .dout(grp_fu_245_p3)
);

yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U11(
    .din0(p_read_15_reg_321),
    .din1(p_read_6_reg_296),
    .din2(mul_ln1118_2_reg_336),
    .dout(grp_fu_252_p3)
);

yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U12(
    .din0(p_read_13_reg_316),
    .din1(p_read_4_reg_291),
    .din2(mul_ln1118_4_reg_341),
    .dout(grp_fu_259_p3)
);

yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U13(
    .din0(p_read_10_reg_306),
    .din1(p_read_1_reg_281),
    .din2(mul_ln1118_7_reg_346),
    .dout(grp_fu_266_p3)
);

yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
yolo_conv_top_mac_muladd_16s_16s_32s_32_1_0_U14(
    .din0(p_read_12_reg_311_pp0_iter1_reg),
    .din1(p_read_3_reg_286_pp0_iter1_reg),
    .din2(add_ln703_4_reg_366),
    .dout(grp_fu_273_p3)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        add_ln703_1_reg_356 <= grp_fu_252_p3;
        add_ln703_1_reg_356_pp0_iter2_reg <= add_ln703_1_reg_356;
        add_ln703_3_reg_361 <= grp_fu_259_p3;
        add_ln703_4_reg_366 <= grp_fu_266_p3;
        add_ln703_6_reg_371 <= add_ln703_6_fu_208_p2;
        add_ln703_reg_351 <= grp_fu_245_p3;
        add_ln703_reg_351_pp0_iter2_reg <= add_ln703_reg_351;
        mul_ln1118_1_reg_331 <= mul_ln1118_1_fu_221_p2;
        mul_ln1118_2_reg_336 <= mul_ln1118_2_fu_227_p2;
        mul_ln1118_4_reg_341 <= mul_ln1118_4_fu_233_p2;
        mul_ln1118_7_reg_346 <= mul_ln1118_7_fu_239_p2;
        p_read18_reg_326 <= p_read_int_reg;
        p_read_10_reg_306 <= p_read8_int_reg;
        p_read_12_reg_311 <= p_read6_int_reg;
        p_read_12_reg_311_pp0_iter1_reg <= p_read_12_reg_311;
        p_read_13_reg_316 <= p_read5_int_reg;
        p_read_15_reg_321 <= p_read3_int_reg;
        p_read_1_reg_281 <= p_read17_int_reg;
        p_read_3_reg_286 <= p_read15_int_reg;
        p_read_3_reg_286_pp0_iter1_reg <= p_read_3_reg_286;
        p_read_4_reg_291 <= p_read14_int_reg;
        p_read_6_reg_296 <= p_read12_int_reg;
        p_read_9_reg_301 <= p_read9_int_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= add_ln703_7_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_read10_int_reg <= p_read10;
        p_read11_int_reg <= p_read11;
        p_read12_int_reg <= p_read12;
        p_read13_int_reg <= p_read13;
        p_read14_int_reg <= p_read14;
        p_read15_int_reg <= p_read15;
        p_read16_int_reg <= p_read16;
        p_read17_int_reg <= p_read17;
        p_read1_int_reg <= p_read1;
        p_read2_int_reg <= p_read2;
        p_read3_int_reg <= p_read3;
        p_read4_int_reg <= p_read4;
        p_read5_int_reg <= p_read5;
        p_read6_int_reg <= p_read6;
        p_read7_int_reg <= p_read7;
        p_read8_int_reg <= p_read8;
        p_read9_int_reg <= p_read9;
        p_read_int_reg <= p_read;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = add_ln703_7_fu_216_p2;
    end
end

assign add_ln703_2_fu_212_p2 = ($signed(add_ln703_1_reg_356_pp0_iter2_reg) + $signed(add_ln703_reg_351_pp0_iter2_reg));

assign add_ln703_6_fu_208_p2 = ($signed(grp_fu_273_p3) + $signed(add_ln703_3_reg_361));

assign add_ln703_7_fu_216_p2 = (add_ln703_6_reg_371 + add_ln703_2_fu_212_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

endmodule //window_macc
