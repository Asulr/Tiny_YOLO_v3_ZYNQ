-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_acc_top is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_a_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_a_TVALID : IN STD_LOGIC;
    inStream_a_TREADY : OUT STD_LOGIC;
    inStream_a_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_a_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_a_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_a_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_a_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_a_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    inStream_b_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_b_TVALID : IN STD_LOGIC;
    inStream_b_TREADY : OUT STD_LOGIC;
    inStream_b_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_b_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_b_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_b_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_b_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_b_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of yolo_acc_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yolo_acc_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.033000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=692,HLS_SYN_LUT=1248,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_a_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_a_V_data_0_vld_in : STD_LOGIC;
    signal inStream_a_V_data_0_vld_out : STD_LOGIC;
    signal inStream_a_V_data_0_ack_in : STD_LOGIC;
    signal inStream_a_V_data_0_ack_out : STD_LOGIC;
    signal inStream_a_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_a_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_a_V_data_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_data_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_data_0_sel : STD_LOGIC;
    signal inStream_a_V_data_0_load_A : STD_LOGIC;
    signal inStream_a_V_data_0_load_B : STD_LOGIC;
    signal inStream_a_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_data_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_keep_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_a_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_strb_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_a_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_a_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_a_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_a_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_user_V_0_sel : STD_LOGIC;
    signal inStream_a_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_a_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_a_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_a_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_id_V_0_sel : STD_LOGIC;
    signal inStream_a_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_a_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_a_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_a_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_a_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_b_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_b_V_data_0_vld_in : STD_LOGIC;
    signal inStream_b_V_data_0_vld_out : STD_LOGIC;
    signal inStream_b_V_data_0_ack_in : STD_LOGIC;
    signal inStream_b_V_data_0_ack_out : STD_LOGIC;
    signal inStream_b_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_b_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_b_V_data_0_sel_rd : STD_LOGIC := '0';
    signal inStream_b_V_data_0_sel_wr : STD_LOGIC := '0';
    signal inStream_b_V_data_0_sel : STD_LOGIC;
    signal inStream_b_V_data_0_load_A : STD_LOGIC;
    signal inStream_b_V_data_0_load_B : STD_LOGIC;
    signal inStream_b_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_b_V_data_0_state_cmp_full : STD_LOGIC;
    signal inStream_b_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_b_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_b_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_vld_in : STD_LOGIC;
    signal outStream_V_data_1_vld_out : STD_LOGIC;
    signal outStream_V_data_1_ack_in : STD_LOGIC;
    signal outStream_V_data_1_ack_out : STD_LOGIC;
    signal outStream_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_1_sel : STD_LOGIC;
    signal outStream_V_data_1_load_A : STD_LOGIC;
    signal outStream_V_data_1_load_B : STD_LOGIC;
    signal outStream_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal input_h_V : STD_LOGIC_VECTOR (5 downto 0);
    signal input_w_V : STD_LOGIC_VECTOR (5 downto 0);
    signal input_w_V_0_data_reg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal input_w_V_0_vld_reg : STD_LOGIC := '0';
    signal input_w_V_0_ack_out : STD_LOGIC;
    signal inStream_a_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln18_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_b_TDATA_blk_n : STD_LOGIC;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_h_V_read_reg_798 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_w_V_read_reg_804 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln1354_fu_234_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1354_reg_809 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1354_1_fu_243_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1354_1_reg_814 : STD_LOGIC_VECTOR (6 downto 0);
    signal row_idx_fu_254_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_idx_reg_822 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3 : BOOLEAN;
    signal icmp_ln35_2_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_2_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_idx_fu_274_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_idx_reg_835 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln35_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_ch_idx_fu_300_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_ch_idx_reg_848 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal tmp_last_V_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_2_fu_785_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_op_assign_reg_197 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_op_assign_1_reg_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_ch_idx_0_reg_219 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1354_fu_230_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1354_1_fu_240_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1598_fu_260_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_fu_280_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln35_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_407_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_411_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_415_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_6_fu_429_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_473_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_481_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_339_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_377_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_1_fu_497_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_1_fu_501_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_505_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_10_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_511_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_563_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_571_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_fu_349_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_fu_387_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_2_fu_587_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_2_fu_591_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_595_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_12_fu_609_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_653_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_2_fu_661_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_13_fu_359_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_397_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_3_fu_677_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_3_fu_681_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_685_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_15_fu_699_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_7_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_691_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_743_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_3_fu_751_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln35_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_sub_data_3_s_fu_759_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_2_s_fu_669_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_1_s_fu_579_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_0_s_fu_489_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component yolo_acc_top_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_h_V : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_w_V : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    yolo_acc_top_CTRL_BUS_s_axi_U : component yolo_acc_top_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_h_V => input_h_V,
        input_w_V => input_w_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    inStream_a_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_data_0_ack_out = ap_const_logic_1) and (inStream_a_V_data_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_data_0_sel_rd <= not(inStream_a_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_data_0_ack_in = ap_const_logic_1) and (inStream_a_V_data_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_data_0_sel_wr <= not(inStream_a_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_data_0_state = ap_const_lv2_2) and (inStream_a_V_data_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_data_0_state = ap_const_lv2_3) and (inStream_a_V_data_0_vld_in = ap_const_logic_0) and (inStream_a_V_data_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_data_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_data_0_state = ap_const_lv2_1) and (inStream_a_V_data_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_data_0_state = ap_const_lv2_3) and (inStream_a_V_data_0_ack_out = ap_const_logic_0) and (inStream_a_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_data_0_vld_in = ap_const_logic_0) and (inStream_a_V_data_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_data_0_ack_out = ap_const_logic_0) and (inStream_a_V_data_0_vld_in = ap_const_logic_1))) and (inStream_a_V_data_0_state = ap_const_lv2_3)) or ((inStream_a_V_data_0_state = ap_const_lv2_1) and (inStream_a_V_data_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_data_0_state = ap_const_lv2_2) and (inStream_a_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_data_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_dest_V_0_sel_rd <= not(inStream_a_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_dest_V_0_sel_wr <= not(inStream_a_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_dest_V_0_state = ap_const_lv2_2) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_3) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_dest_V_0_state = ap_const_lv2_1) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_3) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_1) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_2) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_id_V_0_sel_rd <= not(inStream_a_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_id_V_0_sel_wr <= not(inStream_a_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_id_V_0_state = ap_const_lv2_2) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_3) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_id_V_0_state = ap_const_lv2_1) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_3) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_1) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_2) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_keep_V_0_sel_rd <= not(inStream_a_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_keep_V_0_vld_in = ap_const_logic_1) and (inStream_a_V_keep_V_0_ack_in = ap_const_logic_1))) then 
                                        inStream_a_V_keep_V_0_sel_wr <= not(inStream_a_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_keep_V_0_state = ap_const_lv2_2) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_3) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_keep_V_0_state = ap_const_lv2_1) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_3) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_1) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_2) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_strb_V_0_sel_rd <= not(inStream_a_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_strb_V_0_sel_wr <= not(inStream_a_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_strb_V_0_state = ap_const_lv2_2) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_3) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_strb_V_0_state = ap_const_lv2_1) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_3) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_1) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_2) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_user_V_0_sel_rd <= not(inStream_a_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_user_V_0_sel_wr <= not(inStream_a_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_user_V_0_state = ap_const_lv2_2) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_3) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_user_V_0_state = ap_const_lv2_1) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_3) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_1) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_2) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_b_V_data_0_ack_out = ap_const_logic_1) and (inStream_b_V_data_0_vld_out = ap_const_logic_1))) then 
                                        inStream_b_V_data_0_sel_rd <= not(inStream_b_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_b_V_data_0_ack_in = ap_const_logic_1) and (inStream_b_V_data_0_vld_in = ap_const_logic_1))) then 
                                        inStream_b_V_data_0_sel_wr <= not(inStream_b_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_b_V_data_0_state = ap_const_lv2_2) and (inStream_b_V_data_0_vld_in = ap_const_logic_0)) or ((inStream_b_V_data_0_state = ap_const_lv2_3) and (inStream_b_V_data_0_vld_in = ap_const_logic_0) and (inStream_b_V_data_0_ack_out = ap_const_logic_1)))) then 
                    inStream_b_V_data_0_state <= ap_const_lv2_2;
                elsif ((((inStream_b_V_data_0_state = ap_const_lv2_1) and (inStream_b_V_data_0_ack_out = ap_const_logic_0)) or ((inStream_b_V_data_0_state = ap_const_lv2_3) and (inStream_b_V_data_0_ack_out = ap_const_logic_0) and (inStream_b_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_b_V_data_0_vld_in = ap_const_logic_0) and (inStream_b_V_data_0_ack_out = ap_const_logic_1))) and not(((inStream_b_V_data_0_ack_out = ap_const_logic_0) and (inStream_b_V_data_0_vld_in = ap_const_logic_1))) and (inStream_b_V_data_0_state = ap_const_lv2_3)) or ((inStream_b_V_data_0_state = ap_const_lv2_1) and (inStream_b_V_data_0_ack_out = ap_const_logic_1)) or ((inStream_b_V_data_0_state = ap_const_lv2_2) and (inStream_b_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_data_0_state <= ap_const_lv2_3;
                else 
                    inStream_b_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_b_V_dest_V_0_state = ap_const_lv2_2) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_3) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_b_V_dest_V_0_state = ap_const_lv2_1) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_3) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_b_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_b_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_b_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_1) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_2) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_out = ap_const_logic_1) and (outStream_V_data_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_rd <= not(outStream_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_in = ap_const_logic_1) and (outStream_V_data_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_wr <= not(outStream_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1))) and (outStream_V_data_1_state = ap_const_lv2_3)) or ((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_V_data_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_op_assign_1_reg_208 <= col_idx_reg_835;
            elsif ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (icmp_ln14_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_op_assign_1_reg_208 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_op_assign_reg_197 <= row_idx_reg_822;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_op_assign_reg_197 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    input_ch_idx_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                input_ch_idx_0_reg_219 <= ap_const_lv4_0;
            elsif (((outStream_V_data_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                input_ch_idx_0_reg_219 <= input_ch_idx_reg_848;
            end if; 
        end if;
    end process;

    input_w_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln1354_1_reg_814 <= add_ln1354_1_fu_243_p2;
                add_ln1354_reg_809 <= add_ln1354_fu_234_p2;
                input_w_V_read_reg_804 <= input_w_V_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                col_idx_reg_835 <= col_idx_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (icmp_ln14_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln35_2_reg_827 <= icmp_ln35_2_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_data_0_load_A = ap_const_logic_1)) then
                inStream_a_V_data_0_payload_A <= inStream_a_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_data_0_load_B = ap_const_logic_1)) then
                inStream_a_V_data_0_payload_B <= inStream_a_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_dest_V_0_payload_A <= inStream_a_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_dest_V_0_payload_B <= inStream_a_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_id_V_0_payload_A <= inStream_a_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_id_V_0_payload_B <= inStream_a_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_keep_V_0_payload_A <= inStream_a_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_keep_V_0_payload_B <= inStream_a_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_strb_V_0_payload_A <= inStream_a_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_strb_V_0_payload_B <= inStream_a_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_user_V_0_payload_A <= inStream_a_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_user_V_0_payload_B <= inStream_a_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_b_V_data_0_load_A = ap_const_logic_1)) then
                inStream_b_V_data_0_payload_A <= inStream_b_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_b_V_data_0_load_B = ap_const_logic_1)) then
                inStream_b_V_data_0_payload_B <= inStream_b_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                input_ch_idx_reg_848 <= input_ch_idx_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_h_V_read_reg_798 <= input_h_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_w_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_w_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (input_w_V_0_vld_reg = ap_const_logic_1)))) then
                input_w_V_0_data_reg <= input_w_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                or_ln35_reg_840 <= or_ln35_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_A = ap_const_logic_1)) then
                outStream_V_data_1_payload_A <= tmp_data_2_fu_785_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_B = ap_const_logic_1)) then
                outStream_V_data_1_payload_B <= tmp_data_2_fu_785_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= inStream_a_V_dest_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= inStream_a_V_dest_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= inStream_a_V_id_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= inStream_a_V_id_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= inStream_a_V_keep_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= inStream_a_V_keep_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= tmp_last_V_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= tmp_last_V_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= inStream_a_V_strb_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= inStream_a_V_strb_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= inStream_a_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= inStream_a_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                row_idx_reg_822 <= row_idx_fu_254_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, outStream_TREADY, outStream_V_data_1_ack_in, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_CS_fsm_state6, ap_CS_fsm_state3, icmp_ln14_fu_249_p2, ap_CS_fsm_state4, icmp_ln16_fu_269_p2, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (icmp_ln14_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (icmp_ln14_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((outStream_V_data_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1354_1_fu_243_p2 <= std_logic_vector(unsigned(zext_ln1354_1_fu_240_p1) + unsigned(ap_const_lv7_7F));
    add_ln1354_fu_234_p2 <= std_logic_vector(unsigned(zext_ln1354_fu_230_p1) + unsigned(ap_const_lv7_7F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state3_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state)
    begin
                ap_block_state3 <= ((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state5_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, icmp_ln18_fu_294_p2)
    begin
                ap_block_state5 <= (((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state5_io_assign_proc : process(outStream_V_data_1_ack_in, icmp_ln18_fu_294_p2)
    begin
                ap_block_state5_io <= ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (outStream_V_data_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state3, icmp_ln14_fu_249_p2)
    begin
        if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (icmp_ln14_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state3, icmp_ln14_fu_249_p2)
    begin
        if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (icmp_ln14_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_idx_fu_274_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_208) + unsigned(ap_const_lv6_1));
    icmp_ln14_fu_249_p2 <= "1" when (i_op_assign_reg_197 = input_h_V_read_reg_798) else "0";
    icmp_ln16_fu_269_p2 <= "1" when (i_op_assign_1_reg_208 = input_w_V_read_reg_804) else "0";
    icmp_ln18_fu_294_p2 <= "1" when (input_ch_idx_0_reg_219 = ap_const_lv4_8) else "0";
    icmp_ln35_1_fu_284_p2 <= "0" when (zext_ln18_fu_280_p1 = add_ln1354_reg_809) else "1";
    icmp_ln35_2_fu_264_p2 <= "0" when (zext_ln1598_fu_260_p1 = add_ln1354_1_reg_814) else "1";
    icmp_ln35_fu_767_p2 <= "0" when (input_ch_idx_0_reg_219 = ap_const_lv4_7) else "1";

    inStream_a_TDATA_blk_n_assign_proc : process(inStream_a_V_data_0_state, ap_CS_fsm_state5, icmp_ln18_fu_294_p2)
    begin
        if (((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_a_TDATA_blk_n <= inStream_a_V_data_0_state(0);
        else 
            inStream_a_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_a_TREADY <= inStream_a_V_dest_V_0_state(1);
    inStream_a_V_data_0_ack_in <= inStream_a_V_data_0_state(1);

    inStream_a_V_data_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_a_V_data_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_data_0_data_out_assign_proc : process(inStream_a_V_data_0_payload_A, inStream_a_V_data_0_payload_B, inStream_a_V_data_0_sel)
    begin
        if ((inStream_a_V_data_0_sel = ap_const_logic_1)) then 
            inStream_a_V_data_0_data_out <= inStream_a_V_data_0_payload_B;
        else 
            inStream_a_V_data_0_data_out <= inStream_a_V_data_0_payload_A;
        end if; 
    end process;

    inStream_a_V_data_0_load_A <= (inStream_a_V_data_0_state_cmp_full and not(inStream_a_V_data_0_sel_wr));
    inStream_a_V_data_0_load_B <= (inStream_a_V_data_0_state_cmp_full and inStream_a_V_data_0_sel_wr);
    inStream_a_V_data_0_sel <= inStream_a_V_data_0_sel_rd;
    inStream_a_V_data_0_state_cmp_full <= '0' when (inStream_a_V_data_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_data_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_data_0_vld_out <= inStream_a_V_data_0_state(0);
    inStream_a_V_dest_V_0_ack_in <= inStream_a_V_dest_V_0_state(1);

    inStream_a_V_dest_V_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_a_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_dest_V_0_data_out_assign_proc : process(inStream_a_V_dest_V_0_payload_A, inStream_a_V_dest_V_0_payload_B, inStream_a_V_dest_V_0_sel)
    begin
        if ((inStream_a_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_dest_V_0_data_out <= inStream_a_V_dest_V_0_payload_B;
        else 
            inStream_a_V_dest_V_0_data_out <= inStream_a_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_dest_V_0_load_A <= (inStream_a_V_dest_V_0_state_cmp_full and not(inStream_a_V_dest_V_0_sel_wr));
    inStream_a_V_dest_V_0_load_B <= (inStream_a_V_dest_V_0_state_cmp_full and inStream_a_V_dest_V_0_sel_wr);
    inStream_a_V_dest_V_0_sel <= inStream_a_V_dest_V_0_sel_rd;
    inStream_a_V_dest_V_0_state_cmp_full <= '0' when (inStream_a_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_dest_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_dest_V_0_vld_out <= inStream_a_V_dest_V_0_state(0);
    inStream_a_V_id_V_0_ack_in <= inStream_a_V_id_V_0_state(1);

    inStream_a_V_id_V_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_a_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_id_V_0_data_out_assign_proc : process(inStream_a_V_id_V_0_payload_A, inStream_a_V_id_V_0_payload_B, inStream_a_V_id_V_0_sel)
    begin
        if ((inStream_a_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_id_V_0_data_out <= inStream_a_V_id_V_0_payload_B;
        else 
            inStream_a_V_id_V_0_data_out <= inStream_a_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_id_V_0_load_A <= (inStream_a_V_id_V_0_state_cmp_full and not(inStream_a_V_id_V_0_sel_wr));
    inStream_a_V_id_V_0_load_B <= (inStream_a_V_id_V_0_state_cmp_full and inStream_a_V_id_V_0_sel_wr);
    inStream_a_V_id_V_0_sel <= inStream_a_V_id_V_0_sel_rd;
    inStream_a_V_id_V_0_state_cmp_full <= '0' when (inStream_a_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_id_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_id_V_0_vld_out <= inStream_a_V_id_V_0_state(0);
    inStream_a_V_keep_V_0_ack_in <= inStream_a_V_keep_V_0_state(1);

    inStream_a_V_keep_V_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_a_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_keep_V_0_data_out_assign_proc : process(inStream_a_V_keep_V_0_payload_A, inStream_a_V_keep_V_0_payload_B, inStream_a_V_keep_V_0_sel)
    begin
        if ((inStream_a_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_keep_V_0_data_out <= inStream_a_V_keep_V_0_payload_B;
        else 
            inStream_a_V_keep_V_0_data_out <= inStream_a_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_keep_V_0_load_A <= (inStream_a_V_keep_V_0_state_cmp_full and not(inStream_a_V_keep_V_0_sel_wr));
    inStream_a_V_keep_V_0_load_B <= (inStream_a_V_keep_V_0_state_cmp_full and inStream_a_V_keep_V_0_sel_wr);
    inStream_a_V_keep_V_0_sel <= inStream_a_V_keep_V_0_sel_rd;
    inStream_a_V_keep_V_0_state_cmp_full <= '0' when (inStream_a_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_keep_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_keep_V_0_vld_out <= inStream_a_V_keep_V_0_state(0);
    inStream_a_V_strb_V_0_ack_in <= inStream_a_V_strb_V_0_state(1);

    inStream_a_V_strb_V_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_a_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_strb_V_0_data_out_assign_proc : process(inStream_a_V_strb_V_0_payload_A, inStream_a_V_strb_V_0_payload_B, inStream_a_V_strb_V_0_sel)
    begin
        if ((inStream_a_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_strb_V_0_data_out <= inStream_a_V_strb_V_0_payload_B;
        else 
            inStream_a_V_strb_V_0_data_out <= inStream_a_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_strb_V_0_load_A <= (inStream_a_V_strb_V_0_state_cmp_full and not(inStream_a_V_strb_V_0_sel_wr));
    inStream_a_V_strb_V_0_load_B <= (inStream_a_V_strb_V_0_state_cmp_full and inStream_a_V_strb_V_0_sel_wr);
    inStream_a_V_strb_V_0_sel <= inStream_a_V_strb_V_0_sel_rd;
    inStream_a_V_strb_V_0_state_cmp_full <= '0' when (inStream_a_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_strb_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_strb_V_0_vld_out <= inStream_a_V_strb_V_0_state(0);
    inStream_a_V_user_V_0_ack_in <= inStream_a_V_user_V_0_state(1);

    inStream_a_V_user_V_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_a_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_user_V_0_data_out_assign_proc : process(inStream_a_V_user_V_0_payload_A, inStream_a_V_user_V_0_payload_B, inStream_a_V_user_V_0_sel)
    begin
        if ((inStream_a_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_user_V_0_data_out <= inStream_a_V_user_V_0_payload_B;
        else 
            inStream_a_V_user_V_0_data_out <= inStream_a_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_user_V_0_load_A <= (inStream_a_V_user_V_0_state_cmp_full and not(inStream_a_V_user_V_0_sel_wr));
    inStream_a_V_user_V_0_load_B <= (inStream_a_V_user_V_0_state_cmp_full and inStream_a_V_user_V_0_sel_wr);
    inStream_a_V_user_V_0_sel <= inStream_a_V_user_V_0_sel_rd;
    inStream_a_V_user_V_0_state_cmp_full <= '0' when (inStream_a_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_user_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_user_V_0_vld_out <= inStream_a_V_user_V_0_state(0);

    inStream_b_TDATA_blk_n_assign_proc : process(inStream_b_V_data_0_state, ap_CS_fsm_state5, icmp_ln18_fu_294_p2)
    begin
        if (((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_b_TDATA_blk_n <= inStream_b_V_data_0_state(0);
        else 
            inStream_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_b_TREADY <= inStream_b_V_dest_V_0_state(1);
    inStream_b_V_data_0_ack_in <= inStream_b_V_data_0_state(1);

    inStream_b_V_data_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_b_V_data_0_ack_out <= ap_const_logic_1;
        else 
            inStream_b_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_b_V_data_0_data_out_assign_proc : process(inStream_b_V_data_0_payload_A, inStream_b_V_data_0_payload_B, inStream_b_V_data_0_sel)
    begin
        if ((inStream_b_V_data_0_sel = ap_const_logic_1)) then 
            inStream_b_V_data_0_data_out <= inStream_b_V_data_0_payload_B;
        else 
            inStream_b_V_data_0_data_out <= inStream_b_V_data_0_payload_A;
        end if; 
    end process;

    inStream_b_V_data_0_load_A <= (inStream_b_V_data_0_state_cmp_full and not(inStream_b_V_data_0_sel_wr));
    inStream_b_V_data_0_load_B <= (inStream_b_V_data_0_state_cmp_full and inStream_b_V_data_0_sel_wr);
    inStream_b_V_data_0_sel <= inStream_b_V_data_0_sel_rd;
    inStream_b_V_data_0_state_cmp_full <= '0' when (inStream_b_V_data_0_state = ap_const_lv2_1) else '1';
    inStream_b_V_data_0_vld_in <= inStream_b_TVALID;
    inStream_b_V_data_0_vld_out <= inStream_b_V_data_0_state(0);

    inStream_b_V_dest_V_0_ack_out_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inStream_b_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_b_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    inStream_b_V_dest_V_0_vld_in <= inStream_b_TVALID;
    input_ch_idx_fu_300_p2 <= std_logic_vector(unsigned(input_ch_idx_0_reg_219) + unsigned(ap_const_lv4_1));

    input_w_V_0_ack_out_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln14_fu_249_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (icmp_ln14_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            input_w_V_0_ack_out <= ap_const_logic_1;
        else 
            input_w_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_339_p4),17));

        lhs_V_2_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_349_p4),17));

        lhs_V_3_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_359_p4),17));

        lhs_V_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_335_p1),17));

    or_ln340_1_fu_557_p2 <= (xor_ln340_1_fu_551_p2 or p_Result_3_fu_525_p3);
    or_ln340_2_fu_647_p2 <= (xor_ln340_2_fu_641_p2 or p_Result_5_fu_615_p3);
    or_ln340_3_fu_737_p2 <= (xor_ln340_3_fu_731_p2 or p_Result_7_fu_705_p3);
    or_ln340_fu_467_p2 <= (xor_ln340_fu_461_p2 or p_Result_1_fu_435_p3);
    or_ln35_1_fu_773_p2 <= (or_ln35_reg_840 or icmp_ln35_fu_767_p2);
    or_ln35_fu_289_p2 <= (icmp_ln35_2_reg_827 or icmp_ln35_1_fu_284_p2);
    outStream_TDATA <= outStream_V_data_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_1_state, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_1_ack_in <= outStream_V_data_1_state(1);
    outStream_V_data_1_ack_out <= outStream_TREADY;

    outStream_V_data_1_data_out_assign_proc : process(outStream_V_data_1_payload_A, outStream_V_data_1_payload_B, outStream_V_data_1_sel)
    begin
        if ((outStream_V_data_1_sel = ap_const_logic_1)) then 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_B;
        else 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_A;
        end if; 
    end process;

    outStream_V_data_1_load_A <= (outStream_V_data_1_state_cmp_full and not(outStream_V_data_1_sel_wr));
    outStream_V_data_1_load_B <= (outStream_V_data_1_state_cmp_full and outStream_V_data_1_sel_wr);
    outStream_V_data_1_sel <= outStream_V_data_1_sel_rd;
    outStream_V_data_1_state_cmp_full <= '0' when (outStream_V_data_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_1_vld_in_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_data_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_1_vld_out <= outStream_V_data_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln18_fu_294_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln18_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    p_Result_1_fu_435_p3 <= p_Val2_6_fu_429_p2(15 downto 15);
    p_Result_2_fu_511_p3 <= ret_V_1_fu_505_p2(16 downto 16);
    p_Result_3_fu_525_p3 <= p_Val2_10_fu_519_p2(15 downto 15);
    p_Result_4_fu_601_p3 <= ret_V_2_fu_595_p2(16 downto 16);
    p_Result_5_fu_615_p3 <= p_Val2_12_fu_609_p2(15 downto 15);
    p_Result_6_fu_691_p3 <= ret_V_3_fu_685_p2(16 downto 16);
    p_Result_7_fu_705_p3 <= p_Val2_15_fu_699_p2(15 downto 15);
    p_Result_s_fu_421_p3 <= ret_V_fu_415_p2(16 downto 16);
    p_Val2_10_fu_519_p2 <= std_logic_vector(signed(p_Val2_5_fu_377_p4) + signed(p_Val2_4_fu_339_p4));
    p_Val2_12_fu_609_p2 <= std_logic_vector(signed(p_Val2_9_fu_387_p4) + signed(p_Val2_8_fu_349_p4));
    p_Val2_13_fu_359_p4 <= inStream_a_V_data_0_data_out(63 downto 48);
    p_Val2_15_fu_699_p2 <= std_logic_vector(signed(p_Val2_2_fu_397_p4) + signed(p_Val2_13_fu_359_p4));
    p_Val2_1_fu_373_p1 <= inStream_b_V_data_0_data_out(16 - 1 downto 0);
    p_Val2_2_fu_397_p4 <= inStream_b_V_data_0_data_out(63 downto 48);
    p_Val2_4_fu_339_p4 <= inStream_a_V_data_0_data_out(31 downto 16);
    p_Val2_5_fu_377_p4 <= inStream_b_V_data_0_data_out(31 downto 16);
    p_Val2_6_fu_429_p2 <= std_logic_vector(signed(p_Val2_1_fu_373_p1) + signed(p_Val2_s_fu_335_p1));
    p_Val2_8_fu_349_p4 <= inStream_a_V_data_0_data_out(47 downto 32);
    p_Val2_9_fu_387_p4 <= inStream_b_V_data_0_data_out(47 downto 32);
    p_Val2_s_fu_335_p1 <= inStream_a_V_data_0_data_out(16 - 1 downto 0);
    ret_V_1_fu_505_p2 <= std_logic_vector(signed(lhs_V_1_fu_497_p1) + signed(rhs_V_1_fu_501_p1));
    ret_V_2_fu_595_p2 <= std_logic_vector(signed(lhs_V_2_fu_587_p1) + signed(rhs_V_2_fu_591_p1));
    ret_V_3_fu_685_p2 <= std_logic_vector(signed(lhs_V_3_fu_677_p1) + signed(rhs_V_3_fu_681_p1));
    ret_V_fu_415_p2 <= std_logic_vector(signed(lhs_V_fu_407_p1) + signed(rhs_V_fu_411_p1));
        rhs_V_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_377_p4),17));

        rhs_V_2_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_9_fu_387_p4),17));

        rhs_V_3_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_fu_397_p4),17));

        rhs_V_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_373_p1),17));

    row_idx_fu_254_p2 <= std_logic_vector(unsigned(i_op_assign_reg_197) + unsigned(ap_const_lv6_1));
    select_ln340_1_fu_563_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_5_fu_545_p2(0) = '1') else 
        p_Val2_10_fu_519_p2;
    select_ln340_2_fu_653_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_6_fu_635_p2(0) = '1') else 
        p_Val2_12_fu_609_p2;
    select_ln340_3_fu_743_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_7_fu_725_p2(0) = '1') else 
        p_Val2_15_fu_699_p2;
    select_ln340_fu_473_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_4_fu_455_p2(0) = '1') else 
        p_Val2_6_fu_429_p2;
    select_ln388_1_fu_571_p3 <= 
        ap_const_lv16_8000 when (underflow_1_fu_539_p2(0) = '1') else 
        p_Val2_10_fu_519_p2;
    select_ln388_2_fu_661_p3 <= 
        ap_const_lv16_8000 when (underflow_2_fu_629_p2(0) = '1') else 
        p_Val2_12_fu_609_p2;
    select_ln388_3_fu_751_p3 <= 
        ap_const_lv16_8000 when (underflow_3_fu_719_p2(0) = '1') else 
        p_Val2_15_fu_699_p2;
    select_ln388_fu_481_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_449_p2(0) = '1') else 
        p_Val2_6_fu_429_p2;
    tmp_data_2_fu_785_p5 <= (((tmp_data_sub_data_3_s_fu_759_p3 & tmp_data_sub_data_2_s_fu_669_p3) & tmp_data_sub_data_1_s_fu_579_p3) & tmp_data_sub_data_0_s_fu_489_p3);
    tmp_data_sub_data_0_s_fu_489_p3 <= 
        select_ln340_fu_473_p3 when (or_ln340_fu_467_p2(0) = '1') else 
        select_ln388_fu_481_p3;
    tmp_data_sub_data_1_s_fu_579_p3 <= 
        select_ln340_1_fu_563_p3 when (or_ln340_1_fu_557_p2(0) = '1') else 
        select_ln388_1_fu_571_p3;
    tmp_data_sub_data_2_s_fu_669_p3 <= 
        select_ln340_2_fu_653_p3 when (or_ln340_2_fu_647_p2(0) = '1') else 
        select_ln388_2_fu_661_p3;
    tmp_data_sub_data_3_s_fu_759_p3 <= 
        select_ln340_3_fu_743_p3 when (or_ln340_3_fu_737_p2(0) = '1') else 
        select_ln388_3_fu_751_p3;
    tmp_last_V_fu_778_p2 <= (or_ln35_1_fu_773_p2 xor ap_const_lv1_1);
    underflow_1_fu_539_p2 <= (xor_ln786_1_fu_533_p2 and p_Result_2_fu_511_p3);
    underflow_2_fu_629_p2 <= (xor_ln786_2_fu_623_p2 and p_Result_4_fu_601_p3);
    underflow_3_fu_719_p2 <= (xor_ln786_3_fu_713_p2 and p_Result_6_fu_691_p3);
    underflow_fu_449_p2 <= (xor_ln786_fu_443_p2 and p_Result_s_fu_421_p3);
    xor_ln340_1_fu_551_p2 <= (p_Result_2_fu_511_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_641_p2 <= (p_Result_4_fu_601_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_731_p2 <= (p_Result_6_fu_691_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_455_p2 <= (p_Result_s_fu_421_p3 xor p_Result_1_fu_435_p3);
    xor_ln340_5_fu_545_p2 <= (p_Result_3_fu_525_p3 xor p_Result_2_fu_511_p3);
    xor_ln340_6_fu_635_p2 <= (p_Result_5_fu_615_p3 xor p_Result_4_fu_601_p3);
    xor_ln340_7_fu_725_p2 <= (p_Result_7_fu_705_p3 xor p_Result_6_fu_691_p3);
    xor_ln340_fu_461_p2 <= (p_Result_s_fu_421_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_533_p2 <= (p_Result_3_fu_525_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_623_p2 <= (p_Result_5_fu_615_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_713_p2 <= (p_Result_7_fu_705_p3 xor ap_const_lv1_1);
    xor_ln786_fu_443_p2 <= (p_Result_1_fu_435_p3 xor ap_const_lv1_1);
    zext_ln1354_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_h_V_read_reg_798),7));
    zext_ln1354_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_w_V_0_data_reg),7));
    zext_ln1598_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_197),7));
    zext_ln18_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_reg_208),7));
end behav;
