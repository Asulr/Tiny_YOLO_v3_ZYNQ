// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _post_process_unit_HH_
#define _post_process_unit_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "yolo_acc_top_mul_mul_6ns_16s_22_1_0.h"

namespace ap_rtl {

struct post_process_unit : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<16> > data_in_V;
    sc_in< sc_lv<16> > bias_V;
    sc_in< sc_lv<1> > bias_en_V;
    sc_in< sc_lv<1> > leaky_V;
    sc_out< sc_lv<16> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    post_process_unit(sc_module_name name);
    SC_HAS_PROCESS(post_process_unit);

    ~post_process_unit();

    sc_trace_file* mVcdFile;

    yolo_acc_top_mul_mul_6ns_16s_22_1_0<1,1,6,16,22>* yolo_acc_top_mul_mul_6ns_16s_22_1_0_U1;
    sc_signal< sc_lv<1> > leaky_V_read_reg_364;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > leaky_V_read_reg_364_pp0_iter1_reg;
    sc_signal< sc_lv<1> > bias_en_V_read_reg_369;
    sc_signal< sc_lv<1> > bias_en_V_read_reg_369_pp0_iter1_reg;
    sc_signal< sc_lv<16> > data_in_V_read_reg_375;
    sc_signal< sc_lv<16> > data_in_V_read_reg_375_pp0_iter1_reg;
    sc_signal< sc_lv<16> > activated_output_V_fu_152_p3;
    sc_signal< sc_lv<16> > activated_output_V_reg_380;
    sc_signal< sc_lv<16> > activated_output_V_reg_380_pp0_iter1_reg;
    sc_signal< sc_lv<22> > r_V_fu_355_p2;
    sc_signal< sc_lv<22> > r_V_reg_387;
    sc_signal< sc_lv<7> > trunc_ln718_fu_163_p1;
    sc_signal< sc_lv<7> > trunc_ln718_reg_395;
    sc_signal< sc_lv<1> > p_Result_9_reg_400;
    sc_signal< sc_lv<1> > Range2_all_ones_reg_406;
    sc_signal< sc_lv<16> > lhs_V_fu_70_p0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<16> > rhs_V_fu_74_p0;
    sc_signal< sc_lv<17> > rhs_V_fu_74_p1;
    sc_signal< sc_lv<17> > lhs_V_fu_70_p1;
    sc_signal< sc_lv<17> > ret_V_fu_78_p2;
    sc_signal< sc_lv<16> > p_Val2_16_fu_92_p0;
    sc_signal< sc_lv<16> > p_Val2_16_fu_92_p1;
    sc_signal< sc_lv<16> > p_Val2_16_fu_92_p2;
    sc_signal< sc_lv<1> > p_Result_8_fu_98_p3;
    sc_signal< sc_lv<1> > p_Result_s_fu_84_p3;
    sc_signal< sc_lv<1> > xor_ln786_fu_106_p2;
    sc_signal< sc_lv<1> > xor_ln340_fu_124_p2;
    sc_signal< sc_lv<1> > xor_ln340_8_fu_118_p2;
    sc_signal< sc_lv<1> > underflow_fu_112_p2;
    sc_signal< sc_lv<1> > or_ln340_fu_130_p2;
    sc_signal< sc_lv<16> > select_ln340_fu_136_p3;
    sc_signal< sc_lv<16> > select_ln388_fu_144_p3;
    sc_signal< sc_lv<14> > trunc_ln_fu_187_p4;
    sc_signal< sc_lv<1> > r_fu_207_p2;
    sc_signal< sc_lv<1> > tmp_11_fu_200_p3;
    sc_signal< sc_lv<1> > tmp_13_fu_218_p3;
    sc_signal< sc_lv<1> > or_ln412_fu_212_p2;
    sc_signal< sc_lv<1> > and_ln415_fu_225_p2;
    sc_signal< sc_lv<15> > sext_ln713_fu_196_p1;
    sc_signal< sc_lv<15> > zext_ln415_fu_231_p1;
    sc_signal< sc_lv<15> > p_Val2_18_fu_235_p2;
    sc_signal< sc_lv<1> > tmp_14_fu_245_p3;
    sc_signal< sc_lv<1> > xor_ln416_1_fu_253_p2;
    sc_signal< sc_lv<1> > tmp_17_fu_272_p3;
    sc_signal< sc_lv<1> > xor_ln416_2_fu_285_p2;
    sc_signal< sc_lv<1> > or_ln416_1_fu_290_p2;
    sc_signal< sc_lv<1> > xor_ln779_fu_279_p2;
    sc_signal< sc_lv<1> > or_ln416_fu_296_p2;
    sc_signal< sc_lv<1> > carry_1_fu_259_p2;
    sc_signal< sc_lv<1> > p_Result_10_fu_264_p3;
    sc_signal< sc_lv<1> > deleted_ones_fu_302_p2;
    sc_signal< sc_lv<1> > and_ln781_fu_307_p2;
    sc_signal< sc_lv<1> > and_ln786_fu_312_p2;
    sc_signal< sc_lv<1> > or_ln786_fu_318_p2;
    sc_signal< sc_lv<16> > sext_ln415_fu_241_p1;
    sc_signal< sc_lv<1> > and_ln97_fu_332_p2;
    sc_signal< sc_lv<1> > tmp_fu_180_p3;
    sc_signal< sc_lv<1> > and_ln97_1_fu_336_p2;
    sc_signal< sc_lv<16> > select_ln340_4_fu_324_p3;
    sc_signal< sc_lv<16> > select_ln97_fu_342_p3;
    sc_signal< sc_lv<6> > r_V_fu_355_p0;
    sc_signal< sc_lv<16> > select_ln97_1_fu_349_p3;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<16> > data_in_V_int_reg;
    sc_signal< sc_lv<16> > bias_V_int_reg;
    sc_signal< sc_lv<1> > bias_en_V_int_reg;
    sc_signal< sc_lv<1> > leaky_V_int_reg;
    sc_signal< sc_lv<16> > ap_return_int_reg;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<16> ap_const_lv16_7FFF;
    static const sc_lv<16> ap_const_lv16_8000;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<22> ap_const_lv22_1A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_activated_output_V_fu_152_p3();
    void thread_and_ln415_fu_225_p2();
    void thread_and_ln781_fu_307_p2();
    void thread_and_ln786_fu_312_p2();
    void thread_and_ln97_1_fu_336_p2();
    void thread_and_ln97_fu_332_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_return();
    void thread_carry_1_fu_259_p2();
    void thread_deleted_ones_fu_302_p2();
    void thread_lhs_V_fu_70_p0();
    void thread_lhs_V_fu_70_p1();
    void thread_or_ln340_fu_130_p2();
    void thread_or_ln412_fu_212_p2();
    void thread_or_ln416_1_fu_290_p2();
    void thread_or_ln416_fu_296_p2();
    void thread_or_ln786_fu_318_p2();
    void thread_p_Result_10_fu_264_p3();
    void thread_p_Result_8_fu_98_p3();
    void thread_p_Result_s_fu_84_p3();
    void thread_p_Val2_16_fu_92_p0();
    void thread_p_Val2_16_fu_92_p1();
    void thread_p_Val2_16_fu_92_p2();
    void thread_p_Val2_18_fu_235_p2();
    void thread_r_V_fu_355_p0();
    void thread_r_fu_207_p2();
    void thread_ret_V_fu_78_p2();
    void thread_rhs_V_fu_74_p0();
    void thread_rhs_V_fu_74_p1();
    void thread_select_ln340_4_fu_324_p3();
    void thread_select_ln340_fu_136_p3();
    void thread_select_ln388_fu_144_p3();
    void thread_select_ln97_1_fu_349_p3();
    void thread_select_ln97_fu_342_p3();
    void thread_sext_ln415_fu_241_p1();
    void thread_sext_ln713_fu_196_p1();
    void thread_tmp_11_fu_200_p3();
    void thread_tmp_13_fu_218_p3();
    void thread_tmp_14_fu_245_p3();
    void thread_tmp_17_fu_272_p3();
    void thread_tmp_fu_180_p3();
    void thread_trunc_ln718_fu_163_p1();
    void thread_trunc_ln_fu_187_p4();
    void thread_underflow_fu_112_p2();
    void thread_xor_ln340_8_fu_118_p2();
    void thread_xor_ln340_fu_124_p2();
    void thread_xor_ln416_1_fu_253_p2();
    void thread_xor_ln416_2_fu_285_p2();
    void thread_xor_ln779_fu_279_p2();
    void thread_xor_ln786_fu_106_p2();
    void thread_zext_ln415_fu_231_p1();
};

}

using namespace ap_rtl;

#endif
