// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="yolo_max_pool_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.118500,HLS_SYN_LAT=1384491,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=1,HLS_SYN_FF=1947,HLS_SYN_LUT=3308,HLS_VERSION=2019_1}" *)

module yolo_max_pool_top (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_pp0_stage0 = 10'd128;
parameter    ap_ST_fsm_pp0_stage1 = 10'd256;
parameter    ap_ST_fsm_state18 = 10'd512;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [63:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] inStream_V_data_0_data_out;
wire    inStream_V_data_0_vld_in;
wire    inStream_V_data_0_vld_out;
wire    inStream_V_data_0_ack_in;
reg    inStream_V_data_0_ack_out;
reg   [63:0] inStream_V_data_0_payload_A;
reg   [63:0] inStream_V_data_0_payload_B;
reg    inStream_V_data_0_sel_rd;
reg    inStream_V_data_0_sel_wr;
wire    inStream_V_data_0_sel;
wire    inStream_V_data_0_load_A;
wire    inStream_V_data_0_load_B;
reg   [1:0] inStream_V_data_0_state;
wire    inStream_V_data_0_state_cmp_full;
reg   [7:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [7:0] inStream_V_keep_V_0_payload_A;
reg   [7:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [7:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [7:0] inStream_V_strb_V_0_payload_A;
reg   [7:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [63:0] outStream_V_data_1_data_out;
wire    outStream_V_data_1_vld_in;
wire    outStream_V_data_1_vld_out;
wire    outStream_V_data_1_ack_in;
wire    outStream_V_data_1_ack_out;
reg   [63:0] outStream_V_data_1_payload_A;
reg   [63:0] outStream_V_data_1_payload_B;
reg    outStream_V_data_1_sel_rd;
reg    outStream_V_data_1_sel_wr;
wire    outStream_V_data_1_sel;
wire    outStream_V_data_1_load_A;
wire    outStream_V_data_1_load_B;
reg   [1:0] outStream_V_data_1_state;
wire    outStream_V_data_1_state_cmp_full;
reg   [7:0] outStream_V_keep_V_1_data_out;
wire    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [7:0] outStream_V_keep_V_1_payload_A;
reg   [7:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [7:0] outStream_V_strb_V_1_data_out;
wire    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [7:0] outStream_V_strb_V_1_payload_A;
reg   [7:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
wire    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
wire    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
wire    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
wire    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [8:0] output_h_V;
wire   [8:0] output_w_V;
wire   [8:0] input_h_V;
wire   [8:0] input_w_V;
wire   [3:0] input_fold_ch_V;
wire   [1:0] stride_V;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln49_reg_2356;
reg   [0:0] icmp_ln49_reg_2356_pp0_iter1_reg;
reg   [0:0] select_ln209_33_reg_2583;
wire    call_ln134_write_output_fu_772_outStream_TDATA_blk_n;
reg    outStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] select_ln209_35_reg_2587;
reg   [0:0] select_ln209_35_reg_2587_pp0_iter4_reg;
reg   [25:0] indvar_flatten296_reg_618;
reg  signed [8:0] t_V_reg_630;
reg   [16:0] indvar_flatten174_reg_642;
reg   [14:0] indvar_flatten77_reg_654;
reg  signed [8:0] t_V_2_reg_666;
reg   [5:0] indvar_flatten_reg_678;
reg   [3:0] t_V_4_reg_690;
reg   [1:0] t_V_1_reg_702;
reg   [1:0] t_V_3_reg_713;
reg   [1:0] stride_V_read_reg_2129;
reg   [3:0] input_fold_ch_V_read_reg_2137;
reg   [8:0] input_w_V_read_reg_2145;
reg   [8:0] input_h_V_read_reg_2153;
reg   [8:0] output_w_V_read_reg_2160;
reg   [8:0] output_h_V_read_reg_2166;
wire   [2:0] add_ln19_fu_800_p2;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln627_fu_806_p2;
wire   [2:0] add_ln20_fu_818_p2;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln627_1_fu_824_p2;
wire   [2:0] add_ln21_fu_836_p2;
wire    ap_CS_fsm_state4;
wire   [11:0] add_ln627_2_fu_842_p2;
wire   [2:0] add_ln22_fu_854_p2;
wire    ap_CS_fsm_state5;
wire   [11:0] add_ln627_3_fu_860_p2;
wire   [5:0] mul_ln209_2_fu_878_p2;
reg   [5:0] mul_ln209_2_reg_2254;
wire   [0:0] icmp_ln22_fu_866_p2;
wire   [14:0] mul_ln209_3_fu_891_p2;
reg   [14:0] mul_ln209_3_reg_2260;
wire   [16:0] mul_ln209_4_fu_903_p2;
reg   [16:0] mul_ln209_4_reg_2267;
wire    ap_CS_fsm_state6;
wire   [8:0] zext_ln209_2_fu_909_p1;
reg   [8:0] zext_ln209_2_reg_2273;
wire    ap_CS_fsm_state7;
wire   [2:0] add_ln1354_fu_915_p2;
reg   [2:0] add_ln1354_reg_2281;
wire   [9:0] ret_V_fu_924_p2;
reg   [9:0] ret_V_reg_2287;
wire   [9:0] add_ln1354_2_fu_933_p2;
reg   [9:0] add_ln1354_2_reg_2293;
wire   [4:0] ret_V_1_fu_942_p2;
reg   [4:0] ret_V_1_reg_2299;
wire   [25:0] mul_ln209_5_fu_2123_p2;
reg   [25:0] mul_ln209_5_reg_2304;
wire   [0:0] icmp_ln99_2_fu_954_p2;
reg   [0:0] icmp_ln99_2_reg_2309;
wire   [0:0] icmp_ln123_2_fu_960_p2;
reg   [0:0] icmp_ln123_2_reg_2314;
wire   [0:0] icmp_ln887_2_fu_966_p2;
reg   [0:0] icmp_ln887_2_reg_2320;
wire   [0:0] icmp_ln61_fu_971_p2;
reg   [0:0] icmp_ln61_reg_2326;
wire   [0:0] icmp_ln58_fu_976_p2;
reg   [0:0] icmp_ln58_reg_2333;
wire   [0:0] icmp_ln55_fu_981_p2;
reg   [0:0] icmp_ln55_reg_2339;
wire   [8:0] mul_ln209_fu_990_p2;
reg   [8:0] mul_ln209_reg_2344;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state14_pp0_stage0_iter3;
wire    ap_block_state16_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] mul_ln209_1_fu_1000_p2;
reg   [8:0] mul_ln209_1_reg_2350;
wire   [0:0] icmp_ln49_fu_1005_p2;
wire  signed [8:0] out_row_V_fu_1010_p2;
reg  signed [8:0] out_row_V_reg_2360;
wire   [0:0] icmp_ln52_fu_1016_p2;
reg   [0:0] icmp_ln52_reg_2365;
wire   [8:0] mul_ln209_6_fu_1025_p2;
reg   [8:0] mul_ln209_6_reg_2383;
wire   [0:0] select_ln209_2_fu_1035_p3;
reg   [0:0] select_ln209_2_reg_2390;
wire   [0:0] icmp_ln61_1_fu_1043_p2;
reg   [0:0] icmp_ln61_1_reg_2395;
wire   [0:0] icmp_ln58_1_fu_1048_p2;
reg   [0:0] icmp_ln58_1_reg_2400;
wire   [0:0] select_ln209_10_fu_1058_p3;
reg   [0:0] select_ln209_10_reg_2405;
wire   [8:0] col_idx_V_fu_1107_p2;
reg   [8:0] col_idx_V_reg_2420;
wire    ap_block_state9_pp0_stage1_iter0;
reg    ap_predicate_op299_read_state11;
reg    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_state15_pp0_stage1_iter3;
reg    ap_block_state17_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_11001;
wire   [8:0] conv_count_V_1_fu_1130_p3;
reg   [8:0] conv_count_V_1_reg_2425;
wire   [0:0] or_ln99_1_fu_1161_p2;
reg   [0:0] or_ln99_1_reg_2430;
wire   [9:0] add_ln1353_fu_1171_p2;
reg   [9:0] add_ln1353_reg_2435;
wire   [25:0] add_ln49_fu_1177_p2;
reg   [25:0] add_ln49_reg_2440;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln209_fu_1183_p3;
reg   [1:0] select_ln209_reg_2445;
wire   [8:0] select_ln49_fu_1252_p3;
reg   [8:0] select_ln49_reg_2450;
wire   [1:0] row_stride_V_fu_1258_p2;
reg   [1:0] row_stride_V_reg_2455;
wire   [0:0] or_ln209_1_fu_1264_p2;
reg   [0:0] or_ln209_1_reg_2460;
wire   [0:0] select_ln209_12_fu_1296_p3;
reg   [0:0] select_ln209_12_reg_2468;
wire   [0:0] select_ln209_13_fu_1308_p3;
reg   [0:0] select_ln209_13_reg_2474;
wire   [0:0] select_ln209_14_fu_1320_p3;
reg   [0:0] select_ln209_14_reg_2480;
wire   [0:0] select_ln209_17_fu_1338_p3;
reg   [0:0] select_ln209_17_reg_2486;
wire   [0:0] select_ln209_22_fu_1351_p3;
reg   [0:0] select_ln209_22_reg_2491;
wire   [1:0] select_ln209_23_fu_1373_p3;
reg   [1:0] select_ln209_23_reg_2501;
wire   [8:0] mul_ln209_7_fu_1385_p2;
reg   [8:0] mul_ln209_7_reg_2506;
wire   [0:0] select_ln209_25_fu_1395_p3;
reg   [0:0] select_ln209_25_reg_2515;
wire   [0:0] select_ln209_31_fu_1403_p3;
reg   [0:0] select_ln209_31_reg_2520;
wire   [8:0] select_ln55_fu_1410_p3;
reg   [8:0] select_ln55_reg_2530;
wire   [1:0] col_stride_V_fu_1418_p2;
reg   [1:0] col_stride_V_reg_2535;
wire   [3:0] select_ln209_32_fu_1436_p3;
reg   [3:0] select_ln209_32_reg_2542;
wire   [12:0] mul_ln203_fu_1448_p2;
reg   [12:0] mul_ln203_reg_2547;
reg   [12:0] mul_ln203_reg_2547_pp0_iter1_reg;
wire   [3:0] input_ch_idx_V_fu_1454_p2;
reg   [3:0] input_ch_idx_V_reg_2558;
wire   [5:0] select_ln58_1_fu_1466_p3;
reg   [5:0] select_ln58_1_reg_2563;
wire   [14:0] select_ln55_1_fu_1480_p3;
reg   [14:0] select_ln55_1_reg_2568;
wire   [16:0] select_ln52_1_fu_1494_p3;
reg   [16:0] select_ln52_1_reg_2573;
wire   [1:0] select_ln52_fu_1534_p3;
reg   [1:0] select_ln52_reg_2578;
wire   [0:0] select_ln209_33_fu_1681_p3;
wire   [0:0] select_ln209_35_fu_1715_p3;
reg   [0:0] select_ln209_35_reg_2587_pp0_iter2_reg;
reg   [0:0] select_ln209_35_reg_2587_pp0_iter3_reg;
wire   [8:0] select_ln209_36_fu_1726_p3;
reg   [8:0] select_ln209_36_reg_2591;
reg   [8:0] select_ln209_36_reg_2591_pp0_iter2_reg;
wire   [9:0] select_ln209_37_fu_1739_p3;
reg   [9:0] select_ln209_37_reg_2597;
reg   [9:0] select_ln209_37_reg_2597_pp0_iter2_reg;
wire   [1:0] select_ln58_fu_1746_p3;
reg   [1:0] select_ln58_reg_2606;
wire  signed [63:0] sext_ln203_fu_1756_p1;
reg  signed [63:0] sext_ln203_reg_2611;
reg   [11:0] line_buff_group_0_va_5_reg_2619;
reg   [11:0] line_buff_group_1_va_5_reg_2624;
reg   [11:0] line_buff_group_2_va_5_reg_2629;
reg   [11:0] line_buff_group_3_va_5_reg_2634;
wire   [0:0] and_ln879_1_fu_1777_p2;
reg   [0:0] and_ln879_1_reg_2639;
reg   [0:0] and_ln879_1_reg_2639_pp0_iter2_reg;
reg   [0:0] and_ln879_1_reg_2639_pp0_iter3_reg;
reg   [0:0] and_ln879_1_reg_2639_pp0_iter4_reg;
reg   [11:0] line_buff_group_0_va_6_reg_2654;
reg   [11:0] line_buff_group_0_va_7_reg_2659;
reg   [11:0] line_buff_group_0_va_7_reg_2659_pp0_iter3_reg;
reg   [11:0] line_buff_group_1_va_6_reg_2674;
reg   [11:0] line_buff_group_1_va_7_reg_2679;
reg   [11:0] line_buff_group_1_va_7_reg_2679_pp0_iter3_reg;
reg   [11:0] line_buff_group_2_va_6_reg_2694;
reg   [11:0] line_buff_group_2_va_7_reg_2699;
reg   [11:0] line_buff_group_2_va_7_reg_2699_pp0_iter3_reg;
reg   [11:0] line_buff_group_3_va_6_reg_2714;
reg   [11:0] line_buff_group_3_va_7_reg_2719;
reg   [11:0] line_buff_group_3_va_7_reg_2719_pp0_iter3_reg;
reg   [7:0] tmp_keep_V_load_reg_2724;
reg   [7:0] tmp_keep_V_load_reg_2724_pp0_iter3_reg;
reg   [7:0] tmp_strb_V_load_reg_2729;
reg   [7:0] tmp_strb_V_load_reg_2729_pp0_iter3_reg;
reg   [1:0] tmp_user_V_load_reg_2734;
reg   [1:0] tmp_user_V_load_reg_2734_pp0_iter3_reg;
reg   [4:0] tmp_id_V_load_reg_2739;
reg   [4:0] tmp_id_V_load_reg_2739_pp0_iter3_reg;
reg   [5:0] tmp_dest_V_load_reg_2744;
reg   [5:0] tmp_dest_V_load_reg_2744_pp0_iter3_reg;
wire   [12:0] add_ln162_2_fu_1944_p2;
reg   [12:0] add_ln162_2_reg_2749;
wire   [12:0] add_ln162_3_fu_1966_p2;
reg   [12:0] add_ln162_3_reg_2754;
wire   [12:0] add_ln162_4_fu_1988_p2;
reg   [12:0] add_ln162_4_reg_2759;
wire   [12:0] add_ln162_5_fu_2010_p2;
reg   [12:0] add_ln162_5_reg_2764;
wire   [15:0] line_buff_group_0_va_1_q1;
reg   [15:0] window_0_val_1_V_0_reg_2769;
reg    ap_enable_reg_pp0_iter3;
wire   [15:0] line_buff_group_1_va_1_q1;
reg   [15:0] window_1_val_1_V_0_reg_2775;
wire   [15:0] line_buff_group_2_va_1_q1;
reg   [15:0] window_2_val_1_V_0_reg_2781;
wire   [15:0] line_buff_group_3_va_1_q1;
reg   [15:0] window_3_val_1_V_0_reg_2787;
reg   [15:0] window_0_val_1_V_1_reg_2813;
reg   [15:0] window_1_val_1_V_1_reg_2819;
reg   [15:0] window_2_val_1_V_1_reg_2825;
reg   [15:0] window_3_val_1_V_1_reg_2831;
wire   [15:0] line_buff_group_0_va_q1;
reg   [15:0] line_buff_group_0_va_10_reg_2837;
wire   [15:0] line_buff_group_1_va_q1;
reg   [15:0] line_buff_group_1_va_10_reg_2843;
wire   [15:0] line_buff_group_2_va_q1;
reg   [15:0] line_buff_group_2_va_10_reg_2849;
wire   [15:0] line_buff_group_3_va_q1;
reg   [15:0] line_buff_group_3_va_10_reg_2855;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg   [11:0] line_buff_group_0_va_address0;
reg    line_buff_group_0_va_ce0;
reg    line_buff_group_0_va_we0;
wire   [15:0] line_buff_group_0_va_q0;
reg   [11:0] line_buff_group_0_va_address1;
reg    line_buff_group_0_va_ce1;
reg   [11:0] line_buff_group_0_va_1_address0;
reg    line_buff_group_0_va_1_ce0;
reg    line_buff_group_0_va_1_we0;
wire   [15:0] line_buff_group_0_va_1_q0;
reg   [11:0] line_buff_group_0_va_1_address1;
reg    line_buff_group_0_va_1_ce1;
reg   [11:0] line_buff_group_1_va_address0;
reg    line_buff_group_1_va_ce0;
reg    line_buff_group_1_va_we0;
wire   [15:0] line_buff_group_1_va_q0;
reg   [11:0] line_buff_group_1_va_address1;
reg    line_buff_group_1_va_ce1;
reg   [11:0] line_buff_group_1_va_1_address0;
reg    line_buff_group_1_va_1_ce0;
reg    line_buff_group_1_va_1_we0;
wire   [15:0] line_buff_group_1_va_1_q0;
reg   [11:0] line_buff_group_1_va_1_address1;
reg    line_buff_group_1_va_1_ce1;
reg   [11:0] line_buff_group_2_va_address0;
reg    line_buff_group_2_va_ce0;
reg    line_buff_group_2_va_we0;
wire   [15:0] line_buff_group_2_va_q0;
reg   [11:0] line_buff_group_2_va_address1;
reg    line_buff_group_2_va_ce1;
reg   [11:0] line_buff_group_2_va_1_address0;
reg    line_buff_group_2_va_1_ce0;
reg    line_buff_group_2_va_1_we0;
wire   [15:0] line_buff_group_2_va_1_q0;
reg   [11:0] line_buff_group_2_va_1_address1;
reg    line_buff_group_2_va_1_ce1;
reg   [11:0] line_buff_group_3_va_address0;
reg    line_buff_group_3_va_ce0;
reg    line_buff_group_3_va_we0;
wire   [15:0] line_buff_group_3_va_q0;
reg   [11:0] line_buff_group_3_va_address1;
reg    line_buff_group_3_va_ce1;
reg   [11:0] line_buff_group_3_va_1_address0;
reg    line_buff_group_3_va_1_ce0;
reg    line_buff_group_3_va_1_we0;
wire   [15:0] line_buff_group_3_va_1_q0;
reg   [11:0] line_buff_group_3_va_1_address1;
reg    line_buff_group_3_va_1_ce1;
wire    call_ln134_write_output_fu_772_ap_start;
wire    call_ln134_write_output_fu_772_ap_done;
wire    call_ln134_write_output_fu_772_ap_idle;
wire    call_ln134_write_output_fu_772_ap_ready;
wire   [15:0] call_ln134_write_output_fu_772_val_output_0_V;
wire   [15:0] call_ln134_write_output_fu_772_val_output_1_V;
wire   [15:0] call_ln134_write_output_fu_772_val_output_2_V;
wire   [15:0] call_ln134_write_output_fu_772_val_output_3_V;
wire   [63:0] call_ln134_write_output_fu_772_outStream_TDATA;
wire    call_ln134_write_output_fu_772_outStream_TVALID;
wire    call_ln134_write_output_fu_772_outStream_TREADY;
wire   [7:0] call_ln134_write_output_fu_772_outStream_TKEEP;
wire   [7:0] call_ln134_write_output_fu_772_outStream_TSTRB;
wire   [1:0] call_ln134_write_output_fu_772_outStream_TUSER;
wire   [0:0] call_ln134_write_output_fu_772_outStream_TLAST;
wire   [4:0] call_ln134_write_output_fu_772_outStream_TID;
wire   [5:0] call_ln134_write_output_fu_772_outStream_TDEST;
reg    call_ln134_write_output_fu_772_ap_ce;
wire    ap_block_state9_pp0_stage1_iter0_ignore_call69;
reg    ap_block_state11_pp0_stage1_iter1_ignore_call69;
wire    ap_block_state13_pp0_stage1_iter2_ignore_call69;
wire    ap_block_state15_pp0_stage1_iter3_ignore_call69;
wire    ap_block_state17_pp0_stage1_iter4_ignore_call69;
reg    ap_block_pp0_stage1_11001_ignoreCallOp446;
reg   [2:0] phi_ln19_reg_530;
wire   [0:0] icmp_ln19_fu_812_p2;
reg   [11:0] phi_mul_reg_541;
reg   [2:0] phi_ln20_reg_552;
wire   [0:0] icmp_ln20_fu_830_p2;
reg   [11:0] phi_mul299_reg_563;
reg   [2:0] phi_ln21_reg_574;
wire   [0:0] icmp_ln21_fu_848_p2;
reg   [11:0] phi_mul301_reg_585;
reg   [2:0] phi_ln22_reg_596;
reg   [11:0] phi_mul303_reg_607;
reg   [25:0] ap_phi_mux_indvar_flatten296_phi_fu_622_p4;
wire    ap_block_pp0_stage0;
reg  signed [8:0] ap_phi_mux_t_V_phi_fu_634_p4;
reg   [16:0] ap_phi_mux_indvar_flatten174_phi_fu_646_p4;
reg   [14:0] ap_phi_mux_indvar_flatten77_phi_fu_658_p4;
reg  signed [8:0] ap_phi_mux_t_V_2_phi_fu_670_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_682_p4;
reg   [3:0] ap_phi_mux_t_V_4_phi_fu_694_p4;
reg   [1:0] ap_phi_mux_t_V_1_phi_fu_706_p4;
reg   [1:0] ap_phi_mux_t_V_3_phi_fu_717_p4;
reg   [15:0] ap_phi_mux_p_016_phi_fu_728_p4;
reg   [15:0] ap_phi_reg_pp0_iter1_p_016_reg_724;
wire   [15:0] ap_phi_reg_pp0_iter0_p_016_reg_724;
reg   [15:0] ap_phi_mux_p_018_phi_fu_740_p4;
reg   [15:0] ap_phi_reg_pp0_iter1_p_018_reg_736;
wire   [15:0] ap_phi_reg_pp0_iter0_p_018_reg_736;
reg   [15:0] ap_phi_mux_p_020_phi_fu_752_p4;
reg   [15:0] ap_phi_reg_pp0_iter1_p_020_reg_748;
wire   [15:0] ap_phi_reg_pp0_iter0_p_020_reg_748;
reg   [15:0] ap_phi_mux_p_0_phi_fu_764_p4;
wire   [15:0] curr_input_data_sub_s_fu_1806_p1;
reg   [15:0] ap_phi_reg_pp0_iter1_p_0_reg_760;
wire   [15:0] ap_phi_reg_pp0_iter0_p_0_reg_760;
reg    call_ln134_write_output_fu_772_ap_start_reg;
wire  signed [63:0] sext_ln162_fu_1880_p1;
wire  signed [63:0] sext_ln162_1_fu_1897_p1;
wire  signed [63:0] sext_ln162_2_fu_2015_p1;
wire  signed [63:0] sext_ln162_3_fu_2019_p1;
wire  signed [63:0] sext_ln162_4_fu_2023_p1;
wire  signed [63:0] sext_ln162_5_fu_2027_p1;
reg   [7:0] tmp_keep_V_fu_192;
reg   [7:0] tmp_strb_V_fu_196;
reg   [1:0] tmp_user_V_fu_200;
reg   [4:0] tmp_id_V_fu_204;
reg   [5:0] tmp_dest_V_fu_208;
wire   [3:0] mul_ln209_2_fu_878_p0;
wire   [1:0] mul_ln209_2_fu_878_p1;
wire   [5:0] mul_ln209_3_fu_891_p0;
wire   [8:0] mul_ln209_3_fu_891_p1;
wire   [14:0] mul_ln209_4_fu_903_p0;
wire   [1:0] mul_ln209_4_fu_903_p1;
wire   [2:0] zext_ln1354_fu_912_p1;
wire   [9:0] zext_ln1354_1_fu_921_p1;
wire   [9:0] zext_ln1354_2_fu_930_p1;
wire   [4:0] zext_ln1354_3_fu_939_p1;
wire   [1:0] mul_ln209_fu_990_p0;
wire   [9:0] zext_ln209_3_fu_986_p1;
wire   [1:0] mul_ln209_1_fu_1000_p0;
wire   [1:0] mul_ln209_6_fu_1025_p1;
wire   [9:0] zext_ln209_14_fu_1021_p1;
wire   [0:0] icmp_ln123_3_fu_1030_p2;
wire   [0:0] icmp_ln123_fu_995_p2;
wire   [0:0] icmp_ln55_1_fu_1053_p2;
wire   [8:0] zext_ln209_fu_1065_p1;
wire   [8:0] row_idx_V_fu_1073_p2;
wire   [2:0] zext_ln209_4_fu_1069_p1;
wire   [9:0] zext_ln209_5_fu_1094_p1;
wire   [8:0] zext_ln209_1_fu_1103_p1;
wire   [0:0] icmp_ln895_fu_1078_p2;
wire   [0:0] icmp_ln895_1_fu_1112_p2;
wire   [0:0] or_ln70_fu_1118_p2;
wire   [8:0] conv_count_V_fu_1124_p2;
wire   [0:0] icmp_ln887_fu_1084_p2;
wire   [0:0] icmp_ln887_1_fu_1138_p2;
wire   [0:0] icmp_ln99_fu_1089_p2;
wire   [0:0] or_ln99_fu_1155_p2;
wire   [0:0] icmp_ln99_1_fu_1149_p2;
wire   [9:0] rhs_V_fu_1167_p1;
wire   [0:0] icmp_ln895_2_fu_1195_p2;
wire   [0:0] icmp_ln887_3_fu_1207_p2;
wire   [0:0] icmp_ln123_1_fu_1098_p2;
wire   [0:0] and_ln77_1_fu_1230_p2;
wire   [0:0] and_ln77_fu_1143_p2;
wire   [8:0] select_ln209_1_fu_1190_p3;
wire   [8:0] zext_ln209_15_fu_1276_p1;
wire   [8:0] add_ln209_2_fu_1284_p2;
wire   [0:0] icmp_ln895_3_fu_1290_p2;
wire   [0:0] select_ln209_3_fu_1200_p3;
wire   [0:0] icmp_ln887_4_fu_1303_p2;
wire   [0:0] select_ln209_4_fu_1211_p3;
wire   [2:0] zext_ln209_16_fu_1280_p1;
wire   [0:0] icmp_ln99_3_fu_1315_p2;
wire   [0:0] select_ln209_5_fu_1218_p3;
wire   [0:0] select_ln209_6_fu_1224_p3;
wire   [0:0] and_ln77_2_fu_1333_p2;
wire   [0:0] select_ln209_7_fu_1235_p3;
wire   [0:0] select_ln209_8_fu_1242_p3;
wire   [0:0] select_ln209_9_fu_1247_p3;
wire   [8:0] select_ln209_11_fu_1268_p3;
wire   [0:0] or_ln209_3_fu_1363_p2;
wire   [0:0] or_ln209_4_fu_1368_p2;
wire  signed [8:0] out_col_V_fu_1357_p2;
wire   [1:0] mul_ln209_7_fu_1385_p1;
wire   [9:0] zext_ln209_17_fu_1381_p1;
wire   [0:0] icmp_ln123_4_fu_1390_p2;
wire   [0:0] select_ln209_16_fu_1327_p3;
wire   [0:0] select_ln209_21_fu_1345_p3;
wire   [0:0] or_ln209_5_fu_1424_p2;
wire   [0:0] or_ln209_6_fu_1430_p2;
wire   [3:0] mul_ln203_fu_1448_p0;
wire   [5:0] add_ln58_fu_1460_p2;
wire   [14:0] add_ln55_fu_1474_p2;
wire   [16:0] add_ln52_fu_1488_p2;
wire   [0:0] or_ln209_fu_1501_p2;
wire   [8:0] select_ln209_15_fu_1505_p3;
wire   [0:0] icmp_ln895_4_fu_1545_p2;
wire   [0:0] or_ln70_1_fu_1550_p2;
wire   [8:0] add_ln214_1_fu_1555_p2;
wire   [0:0] icmp_ln887_5_fu_1568_p2;
wire   [0:0] and_ln77_3_fu_1572_p2;
wire   [8:0] select_ln209_18_fu_1511_p3;
wire   [0:0] or_ln99_2_fu_1595_p2;
wire   [0:0] icmp_ln99_4_fu_1589_p2;
wire   [0:0] or_ln99_3_fu_1600_p2;
wire   [0:0] or_ln209_2_fu_1517_p2;
wire   [8:0] select_ln70_1_fu_1560_p3;
wire   [8:0] select_ln209_19_fu_1522_p3;
wire   [9:0] zext_ln215_1_fu_1613_p1;
wire   [9:0] add_ln1353_1_fu_1624_p2;
wire   [9:0] select_ln209_20_fu_1528_p3;
wire   [8:0] select_ln209_24_fu_1539_p3;
wire   [8:0] zext_ln209_18_fu_1637_p1;
wire   [8:0] add_ln209_3_fu_1640_p2;
wire   [0:0] icmp_ln895_5_fu_1646_p2;
wire   [0:0] or_ln70_2_fu_1652_p2;
wire   [8:0] add_ln214_2_fu_1657_p2;
wire   [0:0] icmp_ln887_6_fu_1671_p2;
wire   [0:0] and_ln77_4_fu_1676_p2;
wire   [0:0] select_ln209_26_fu_1577_p3;
wire   [8:0] select_ln209_27_fu_1583_p3;
wire   [8:0] select_ln209_34_fu_1688_p3;
wire   [0:0] or_ln99_4_fu_1704_p2;
wire   [0:0] icmp_ln99_5_fu_1699_p2;
wire   [0:0] or_ln99_5_fu_1709_p2;
wire   [0:0] select_ln209_28_fu_1606_p3;
wire   [8:0] select_ln70_2_fu_1663_p3;
wire   [8:0] select_ln209_29_fu_1617_p3;
wire   [9:0] zext_ln215_2_fu_1722_p1;
wire   [9:0] add_ln1353_2_fu_1733_p2;
wire   [9:0] select_ln209_30_fu_1630_p3;
wire   [12:0] zext_ln209_19_fu_1695_p1;
wire   [12:0] add_ln203_fu_1751_p2;
wire   [4:0] zext_ln879_fu_1764_p1;
wire   [0:0] icmp_ln879_fu_1767_p2;
wire   [0:0] and_ln879_fu_1772_p2;
wire   [12:0] zext_ln209_20_fu_1869_p1;
wire   [12:0] add_ln162_fu_1875_p2;
wire   [12:0] zext_ln209_22_fu_1872_p1;
wire   [12:0] add_ln162_1_fu_1892_p2;
wire   [0:0] icmp_ln1494_fu_1927_p2;
wire   [9:0] zext_ln209_21_fu_1909_p1;
wire   [9:0] select_ln178_fu_1933_p3;
wire   [12:0] zext_ln178_fu_1940_p1;
wire   [0:0] icmp_ln1494_3_fu_1949_p2;
wire   [9:0] select_ln178_3_fu_1955_p3;
wire   [12:0] zext_ln178_1_fu_1962_p1;
wire   [0:0] icmp_ln1494_6_fu_1971_p2;
wire   [9:0] select_ln178_6_fu_1977_p3;
wire   [12:0] zext_ln178_2_fu_1984_p1;
wire   [0:0] icmp_ln1494_9_fu_1993_p2;
wire   [9:0] select_ln178_9_fu_1999_p3;
wire   [12:0] zext_ln178_3_fu_2006_p1;
wire   [0:0] icmp_ln1494_1_fu_2031_p2;
wire   [15:0] select_ln178_1_fu_2035_p3;
wire   [0:0] icmp_ln1494_2_fu_2041_p2;
wire   [0:0] icmp_ln1494_4_fu_2054_p2;
wire   [15:0] select_ln178_4_fu_2058_p3;
wire   [0:0] icmp_ln1494_5_fu_2064_p2;
wire   [0:0] icmp_ln1494_7_fu_2077_p2;
wire   [15:0] select_ln178_7_fu_2081_p3;
wire   [0:0] icmp_ln1494_8_fu_2087_p2;
wire   [0:0] icmp_ln1494_10_fu_2100_p2;
wire   [15:0] select_ln178_10_fu_2104_p3;
wire   [0:0] icmp_ln1494_11_fu_2110_p2;
wire   [16:0] mul_ln209_5_fu_2123_p0;
wire   [8:0] mul_ln209_5_fu_2123_p1;
wire    ap_CS_fsm_state18;
reg    ap_block_state18;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] mul_ln203_fu_1448_p00;
wire   [5:0] mul_ln209_2_fu_878_p00;
wire   [5:0] mul_ln209_2_fu_878_p10;
wire   [14:0] mul_ln209_3_fu_891_p00;
wire   [14:0] mul_ln209_3_fu_891_p10;
wire   [16:0] mul_ln209_4_fu_903_p00;
wire   [16:0] mul_ln209_4_fu_903_p10;
wire   [25:0] mul_ln209_5_fu_2123_p00;
wire   [25:0] mul_ln209_5_fu_2123_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 inStream_V_data_0_sel_rd = 1'b0;
#0 inStream_V_data_0_sel_wr = 1'b0;
#0 inStream_V_data_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_1_sel_rd = 1'b0;
#0 outStream_V_data_1_sel_wr = 1'b0;
#0 outStream_V_data_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 call_ln134_write_output_fu_772_ap_start_reg = 1'b0;
end

yolo_max_pool_top_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
yolo_max_pool_top_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .output_h_V(output_h_V),
    .output_w_V(output_w_V),
    .input_h_V(input_h_V),
    .input_w_V(input_w_V),
    .input_fold_ch_V(input_fold_ch_V),
    .stride_V(stride_V)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_0_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_0_va_address0),
    .ce0(line_buff_group_0_va_ce0),
    .we0(line_buff_group_0_va_we0),
    .d0(line_buff_group_0_va_1_q0),
    .q0(line_buff_group_0_va_q0),
    .address1(line_buff_group_0_va_address1),
    .ce1(line_buff_group_0_va_ce1),
    .q1(line_buff_group_0_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_0_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_0_va_1_address0),
    .ce0(line_buff_group_0_va_1_ce0),
    .we0(line_buff_group_0_va_1_we0),
    .d0(ap_phi_mux_p_0_phi_fu_764_p4),
    .q0(line_buff_group_0_va_1_q0),
    .address1(line_buff_group_0_va_1_address1),
    .ce1(line_buff_group_0_va_1_ce1),
    .q1(line_buff_group_0_va_1_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_1_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_1_va_address0),
    .ce0(line_buff_group_1_va_ce0),
    .we0(line_buff_group_1_va_we0),
    .d0(line_buff_group_1_va_1_q0),
    .q0(line_buff_group_1_va_q0),
    .address1(line_buff_group_1_va_address1),
    .ce1(line_buff_group_1_va_ce1),
    .q1(line_buff_group_1_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_1_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_1_va_1_address0),
    .ce0(line_buff_group_1_va_1_ce0),
    .we0(line_buff_group_1_va_1_we0),
    .d0(ap_phi_mux_p_020_phi_fu_752_p4),
    .q0(line_buff_group_1_va_1_q0),
    .address1(line_buff_group_1_va_1_address1),
    .ce1(line_buff_group_1_va_1_ce1),
    .q1(line_buff_group_1_va_1_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_2_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_2_va_address0),
    .ce0(line_buff_group_2_va_ce0),
    .we0(line_buff_group_2_va_we0),
    .d0(line_buff_group_2_va_1_q0),
    .q0(line_buff_group_2_va_q0),
    .address1(line_buff_group_2_va_address1),
    .ce1(line_buff_group_2_va_ce1),
    .q1(line_buff_group_2_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_2_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_2_va_1_address0),
    .ce0(line_buff_group_2_va_1_ce0),
    .we0(line_buff_group_2_va_1_we0),
    .d0(ap_phi_mux_p_018_phi_fu_740_p4),
    .q0(line_buff_group_2_va_1_q0),
    .address1(line_buff_group_2_va_1_address1),
    .ce1(line_buff_group_2_va_1_ce1),
    .q1(line_buff_group_2_va_1_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_3_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_3_va_address0),
    .ce0(line_buff_group_3_va_ce0),
    .we0(line_buff_group_3_va_we0),
    .d0(line_buff_group_3_va_1_q0),
    .q0(line_buff_group_3_va_q0),
    .address1(line_buff_group_3_va_address1),
    .ce1(line_buff_group_3_va_ce1),
    .q1(line_buff_group_3_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_3_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_3_va_1_address0),
    .ce0(line_buff_group_3_va_1_ce0),
    .we0(line_buff_group_3_va_1_we0),
    .d0(ap_phi_mux_p_016_phi_fu_728_p4),
    .q0(line_buff_group_3_va_1_q0),
    .address1(line_buff_group_3_va_1_address1),
    .ce1(line_buff_group_3_va_1_ce1),
    .q1(line_buff_group_3_va_1_q1)
);

write_output call_ln134_write_output_fu_772(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(call_ln134_write_output_fu_772_ap_start),
    .ap_done(call_ln134_write_output_fu_772_ap_done),
    .ap_idle(call_ln134_write_output_fu_772_ap_idle),
    .ap_ready(call_ln134_write_output_fu_772_ap_ready),
    .val_output_0_V(call_ln134_write_output_fu_772_val_output_0_V),
    .val_output_1_V(call_ln134_write_output_fu_772_val_output_1_V),
    .val_output_2_V(call_ln134_write_output_fu_772_val_output_2_V),
    .val_output_3_V(call_ln134_write_output_fu_772_val_output_3_V),
    .curr_input_keep_V(tmp_keep_V_load_reg_2724_pp0_iter3_reg),
    .curr_input_strb_V(tmp_strb_V_load_reg_2729_pp0_iter3_reg),
    .curr_input_user_V(tmp_user_V_load_reg_2734_pp0_iter3_reg),
    .curr_input_id_V(tmp_id_V_load_reg_2739_pp0_iter3_reg),
    .curr_input_dest_V(tmp_dest_V_load_reg_2744_pp0_iter3_reg),
    .outStream_TDATA(call_ln134_write_output_fu_772_outStream_TDATA),
    .outStream_TVALID(call_ln134_write_output_fu_772_outStream_TVALID),
    .outStream_TREADY(call_ln134_write_output_fu_772_outStream_TREADY),
    .outStream_TKEEP(call_ln134_write_output_fu_772_outStream_TKEEP),
    .outStream_TSTRB(call_ln134_write_output_fu_772_outStream_TSTRB),
    .outStream_TUSER(call_ln134_write_output_fu_772_outStream_TUSER),
    .outStream_TLAST(call_ln134_write_output_fu_772_outStream_TLAST),
    .outStream_TID(call_ln134_write_output_fu_772_outStream_TID),
    .outStream_TDEST(call_ln134_write_output_fu_772_outStream_TDEST),
    .last_V(and_ln879_1_reg_2639_pp0_iter4_reg),
    .outStream_TDATA_blk_n(call_ln134_write_output_fu_772_outStream_TDATA_blk_n),
    .ap_ce(call_ln134_write_output_fu_772_ap_ce)
);

yolo_max_pool_top_mul_mul_17ns_9ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 26 ))
yolo_max_pool_top_mul_mul_17ns_9ns_26_1_1_U18(
    .din0(mul_ln209_5_fu_2123_p0),
    .din1(mul_ln209_5_fu_2123_p1),
    .dout(mul_ln209_5_fu_2123_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        call_ln134_write_output_fu_772_ap_start_reg <= 1'b0;
    end else begin
        if (((select_ln209_35_reg_2587_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            call_ln134_write_output_fu_772_ap_start_reg <= 1'b1;
        end else if ((call_ln134_write_output_fu_772_ap_ready == 1'b1)) begin
            call_ln134_write_output_fu_772_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_out == 1'b1) & (inStream_V_data_0_vld_out == 1'b1))) begin
            inStream_V_data_0_sel_rd <= ~inStream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_in == 1'b1) & (inStream_V_data_0_vld_in == 1'b1))) begin
            inStream_V_data_0_sel_wr <= ~inStream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd2;
        end else if ((((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd1;
        end else if (((~((inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)) & ~((inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)) & (inStream_V_data_0_state == 2'd3)) | ((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b1)) | ((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd3;
        end else begin
            inStream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_out == 1'b1) & (outStream_V_data_1_vld_out == 1'b1))) begin
            outStream_V_data_1_sel_rd <= ~outStream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_in == 1'b1) & (outStream_V_data_1_vld_in == 1'b1))) begin
            outStream_V_data_1_sel_wr <= ~outStream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd2;
        end else if ((((outStream_V_data_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd1;
        end else if (((~((outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)) & (outStream_V_data_1_state == 2'd3)) | ((outStream_V_data_1_state == 2'd1) & (outStream_V_data_1_ack_out == 1'b1)) | ((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd3;
        end else begin
            outStream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (select_ln209_33_fu_1681_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_016_reg_724 <= 16'd32768;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_p_016_reg_724 <= ap_phi_reg_pp0_iter0_p_016_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (select_ln209_33_fu_1681_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_018_reg_736 <= 16'd32768;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_p_018_reg_736 <= ap_phi_reg_pp0_iter0_p_018_reg_736;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (select_ln209_33_fu_1681_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_020_reg_748 <= 16'd32768;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_p_020_reg_748 <= ap_phi_reg_pp0_iter0_p_020_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (select_ln209_33_fu_1681_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_0_reg_760 <= 16'd32768;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_p_0_reg_760 <= ap_phi_reg_pp0_iter0_p_0_reg_760;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten174_reg_642 <= select_ln52_1_reg_2573;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten174_reg_642 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten296_reg_618 <= add_ln49_reg_2440;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten296_reg_618 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten77_reg_654 <= select_ln55_1_reg_2568;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten77_reg_654 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_678 <= select_ln58_1_reg_2563;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_678 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln19_reg_530 <= add_ln19_fu_800_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln19_reg_530 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln20_reg_552 <= 3'd0;
    end else if (((icmp_ln20_fu_830_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln20_reg_552 <= add_ln20_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_830_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln21_reg_574 <= 3'd0;
    end else if (((icmp_ln21_fu_848_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln21_reg_574 <= add_ln21_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_848_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln22_reg_596 <= 3'd0;
    end else if (((icmp_ln22_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln22_reg_596 <= add_ln22_fu_854_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul299_reg_563 <= 12'd0;
    end else if (((icmp_ln20_fu_830_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul299_reg_563 <= add_ln627_1_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_830_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul301_reg_585 <= 12'd0;
    end else if (((icmp_ln21_fu_848_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul301_reg_585 <= add_ln627_2_fu_842_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_848_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul303_reg_607 <= 12'd0;
    end else if (((icmp_ln22_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul303_reg_607 <= add_ln627_3_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_541 <= add_ln627_fu_806_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_541 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        t_V_1_reg_702 <= select_ln52_reg_2578;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_1_reg_702 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_2_reg_666 <= select_ln55_reg_2530;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_2_reg_666 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        t_V_3_reg_713 <= select_ln58_reg_2606;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_3_reg_713 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_4_reg_690 <= input_ch_idx_V_reg_2558;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_4_reg_690 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_reg_630 <= select_ln49_reg_2450;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_630 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln1353_reg_2435 <= add_ln1353_fu_1171_p2;
        col_idx_V_reg_2420 <= col_idx_V_fu_1107_p2;
        conv_count_V_1_reg_2425 <= conv_count_V_1_fu_1130_p3;
        mul_ln203_reg_2547_pp0_iter1_reg[12 : 1] <= mul_ln203_reg_2547[12 : 1];
        or_ln99_1_reg_2430 <= or_ln99_1_fu_1161_p2;
        tmp_dest_V_load_reg_2744_pp0_iter3_reg <= tmp_dest_V_load_reg_2744;
        tmp_id_V_load_reg_2739_pp0_iter3_reg <= tmp_id_V_load_reg_2739;
        tmp_keep_V_load_reg_2724_pp0_iter3_reg <= tmp_keep_V_load_reg_2724;
        tmp_strb_V_load_reg_2729_pp0_iter3_reg <= tmp_strb_V_load_reg_2729;
        tmp_user_V_load_reg_2734_pp0_iter3_reg <= tmp_user_V_load_reg_2734;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln1354_2_reg_2293 <= add_ln1354_2_fu_933_p2;
        add_ln1354_reg_2281 <= add_ln1354_fu_915_p2;
        icmp_ln123_2_reg_2314 <= icmp_ln123_2_fu_960_p2;
        icmp_ln55_reg_2339 <= icmp_ln55_fu_981_p2;
        icmp_ln58_reg_2333 <= icmp_ln58_fu_976_p2;
        icmp_ln61_reg_2326 <= icmp_ln61_fu_971_p2;
        icmp_ln887_2_reg_2320 <= icmp_ln887_2_fu_966_p2;
        icmp_ln99_2_reg_2309 <= icmp_ln99_2_fu_954_p2;
        mul_ln209_5_reg_2304 <= mul_ln209_5_fu_2123_p2;
        ret_V_1_reg_2299 <= ret_V_1_fu_942_p2;
        ret_V_reg_2287 <= ret_V_fu_924_p2;
        zext_ln209_2_reg_2273[1 : 0] <= zext_ln209_2_fu_909_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln209_35_reg_2587_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln162_2_reg_2749 <= add_ln162_2_fu_1944_p2;
        add_ln162_3_reg_2754 <= add_ln162_3_fu_1966_p2;
        add_ln162_4_reg_2759 <= add_ln162_4_fu_1988_p2;
        add_ln162_5_reg_2764 <= add_ln162_5_fu_2010_p2;
        tmp_dest_V_load_reg_2744 <= tmp_dest_V_fu_208;
        tmp_id_V_load_reg_2739 <= tmp_id_V_fu_204;
        tmp_keep_V_load_reg_2724 <= tmp_keep_V_fu_192;
        tmp_strb_V_load_reg_2729 <= tmp_strb_V_fu_196;
        tmp_user_V_load_reg_2734 <= tmp_user_V_fu_200;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln49_reg_2440 <= add_ln49_fu_1177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln209_35_fu_1715_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln879_1_reg_2639 <= and_ln879_1_fu_1777_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln879_1_reg_2639_pp0_iter2_reg <= and_ln879_1_reg_2639;
        and_ln879_1_reg_2639_pp0_iter3_reg <= and_ln879_1_reg_2639_pp0_iter2_reg;
        and_ln879_1_reg_2639_pp0_iter4_reg <= and_ln879_1_reg_2639_pp0_iter3_reg;
        icmp_ln49_reg_2356 <= icmp_ln49_fu_1005_p2;
        icmp_ln49_reg_2356_pp0_iter1_reg <= icmp_ln49_reg_2356;
        line_buff_group_0_va_5_reg_2619 <= sext_ln203_fu_1756_p1;
        line_buff_group_0_va_6_reg_2654 <= sext_ln162_fu_1880_p1;
        line_buff_group_0_va_7_reg_2659 <= sext_ln162_1_fu_1897_p1;
        line_buff_group_0_va_7_reg_2659_pp0_iter3_reg <= line_buff_group_0_va_7_reg_2659;
        line_buff_group_1_va_5_reg_2624 <= sext_ln203_fu_1756_p1;
        line_buff_group_1_va_6_reg_2674 <= sext_ln162_fu_1880_p1;
        line_buff_group_1_va_7_reg_2679 <= sext_ln162_1_fu_1897_p1;
        line_buff_group_1_va_7_reg_2679_pp0_iter3_reg <= line_buff_group_1_va_7_reg_2679;
        line_buff_group_2_va_5_reg_2629 <= sext_ln203_fu_1756_p1;
        line_buff_group_2_va_6_reg_2694 <= sext_ln162_fu_1880_p1;
        line_buff_group_2_va_7_reg_2699 <= sext_ln162_1_fu_1897_p1;
        line_buff_group_2_va_7_reg_2699_pp0_iter3_reg <= line_buff_group_2_va_7_reg_2699;
        line_buff_group_3_va_5_reg_2634 <= sext_ln203_fu_1756_p1;
        line_buff_group_3_va_6_reg_2714 <= sext_ln162_fu_1880_p1;
        line_buff_group_3_va_7_reg_2719 <= sext_ln162_1_fu_1897_p1;
        line_buff_group_3_va_7_reg_2719_pp0_iter3_reg <= line_buff_group_3_va_7_reg_2719;
        mul_ln209_1_reg_2350 <= mul_ln209_1_fu_1000_p2;
        mul_ln209_reg_2344 <= mul_ln209_fu_990_p2;
        select_ln209_35_reg_2587_pp0_iter2_reg <= select_ln209_35_reg_2587;
        select_ln209_35_reg_2587_pp0_iter3_reg <= select_ln209_35_reg_2587_pp0_iter2_reg;
        select_ln209_35_reg_2587_pp0_iter4_reg <= select_ln209_35_reg_2587_pp0_iter3_reg;
        select_ln209_36_reg_2591_pp0_iter2_reg <= select_ln209_36_reg_2591;
        select_ln209_37_reg_2597_pp0_iter2_reg <= select_ln209_37_reg_2597;
        sext_ln203_reg_2611 <= sext_ln203_fu_1756_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        col_stride_V_reg_2535 <= col_stride_V_fu_1418_p2;
        mul_ln203_reg_2547[12 : 1] <= mul_ln203_fu_1448_p2[12 : 1];
        mul_ln209_7_reg_2506 <= mul_ln209_7_fu_1385_p2;
        or_ln209_1_reg_2460 <= or_ln209_1_fu_1264_p2;
        row_stride_V_reg_2455 <= row_stride_V_fu_1258_p2;
        select_ln209_12_reg_2468 <= select_ln209_12_fu_1296_p3;
        select_ln209_13_reg_2474 <= select_ln209_13_fu_1308_p3;
        select_ln209_14_reg_2480 <= select_ln209_14_fu_1320_p3;
        select_ln209_17_reg_2486 <= select_ln209_17_fu_1338_p3;
        select_ln209_22_reg_2491 <= select_ln209_22_fu_1351_p3;
        select_ln209_23_reg_2501 <= select_ln209_23_fu_1373_p3;
        select_ln209_25_reg_2515 <= select_ln209_25_fu_1395_p3;
        select_ln209_31_reg_2520 <= select_ln209_31_fu_1403_p3;
        select_ln209_32_reg_2542 <= select_ln209_32_fu_1436_p3;
        select_ln209_reg_2445 <= select_ln209_fu_1183_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_1005_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_reg_2365 <= icmp_ln52_fu_1016_p2;
        icmp_ln58_1_reg_2400 <= icmp_ln58_1_fu_1048_p2;
        icmp_ln61_1_reg_2395 <= icmp_ln61_1_fu_1043_p2;
        mul_ln209_6_reg_2383 <= mul_ln209_6_fu_1025_p2;
        out_row_V_reg_2360 <= out_row_V_fu_1010_p2;
        select_ln209_10_reg_2405 <= select_ln209_10_fu_1058_p3;
        select_ln209_2_reg_2390 <= select_ln209_2_fu_1035_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_A == 1'b1)) begin
        inStream_V_data_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_B == 1'b1)) begin
        inStream_V_data_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_ch_idx_V_reg_2558 <= input_ch_idx_V_fu_1454_p2;
        select_ln49_reg_2450 <= select_ln49_fu_1252_p3;
        select_ln52_1_reg_2573 <= select_ln52_1_fu_1494_p3;
        select_ln55_1_reg_2568 <= select_ln55_1_fu_1480_p3;
        select_ln55_reg_2530 <= select_ln55_fu_1410_p3;
        select_ln58_1_reg_2563 <= select_ln58_1_fu_1466_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_fold_ch_V_read_reg_2137 <= input_fold_ch_V;
        input_h_V_read_reg_2153 <= input_h_V;
        input_w_V_read_reg_2145 <= input_w_V;
        output_h_V_read_reg_2166 <= output_h_V;
        output_w_V_read_reg_2160 <= output_w_V;
        stride_V_read_reg_2129 <= stride_V;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln209_35_reg_2587_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buff_group_0_va_10_reg_2837 <= line_buff_group_0_va_q1;
        line_buff_group_1_va_10_reg_2843 <= line_buff_group_1_va_q1;
        line_buff_group_2_va_10_reg_2849 <= line_buff_group_2_va_q1;
        line_buff_group_3_va_10_reg_2855 <= line_buff_group_3_va_q1;
        window_0_val_1_V_1_reg_2813 <= line_buff_group_0_va_1_q1;
        window_1_val_1_V_1_reg_2819 <= line_buff_group_1_va_1_q1;
        window_2_val_1_V_1_reg_2825 <= line_buff_group_2_va_1_q1;
        window_3_val_1_V_1_reg_2831 <= line_buff_group_3_va_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln209_2_reg_2254 <= mul_ln209_2_fu_878_p2;
        mul_ln209_3_reg_2260 <= mul_ln209_3_fu_891_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln209_4_reg_2267 <= mul_ln209_4_fu_903_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_A == 1'b1)) begin
        outStream_V_data_1_payload_A <= call_ln134_write_output_fu_772_outStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_B == 1'b1)) begin
        outStream_V_data_1_payload_B <= call_ln134_write_output_fu_772_outStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= call_ln134_write_output_fu_772_outStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= call_ln134_write_output_fu_772_outStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln209_33_reg_2583 <= select_ln209_33_fu_1681_p3;
        select_ln209_35_reg_2587 <= select_ln209_35_fu_1715_p3;
        select_ln209_36_reg_2591 <= select_ln209_36_fu_1726_p3;
        select_ln209_37_reg_2597 <= select_ln209_37_fu_1739_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln52_reg_2578 <= select_ln52_fu_1534_p3;
        select_ln58_reg_2606 <= select_ln58_fu_1746_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln209_33_reg_2583 == 1'd1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_dest_V_fu_208 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_fu_204 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_fu_192 <= inStream_V_keep_V_0_data_out;
        tmp_strb_V_fu_196 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_fu_200 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln209_35_reg_2587_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        window_0_val_1_V_0_reg_2769 <= line_buff_group_0_va_1_q1;
        window_1_val_1_V_0_reg_2775 <= line_buff_group_1_va_1_q1;
        window_2_val_1_V_0_reg_2781 <= line_buff_group_2_va_1_q1;
        window_3_val_1_V_0_reg_2787 <= line_buff_group_3_va_1_q1;
    end
end

always @ (*) begin
    if ((icmp_ln49_reg_2356 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten174_phi_fu_646_p4 = select_ln52_1_reg_2573;
    end else begin
        ap_phi_mux_indvar_flatten174_phi_fu_646_p4 = indvar_flatten174_reg_642;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten296_phi_fu_622_p4 = add_ln49_reg_2440;
    end else begin
        ap_phi_mux_indvar_flatten296_phi_fu_622_p4 = indvar_flatten296_reg_618;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten77_phi_fu_658_p4 = select_ln55_1_reg_2568;
    end else begin
        ap_phi_mux_indvar_flatten77_phi_fu_658_p4 = indvar_flatten77_reg_654;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_682_p4 = select_ln58_1_reg_2563;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_682_p4 = indvar_flatten_reg_678;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln209_33_reg_2583 == 1'd1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_016_phi_fu_728_p4 = {{inStream_V_data_0_data_out[63:48]}};
    end else begin
        ap_phi_mux_p_016_phi_fu_728_p4 = ap_phi_reg_pp0_iter1_p_016_reg_724;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln209_33_reg_2583 == 1'd1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_018_phi_fu_740_p4 = {{inStream_V_data_0_data_out[47:32]}};
    end else begin
        ap_phi_mux_p_018_phi_fu_740_p4 = ap_phi_reg_pp0_iter1_p_018_reg_736;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln209_33_reg_2583 == 1'd1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_020_phi_fu_752_p4 = {{inStream_V_data_0_data_out[31:16]}};
    end else begin
        ap_phi_mux_p_020_phi_fu_752_p4 = ap_phi_reg_pp0_iter1_p_020_reg_748;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln209_33_reg_2583 == 1'd1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_0_phi_fu_764_p4 = curr_input_data_sub_s_fu_1806_p1;
    end else begin
        ap_phi_mux_p_0_phi_fu_764_p4 = ap_phi_reg_pp0_iter1_p_0_reg_760;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_t_V_1_phi_fu_706_p4 = select_ln52_reg_2578;
    end else begin
        ap_phi_mux_t_V_1_phi_fu_706_p4 = t_V_1_reg_702;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_t_V_2_phi_fu_670_p4 = select_ln55_reg_2530;
    end else begin
        ap_phi_mux_t_V_2_phi_fu_670_p4 = t_V_2_reg_666;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_t_V_3_phi_fu_717_p4 = select_ln58_reg_2606;
    end else begin
        ap_phi_mux_t_V_3_phi_fu_717_p4 = t_V_3_reg_713;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_t_V_4_phi_fu_694_p4 = input_ch_idx_V_reg_2558;
    end else begin
        ap_phi_mux_t_V_4_phi_fu_694_p4 = t_V_4_reg_690;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_2356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_t_V_phi_fu_634_p4 = select_ln49_reg_2450;
    end else begin
        ap_phi_mux_t_V_phi_fu_634_p4 = t_V_reg_630;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp446))) begin
        call_ln134_write_output_fu_772_ap_ce = 1'b1;
    end else begin
        call_ln134_write_output_fu_772_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln209_33_reg_2583 == 1'd1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_TDATA_blk_n = inStream_V_data_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_data_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_0_sel == 1'b1)) begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_B;
    end else begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_0_va_1_address0 = line_buff_group_0_va_5_reg_2619;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_0_va_1_address0 = sext_ln203_fu_1756_p1;
        end else begin
            line_buff_group_0_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_0_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_0_va_1_address1 = line_buff_group_0_va_7_reg_2659_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_0_va_1_address1 = line_buff_group_0_va_6_reg_2654;
        end else begin
            line_buff_group_0_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_0_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        line_buff_group_0_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_0_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_0_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_0_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_0_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_0_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_0_va_address0 = sext_ln162_fu_1880_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_0_va_address0 = sext_ln203_reg_2611;
    end else begin
        line_buff_group_0_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_0_va_address1 = sext_ln162_2_fu_2015_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_0_va_address1 = sext_ln162_1_fu_1897_p1;
    end else begin
        line_buff_group_0_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_0_va_ce0 = 1'b1;
    end else begin
        line_buff_group_0_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_0_va_ce1 = 1'b1;
    end else begin
        line_buff_group_0_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_0_va_we0 = 1'b1;
    end else begin
        line_buff_group_0_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_1_va_1_address0 = line_buff_group_1_va_5_reg_2624;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_1_va_1_address0 = sext_ln203_fu_1756_p1;
        end else begin
            line_buff_group_1_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_1_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_1_va_1_address1 = line_buff_group_1_va_7_reg_2679_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_1_va_1_address1 = line_buff_group_1_va_6_reg_2674;
        end else begin
            line_buff_group_1_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_1_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        line_buff_group_1_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_1_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_1_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_1_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_1_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_1_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_1_va_address0 = sext_ln162_fu_1880_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_1_va_address0 = sext_ln203_reg_2611;
    end else begin
        line_buff_group_1_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_1_va_address1 = sext_ln162_3_fu_2019_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_1_va_address1 = sext_ln162_1_fu_1897_p1;
    end else begin
        line_buff_group_1_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_1_va_ce0 = 1'b1;
    end else begin
        line_buff_group_1_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_1_va_ce1 = 1'b1;
    end else begin
        line_buff_group_1_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_1_va_we0 = 1'b1;
    end else begin
        line_buff_group_1_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_2_va_1_address0 = line_buff_group_2_va_5_reg_2629;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_2_va_1_address0 = sext_ln203_fu_1756_p1;
        end else begin
            line_buff_group_2_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_2_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_2_va_1_address1 = line_buff_group_2_va_7_reg_2699_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_2_va_1_address1 = line_buff_group_2_va_6_reg_2694;
        end else begin
            line_buff_group_2_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_2_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        line_buff_group_2_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_2_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_2_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_2_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_2_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_2_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_2_va_address0 = sext_ln162_fu_1880_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_2_va_address0 = sext_ln203_reg_2611;
    end else begin
        line_buff_group_2_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_2_va_address1 = sext_ln162_4_fu_2023_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_2_va_address1 = sext_ln162_1_fu_1897_p1;
    end else begin
        line_buff_group_2_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_2_va_ce0 = 1'b1;
    end else begin
        line_buff_group_2_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_2_va_ce1 = 1'b1;
    end else begin
        line_buff_group_2_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_2_va_we0 = 1'b1;
    end else begin
        line_buff_group_2_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_3_va_1_address0 = line_buff_group_3_va_5_reg_2634;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_3_va_1_address0 = sext_ln203_fu_1756_p1;
        end else begin
            line_buff_group_3_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_3_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_3_va_1_address1 = line_buff_group_3_va_7_reg_2719_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_3_va_1_address1 = line_buff_group_3_va_6_reg_2714;
        end else begin
            line_buff_group_3_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_3_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        line_buff_group_3_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_3_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_3_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_3_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_3_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_3_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_3_va_address0 = sext_ln162_fu_1880_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_3_va_address0 = sext_ln203_reg_2611;
    end else begin
        line_buff_group_3_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_3_va_address1 = sext_ln162_5_fu_2027_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_3_va_address1 = sext_ln162_1_fu_1897_p1;
    end else begin
        line_buff_group_3_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_3_va_ce0 = 1'b1;
    end else begin
        line_buff_group_3_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        line_buff_group_3_va_ce1 = 1'b1;
    end else begin
        line_buff_group_3_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_group_3_va_we0 = 1'b1;
    end else begin
        line_buff_group_3_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln209_35_reg_2587_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        outStream_TDATA_blk_n = call_ln134_write_output_fu_772_outStream_TDATA_blk_n;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_1_sel == 1'b1)) begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_B;
    end else begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln20_fu_830_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln21_fu_848_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln22_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln49_reg_2356 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln49_reg_2356 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1353_1_fu_1624_p2 = (zext_ln215_1_fu_1613_p1 + 10'd1);

assign add_ln1353_2_fu_1733_p2 = (zext_ln215_2_fu_1722_p1 + 10'd1);

assign add_ln1353_fu_1171_p2 = (rhs_V_fu_1167_p1 + 10'd1);

assign add_ln1354_2_fu_933_p2 = ($signed(zext_ln1354_2_fu_930_p1) + $signed(10'd1023));

assign add_ln1354_fu_915_p2 = ($signed(zext_ln1354_fu_912_p1) + $signed(3'd7));

assign add_ln162_1_fu_1892_p2 = (mul_ln203_reg_2547_pp0_iter1_reg + zext_ln209_22_fu_1872_p1);

assign add_ln162_2_fu_1944_p2 = (zext_ln178_fu_1940_p1 + mul_ln203_reg_2547_pp0_iter1_reg);

assign add_ln162_3_fu_1966_p2 = (zext_ln178_1_fu_1962_p1 + mul_ln203_reg_2547_pp0_iter1_reg);

assign add_ln162_4_fu_1988_p2 = (zext_ln178_2_fu_1984_p1 + mul_ln203_reg_2547_pp0_iter1_reg);

assign add_ln162_5_fu_2010_p2 = (zext_ln178_3_fu_2006_p1 + mul_ln203_reg_2547_pp0_iter1_reg);

assign add_ln162_fu_1875_p2 = (mul_ln203_reg_2547_pp0_iter1_reg + zext_ln209_20_fu_1869_p1);

assign add_ln19_fu_800_p2 = (phi_ln19_reg_530 + 3'd1);

assign add_ln203_fu_1751_p2 = (mul_ln203_reg_2547 + zext_ln209_19_fu_1695_p1);

assign add_ln209_2_fu_1284_p2 = (select_ln209_1_fu_1190_p3 + zext_ln209_15_fu_1276_p1);

assign add_ln209_3_fu_1640_p2 = (select_ln209_24_fu_1539_p3 + zext_ln209_18_fu_1637_p1);

assign add_ln20_fu_818_p2 = (phi_ln20_reg_552 + 3'd1);

assign add_ln214_1_fu_1555_p2 = ($signed(mul_ln209_7_reg_2506) + $signed(9'd511));

assign add_ln214_2_fu_1657_p2 = ($signed(add_ln209_3_fu_1640_p2) + $signed(9'd511));

assign add_ln21_fu_836_p2 = (phi_ln21_reg_574 + 3'd1);

assign add_ln22_fu_854_p2 = (phi_ln22_reg_596 + 3'd1);

assign add_ln49_fu_1177_p2 = (indvar_flatten296_reg_618 + 26'd1);

assign add_ln52_fu_1488_p2 = (indvar_flatten174_reg_642 + 17'd1);

assign add_ln55_fu_1474_p2 = (indvar_flatten77_reg_654 + 15'd1);

assign add_ln58_fu_1460_p2 = (indvar_flatten_reg_678 + 6'd1);

assign add_ln627_1_fu_824_p2 = (phi_mul299_reg_563 + 12'd418);

assign add_ln627_2_fu_842_p2 = (phi_mul301_reg_585 + 12'd418);

assign add_ln627_3_fu_860_p2 = (phi_mul303_reg_607 + 12'd418);

assign add_ln627_fu_806_p2 = (phi_mul_reg_541 + 12'd418);

assign and_ln77_1_fu_1230_p2 = (icmp_ln887_3_fu_1207_p2 & icmp_ln887_2_reg_2320);

assign and_ln77_2_fu_1333_p2 = (icmp_ln887_4_fu_1303_p2 & icmp_ln887_2_reg_2320);

assign and_ln77_3_fu_1572_p2 = (select_ln209_13_reg_2474 & icmp_ln887_5_fu_1568_p2);

assign and_ln77_4_fu_1676_p2 = (select_ln209_13_reg_2474 & icmp_ln887_6_fu_1671_p2);

assign and_ln77_fu_1143_p2 = (icmp_ln887_fu_1084_p2 & icmp_ln887_1_fu_1138_p2);

assign and_ln879_1_fu_1777_p2 = (select_ln209_25_reg_2515 & and_ln879_fu_1772_p2);

assign and_ln879_fu_1772_p2 = (select_ln209_2_reg_2390 & icmp_ln879_fu_1767_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((select_ln209_35_reg_2587_pp0_iter4_reg == 1'd0) & (call_ln134_write_output_fu_772_outStream_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp446 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((select_ln209_35_reg_2587_pp0_iter4_reg == 1'd0) & (call_ln134_write_output_fu_772_outStream_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op299_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op299_read_state11 == 1'b1));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1_ignore_call69 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op299_read_state11 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2_ignore_call69 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter3_ignore_call69 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage1_iter4 = ((select_ln209_35_reg_2587_pp0_iter4_reg == 1'd0) & (call_ln134_write_output_fu_772_outStream_TDATA_blk_n == 1'b0));
end

assign ap_block_state17_pp0_stage1_iter4_ignore_call69 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18 = ((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0_ignore_call69 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_016_reg_724 = 'bx;

assign ap_phi_reg_pp0_iter0_p_018_reg_736 = 'bx;

assign ap_phi_reg_pp0_iter0_p_020_reg_748 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_reg_760 = 'bx;

always @ (*) begin
    ap_predicate_op299_read_state11 = ((select_ln209_33_reg_2583 == 1'd1) & (icmp_ln49_reg_2356_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign call_ln134_write_output_fu_772_ap_start = call_ln134_write_output_fu_772_ap_start_reg;

assign call_ln134_write_output_fu_772_outStream_TREADY = ((outStream_V_dest_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_id_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_last_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_user_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_strb_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_keep_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_data_1_ack_in & ap_CS_fsm_pp0_stage1));

assign call_ln134_write_output_fu_772_val_output_0_V = ((icmp_ln1494_2_fu_2041_p2[0:0] === 1'b1) ? window_0_val_1_V_1_reg_2813 : select_ln178_1_fu_2035_p3);

assign call_ln134_write_output_fu_772_val_output_1_V = ((icmp_ln1494_5_fu_2064_p2[0:0] === 1'b1) ? window_1_val_1_V_1_reg_2819 : select_ln178_4_fu_2058_p3);

assign call_ln134_write_output_fu_772_val_output_2_V = ((icmp_ln1494_8_fu_2087_p2[0:0] === 1'b1) ? window_2_val_1_V_1_reg_2825 : select_ln178_7_fu_2081_p3);

assign call_ln134_write_output_fu_772_val_output_3_V = ((icmp_ln1494_11_fu_2110_p2[0:0] === 1'b1) ? window_3_val_1_V_1_reg_2831 : select_ln178_10_fu_2104_p3);

assign col_idx_V_fu_1107_p2 = (zext_ln209_1_fu_1103_p1 + mul_ln209_1_reg_2350);

assign col_stride_V_fu_1418_p2 = (select_ln209_23_fu_1373_p3 + 2'd1);

assign conv_count_V_1_fu_1130_p3 = ((or_ln70_fu_1118_p2[0:0] === 1'b1) ? 9'd0 : conv_count_V_fu_1124_p2);

assign conv_count_V_fu_1124_p2 = ($signed(col_idx_V_fu_1107_p2) + $signed(9'd511));

assign curr_input_data_sub_s_fu_1806_p1 = inStream_V_data_0_data_out[15:0];

assign icmp_ln123_1_fu_1098_p2 = ((zext_ln209_5_fu_1094_p1 == add_ln1354_2_reg_2293) ? 1'b1 : 1'b0);

assign icmp_ln123_2_fu_960_p2 = ((add_ln1354_2_fu_933_p2 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln123_3_fu_1030_p2 = ((zext_ln209_14_fu_1021_p1 == ret_V_reg_2287) ? 1'b1 : 1'b0);

assign icmp_ln123_4_fu_1390_p2 = ((zext_ln209_17_fu_1381_p1 == add_ln1354_2_reg_2293) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_995_p2 = ((zext_ln209_3_fu_986_p1 == ret_V_reg_2287) ? 1'b1 : 1'b0);

assign icmp_ln1494_10_fu_2100_p2 = (($signed(line_buff_group_3_va_10_reg_2855) < $signed(window_3_val_1_V_0_reg_2787)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_2110_p2 = (($signed(select_ln178_10_fu_2104_p3) < $signed(window_3_val_1_V_1_reg_2831)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_2031_p2 = (($signed(line_buff_group_0_va_10_reg_2837) < $signed(window_0_val_1_V_0_reg_2769)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_2041_p2 = (($signed(select_ln178_1_fu_2035_p3) < $signed(window_0_val_1_V_1_reg_2813)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1949_p2 = (($signed(line_buff_group_1_va_q1) > $signed(line_buff_group_1_va_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_2054_p2 = (($signed(line_buff_group_1_va_10_reg_2843) < $signed(window_1_val_1_V_0_reg_2775)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_2064_p2 = (($signed(select_ln178_4_fu_2058_p3) < $signed(window_1_val_1_V_1_reg_2819)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1971_p2 = (($signed(line_buff_group_2_va_q1) > $signed(line_buff_group_2_va_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_2077_p2 = (($signed(line_buff_group_2_va_10_reg_2849) < $signed(window_2_val_1_V_0_reg_2781)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_2087_p2 = (($signed(select_ln178_7_fu_2081_p3) < $signed(window_2_val_1_V_1_reg_2825)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1993_p2 = (($signed(line_buff_group_3_va_q1) > $signed(line_buff_group_3_va_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1927_p2 = (($signed(line_buff_group_0_va_q1) > $signed(line_buff_group_0_va_q0)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_812_p2 = ((phi_ln19_reg_530 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_830_p2 = ((phi_ln20_reg_552 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_848_p2 = ((phi_ln21_reg_574 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_866_p2 = ((phi_ln22_reg_596 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1005_p2 = ((ap_phi_mux_indvar_flatten296_phi_fu_622_p4 == mul_ln209_5_reg_2304) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1016_p2 = ((ap_phi_mux_indvar_flatten174_phi_fu_646_p4 == mul_ln209_4_reg_2267) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_1053_p2 = ((ap_phi_mux_indvar_flatten77_phi_fu_658_p4 == mul_ln209_3_reg_2260) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_981_p2 = ((mul_ln209_3_reg_2260 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_1048_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_682_p4 == mul_ln209_2_reg_2254) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_976_p2 = ((mul_ln209_2_reg_2254 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_1_fu_1043_p2 = ((ap_phi_mux_t_V_4_phi_fu_694_p4 == input_fold_ch_V_read_reg_2137) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_971_p2 = ((input_fold_ch_V_read_reg_2137 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1767_p2 = ((zext_ln879_fu_1764_p1 == ret_V_1_reg_2299) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_1138_p2 = ((col_idx_V_fu_1107_p2 < input_w_V_read_reg_2145) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_966_p2 = ((input_w_V_read_reg_2145 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_1207_p2 = ((mul_ln209_6_reg_2383 < input_h_V_read_reg_2153) ? 1'b1 : 1'b0);

assign icmp_ln887_4_fu_1303_p2 = ((add_ln209_2_fu_1284_p2 < input_h_V_read_reg_2153) ? 1'b1 : 1'b0);

assign icmp_ln887_5_fu_1568_p2 = ((mul_ln209_7_reg_2506 < input_w_V_read_reg_2145) ? 1'b1 : 1'b0);

assign icmp_ln887_6_fu_1671_p2 = ((add_ln209_3_fu_1640_p2 < input_w_V_read_reg_2145) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_1084_p2 = ((row_idx_V_fu_1073_p2 < input_h_V_read_reg_2153) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_1112_p2 = ((col_idx_V_fu_1107_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_1195_p2 = ((mul_ln209_6_reg_2383 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_1290_p2 = ((add_ln209_2_fu_1284_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_1545_p2 = ((mul_ln209_7_reg_2506 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_1646_p2 = ((add_ln209_3_fu_1640_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_1078_p2 = ((row_idx_V_fu_1073_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln99_1_fu_1149_p2 = ((ap_phi_mux_t_V_3_phi_fu_717_p4 != ap_phi_mux_t_V_1_phi_fu_706_p4) ? 1'b1 : 1'b0);

assign icmp_ln99_2_fu_954_p2 = ((add_ln1354_fu_915_p2 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln99_3_fu_1315_p2 = ((zext_ln209_16_fu_1280_p1 != add_ln1354_reg_2281) ? 1'b1 : 1'b0);

assign icmp_ln99_4_fu_1589_p2 = ((select_ln52_fu_1534_p3 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln99_5_fu_1699_p2 = ((col_stride_V_reg_2535 != select_ln52_fu_1534_p3) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_1089_p2 = ((zext_ln209_4_fu_1069_p1 != add_ln1354_reg_2281) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_0_ack_in = inStream_V_data_0_state[1'd1];

assign inStream_V_data_0_load_A = (inStream_V_data_0_state_cmp_full & ~inStream_V_data_0_sel_wr);

assign inStream_V_data_0_load_B = (inStream_V_data_0_state_cmp_full & inStream_V_data_0_sel_wr);

assign inStream_V_data_0_sel = inStream_V_data_0_sel_rd;

assign inStream_V_data_0_state_cmp_full = ((inStream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_0_vld_in = inStream_TVALID;

assign inStream_V_data_0_vld_out = inStream_V_data_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign input_ch_idx_V_fu_1454_p2 = (select_ln209_32_fu_1436_p3 + 4'd1);

assign mul_ln203_fu_1448_p0 = mul_ln203_fu_1448_p00;

assign mul_ln203_fu_1448_p00 = select_ln209_32_fu_1436_p3;

assign mul_ln203_fu_1448_p2 = (mul_ln203_fu_1448_p0 * $signed('h1A2));

assign mul_ln209_1_fu_1000_p0 = zext_ln209_2_reg_2273;

assign mul_ln209_1_fu_1000_p2 = ($signed({{1'b0}, {mul_ln209_1_fu_1000_p0}}) * $signed(ap_phi_mux_t_V_2_phi_fu_670_p4));

assign mul_ln209_2_fu_878_p0 = mul_ln209_2_fu_878_p00;

assign mul_ln209_2_fu_878_p00 = input_fold_ch_V_read_reg_2137;

assign mul_ln209_2_fu_878_p1 = mul_ln209_2_fu_878_p10;

assign mul_ln209_2_fu_878_p10 = stride_V_read_reg_2129;

assign mul_ln209_2_fu_878_p2 = (mul_ln209_2_fu_878_p0 * mul_ln209_2_fu_878_p1);

assign mul_ln209_3_fu_891_p0 = mul_ln209_3_fu_891_p00;

assign mul_ln209_3_fu_891_p00 = mul_ln209_2_fu_878_p2;

assign mul_ln209_3_fu_891_p1 = mul_ln209_3_fu_891_p10;

assign mul_ln209_3_fu_891_p10 = output_w_V_read_reg_2160;

assign mul_ln209_3_fu_891_p2 = (mul_ln209_3_fu_891_p0 * mul_ln209_3_fu_891_p1);

assign mul_ln209_4_fu_903_p0 = mul_ln209_4_fu_903_p00;

assign mul_ln209_4_fu_903_p00 = mul_ln209_3_reg_2260;

assign mul_ln209_4_fu_903_p1 = mul_ln209_4_fu_903_p10;

assign mul_ln209_4_fu_903_p10 = stride_V_read_reg_2129;

assign mul_ln209_4_fu_903_p2 = (mul_ln209_4_fu_903_p0 * mul_ln209_4_fu_903_p1);

assign mul_ln209_5_fu_2123_p0 = mul_ln209_5_fu_2123_p00;

assign mul_ln209_5_fu_2123_p00 = mul_ln209_4_reg_2267;

assign mul_ln209_5_fu_2123_p1 = mul_ln209_5_fu_2123_p10;

assign mul_ln209_5_fu_2123_p10 = output_h_V_read_reg_2166;

assign mul_ln209_6_fu_1025_p1 = zext_ln209_2_reg_2273;

assign mul_ln209_6_fu_1025_p2 = ($signed(out_row_V_fu_1010_p2) * $signed({{1'b0}, {mul_ln209_6_fu_1025_p1}}));

assign mul_ln209_7_fu_1385_p1 = zext_ln209_2_reg_2273;

assign mul_ln209_7_fu_1385_p2 = ($signed(out_col_V_fu_1357_p2) * $signed({{1'b0}, {mul_ln209_7_fu_1385_p1}}));

assign mul_ln209_fu_990_p0 = zext_ln209_2_reg_2273;

assign mul_ln209_fu_990_p2 = ($signed({{1'b0}, {mul_ln209_fu_990_p0}}) * $signed(ap_phi_mux_t_V_phi_fu_634_p4));

assign or_ln209_1_fu_1264_p2 = (select_ln209_10_reg_2405 | icmp_ln52_reg_2365);

assign or_ln209_2_fu_1517_p2 = (select_ln209_10_reg_2405 | or_ln209_fu_1501_p2);

assign or_ln209_3_fu_1363_p2 = (select_ln209_22_fu_1351_p3 | select_ln209_10_reg_2405);

assign or_ln209_4_fu_1368_p2 = (or_ln209_3_fu_1363_p2 | icmp_ln52_reg_2365);

assign or_ln209_5_fu_1424_p2 = (select_ln209_31_fu_1403_p3 | select_ln209_22_fu_1351_p3);

assign or_ln209_6_fu_1430_p2 = (or_ln209_5_fu_1424_p2 | or_ln209_1_fu_1264_p2);

assign or_ln209_fu_1501_p2 = (or_ln99_1_reg_2430 | icmp_ln52_reg_2365);

assign or_ln70_1_fu_1550_p2 = (select_ln209_12_reg_2468 | icmp_ln895_4_fu_1545_p2);

assign or_ln70_2_fu_1652_p2 = (select_ln209_12_reg_2468 | icmp_ln895_5_fu_1646_p2);

assign or_ln70_fu_1118_p2 = (icmp_ln895_fu_1078_p2 | icmp_ln895_1_fu_1112_p2);

assign or_ln99_1_fu_1161_p2 = (or_ln99_fu_1155_p2 | icmp_ln99_1_fu_1149_p2);

assign or_ln99_2_fu_1595_p2 = (select_ln209_14_reg_2480 | or_ln70_1_fu_1550_p2);

assign or_ln99_3_fu_1600_p2 = (or_ln99_2_fu_1595_p2 | icmp_ln99_4_fu_1589_p2);

assign or_ln99_4_fu_1704_p2 = (select_ln209_14_reg_2480 | or_ln70_2_fu_1652_p2);

assign or_ln99_5_fu_1709_p2 = (or_ln99_4_fu_1704_p2 | icmp_ln99_5_fu_1699_p2);

assign or_ln99_fu_1155_p2 = (or_ln70_fu_1118_p2 | icmp_ln99_fu_1089_p2);

assign outStream_TDATA = outStream_V_data_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_1_ack_in = outStream_V_data_1_state[1'd1];

assign outStream_V_data_1_ack_out = outStream_TREADY;

assign outStream_V_data_1_load_A = (outStream_V_data_1_state_cmp_full & ~outStream_V_data_1_sel_wr);

assign outStream_V_data_1_load_B = (outStream_V_data_1_state_cmp_full & outStream_V_data_1_sel_wr);

assign outStream_V_data_1_sel = outStream_V_data_1_sel_rd;

assign outStream_V_data_1_state_cmp_full = ((outStream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_1_vld_in = call_ln134_write_output_fu_772_outStream_TVALID;

assign outStream_V_data_1_vld_out = outStream_V_data_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_in = call_ln134_write_output_fu_772_outStream_TVALID;

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_in = call_ln134_write_output_fu_772_outStream_TVALID;

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_in = call_ln134_write_output_fu_772_outStream_TVALID;

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_in = call_ln134_write_output_fu_772_outStream_TVALID;

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_in = call_ln134_write_output_fu_772_outStream_TVALID;

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_in = call_ln134_write_output_fu_772_outStream_TVALID;

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign out_col_V_fu_1357_p2 = (select_ln209_11_fu_1268_p3 + 9'd1);

assign out_row_V_fu_1010_p2 = ($signed(ap_phi_mux_t_V_phi_fu_634_p4) + $signed(9'd1));

assign ret_V_1_fu_942_p2 = ($signed(zext_ln1354_3_fu_939_p1) + $signed(5'd31));

assign ret_V_fu_924_p2 = ($signed(zext_ln1354_1_fu_921_p1) + $signed(10'd1023));

assign rhs_V_fu_1167_p1 = conv_count_V_1_fu_1130_p3;

assign row_idx_V_fu_1073_p2 = (zext_ln209_fu_1065_p1 + mul_ln209_reg_2344);

assign row_stride_V_fu_1258_p2 = (select_ln209_fu_1183_p3 + 2'd1);

assign select_ln178_10_fu_2104_p3 = ((icmp_ln1494_10_fu_2100_p2[0:0] === 1'b1) ? window_3_val_1_V_0_reg_2787 : line_buff_group_3_va_10_reg_2855);

assign select_ln178_1_fu_2035_p3 = ((icmp_ln1494_1_fu_2031_p2[0:0] === 1'b1) ? window_0_val_1_V_0_reg_2769 : line_buff_group_0_va_10_reg_2837);

assign select_ln178_3_fu_1955_p3 = ((icmp_ln1494_3_fu_1949_p2[0:0] === 1'b1) ? select_ln209_37_reg_2597_pp0_iter2_reg : zext_ln209_21_fu_1909_p1);

assign select_ln178_4_fu_2058_p3 = ((icmp_ln1494_4_fu_2054_p2[0:0] === 1'b1) ? window_1_val_1_V_0_reg_2775 : line_buff_group_1_va_10_reg_2843);

assign select_ln178_6_fu_1977_p3 = ((icmp_ln1494_6_fu_1971_p2[0:0] === 1'b1) ? select_ln209_37_reg_2597_pp0_iter2_reg : zext_ln209_21_fu_1909_p1);

assign select_ln178_7_fu_2081_p3 = ((icmp_ln1494_7_fu_2077_p2[0:0] === 1'b1) ? window_2_val_1_V_0_reg_2781 : line_buff_group_2_va_10_reg_2849);

assign select_ln178_9_fu_1999_p3 = ((icmp_ln1494_9_fu_1993_p2[0:0] === 1'b1) ? select_ln209_37_reg_2597_pp0_iter2_reg : zext_ln209_21_fu_1909_p1);

assign select_ln178_fu_1933_p3 = ((icmp_ln1494_fu_1927_p2[0:0] === 1'b1) ? select_ln209_37_reg_2597_pp0_iter2_reg : zext_ln209_21_fu_1909_p1);

assign select_ln209_10_fu_1058_p3 = ((icmp_ln52_fu_1016_p2[0:0] === 1'b1) ? icmp_ln55_reg_2339 : icmp_ln55_1_fu_1053_p2);

assign select_ln209_11_fu_1268_p3 = ((or_ln209_1_fu_1264_p2[0:0] === 1'b1) ? 9'd0 : t_V_2_reg_666);

assign select_ln209_12_fu_1296_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? icmp_ln895_3_fu_1290_p2 : select_ln209_3_fu_1200_p3);

assign select_ln209_13_fu_1308_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? icmp_ln887_4_fu_1303_p2 : select_ln209_4_fu_1211_p3);

assign select_ln209_14_fu_1320_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? icmp_ln99_3_fu_1315_p2 : select_ln209_5_fu_1218_p3);

assign select_ln209_15_fu_1505_p3 = ((or_ln209_1_reg_2460[0:0] === 1'b1) ? 9'd0 : mul_ln209_1_reg_2350);

assign select_ln209_16_fu_1327_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? icmp_ln123_2_reg_2314 : select_ln209_6_fu_1224_p3);

assign select_ln209_17_fu_1338_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? and_ln77_2_fu_1333_p2 : select_ln209_7_fu_1235_p3);

assign select_ln209_18_fu_1511_p3 = ((or_ln209_1_reg_2460[0:0] === 1'b1) ? 9'd0 : col_idx_V_reg_2420);

assign select_ln209_19_fu_1522_p3 = ((or_ln209_1_reg_2460[0:0] === 1'b1) ? 9'd0 : conv_count_V_1_reg_2425);

assign select_ln209_1_fu_1190_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? mul_ln209_6_reg_2383 : mul_ln209_reg_2344);

assign select_ln209_20_fu_1528_p3 = ((or_ln209_1_reg_2460[0:0] === 1'b1) ? 10'd1 : add_ln1353_reg_2435);

assign select_ln209_21_fu_1345_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? icmp_ln61_reg_2326 : select_ln209_8_fu_1242_p3);

assign select_ln209_22_fu_1351_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? icmp_ln58_reg_2333 : select_ln209_9_fu_1247_p3);

assign select_ln209_23_fu_1373_p3 = ((or_ln209_4_fu_1368_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_t_V_3_phi_fu_717_p4);

assign select_ln209_24_fu_1539_p3 = ((select_ln209_22_reg_2491[0:0] === 1'b1) ? mul_ln209_7_reg_2506 : select_ln209_15_fu_1505_p3);

assign select_ln209_25_fu_1395_p3 = ((select_ln209_22_fu_1351_p3[0:0] === 1'b1) ? icmp_ln123_4_fu_1390_p2 : select_ln209_16_fu_1327_p3);

assign select_ln209_26_fu_1577_p3 = ((select_ln209_22_reg_2491[0:0] === 1'b1) ? and_ln77_3_fu_1572_p2 : select_ln209_17_reg_2486);

assign select_ln209_27_fu_1583_p3 = ((select_ln209_22_reg_2491[0:0] === 1'b1) ? mul_ln209_7_reg_2506 : select_ln209_18_fu_1511_p3);

assign select_ln209_28_fu_1606_p3 = ((select_ln209_22_reg_2491[0:0] === 1'b1) ? or_ln99_3_fu_1600_p2 : or_ln209_2_fu_1517_p2);

assign select_ln209_29_fu_1617_p3 = ((select_ln209_22_reg_2491[0:0] === 1'b1) ? select_ln70_1_fu_1560_p3 : select_ln209_19_fu_1522_p3);

assign select_ln209_2_fu_1035_p3 = ((icmp_ln52_fu_1016_p2[0:0] === 1'b1) ? icmp_ln123_3_fu_1030_p2 : icmp_ln123_fu_995_p2);

assign select_ln209_30_fu_1630_p3 = ((select_ln209_22_reg_2491[0:0] === 1'b1) ? add_ln1353_1_fu_1624_p2 : select_ln209_20_fu_1528_p3);

assign select_ln209_31_fu_1403_p3 = ((select_ln209_22_fu_1351_p3[0:0] === 1'b1) ? icmp_ln61_reg_2326 : select_ln209_21_fu_1345_p3);

assign select_ln209_32_fu_1436_p3 = ((or_ln209_6_fu_1430_p2[0:0] === 1'b1) ? 4'd0 : t_V_4_reg_690);

assign select_ln209_33_fu_1681_p3 = ((select_ln209_31_reg_2520[0:0] === 1'b1) ? and_ln77_4_fu_1676_p2 : select_ln209_26_fu_1577_p3);

assign select_ln209_34_fu_1688_p3 = ((select_ln209_31_reg_2520[0:0] === 1'b1) ? add_ln209_3_fu_1640_p2 : select_ln209_27_fu_1583_p3);

assign select_ln209_35_fu_1715_p3 = ((select_ln209_31_reg_2520[0:0] === 1'b1) ? or_ln99_5_fu_1709_p2 : select_ln209_28_fu_1606_p3);

assign select_ln209_36_fu_1726_p3 = ((select_ln209_31_reg_2520[0:0] === 1'b1) ? select_ln70_2_fu_1663_p3 : select_ln209_29_fu_1617_p3);

assign select_ln209_37_fu_1739_p3 = ((select_ln209_31_reg_2520[0:0] === 1'b1) ? add_ln1353_2_fu_1733_p2 : select_ln209_30_fu_1630_p3);

assign select_ln209_3_fu_1200_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? icmp_ln895_2_fu_1195_p2 : icmp_ln895_fu_1078_p2);

assign select_ln209_4_fu_1211_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? icmp_ln887_3_fu_1207_p2 : icmp_ln887_fu_1084_p2);

assign select_ln209_5_fu_1218_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? icmp_ln99_2_reg_2309 : icmp_ln99_fu_1089_p2);

assign select_ln209_6_fu_1224_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? icmp_ln123_2_reg_2314 : icmp_ln123_1_fu_1098_p2);

assign select_ln209_7_fu_1235_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? and_ln77_1_fu_1230_p2 : and_ln77_fu_1143_p2);

assign select_ln209_8_fu_1242_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? icmp_ln61_reg_2326 : icmp_ln61_1_reg_2395);

assign select_ln209_9_fu_1247_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? icmp_ln58_reg_2333 : icmp_ln58_1_reg_2400);

assign select_ln209_fu_1183_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_t_V_1_phi_fu_706_p4);

assign select_ln49_fu_1252_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? out_row_V_reg_2360 : t_V_reg_630);

assign select_ln52_1_fu_1494_p3 = ((icmp_ln52_reg_2365[0:0] === 1'b1) ? 17'd1 : add_ln52_fu_1488_p2);

assign select_ln52_fu_1534_p3 = ((select_ln209_10_reg_2405[0:0] === 1'b1) ? row_stride_V_reg_2455 : select_ln209_reg_2445);

assign select_ln55_1_fu_1480_p3 = ((or_ln209_1_fu_1264_p2[0:0] === 1'b1) ? 15'd1 : add_ln55_fu_1474_p2);

assign select_ln55_fu_1410_p3 = ((select_ln209_22_fu_1351_p3[0:0] === 1'b1) ? out_col_V_fu_1357_p2 : select_ln209_11_fu_1268_p3);

assign select_ln58_1_fu_1466_p3 = ((or_ln209_4_fu_1368_p2[0:0] === 1'b1) ? 6'd1 : add_ln58_fu_1460_p2);

assign select_ln58_fu_1746_p3 = ((select_ln209_31_reg_2520[0:0] === 1'b1) ? col_stride_V_reg_2535 : select_ln209_23_reg_2501);

assign select_ln70_1_fu_1560_p3 = ((or_ln70_1_fu_1550_p2[0:0] === 1'b1) ? 9'd0 : add_ln214_1_fu_1555_p2);

assign select_ln70_2_fu_1663_p3 = ((or_ln70_2_fu_1652_p2[0:0] === 1'b1) ? 9'd0 : add_ln214_2_fu_1657_p2);

assign sext_ln162_1_fu_1897_p1 = $signed(add_ln162_1_fu_1892_p2);

assign sext_ln162_2_fu_2015_p1 = $signed(add_ln162_2_reg_2749);

assign sext_ln162_3_fu_2019_p1 = $signed(add_ln162_3_reg_2754);

assign sext_ln162_4_fu_2023_p1 = $signed(add_ln162_4_reg_2759);

assign sext_ln162_5_fu_2027_p1 = $signed(add_ln162_5_reg_2764);

assign sext_ln162_fu_1880_p1 = $signed(add_ln162_fu_1875_p2);

assign sext_ln203_fu_1756_p1 = $signed(add_ln203_fu_1751_p2);

assign zext_ln1354_1_fu_921_p1 = output_h_V_read_reg_2166;

assign zext_ln1354_2_fu_930_p1 = output_w_V_read_reg_2160;

assign zext_ln1354_3_fu_939_p1 = input_fold_ch_V_read_reg_2137;

assign zext_ln1354_fu_912_p1 = stride_V_read_reg_2129;

assign zext_ln178_1_fu_1962_p1 = select_ln178_3_fu_1955_p3;

assign zext_ln178_2_fu_1984_p1 = select_ln178_6_fu_1977_p3;

assign zext_ln178_3_fu_2006_p1 = select_ln178_9_fu_1999_p3;

assign zext_ln178_fu_1940_p1 = select_ln178_fu_1933_p3;

assign zext_ln209_14_fu_1021_p1 = $unsigned(out_row_V_fu_1010_p2);

assign zext_ln209_15_fu_1276_p1 = row_stride_V_fu_1258_p2;

assign zext_ln209_16_fu_1280_p1 = row_stride_V_fu_1258_p2;

assign zext_ln209_17_fu_1381_p1 = $unsigned(out_col_V_fu_1357_p2);

assign zext_ln209_18_fu_1637_p1 = col_stride_V_reg_2535;

assign zext_ln209_19_fu_1695_p1 = select_ln209_34_fu_1688_p3;

assign zext_ln209_1_fu_1103_p1 = ap_phi_mux_t_V_3_phi_fu_717_p4;

assign zext_ln209_20_fu_1869_p1 = select_ln209_36_reg_2591;

assign zext_ln209_21_fu_1909_p1 = select_ln209_36_reg_2591_pp0_iter2_reg;

assign zext_ln209_22_fu_1872_p1 = select_ln209_37_reg_2597;

assign zext_ln209_2_fu_909_p1 = stride_V_read_reg_2129;

assign zext_ln209_3_fu_986_p1 = $unsigned(ap_phi_mux_t_V_phi_fu_634_p4);

assign zext_ln209_4_fu_1069_p1 = ap_phi_mux_t_V_1_phi_fu_706_p4;

assign zext_ln209_5_fu_1094_p1 = $unsigned(t_V_2_reg_666);

assign zext_ln209_fu_1065_p1 = ap_phi_mux_t_V_1_phi_fu_706_p4;

assign zext_ln215_1_fu_1613_p1 = select_ln70_1_fu_1560_p3;

assign zext_ln215_2_fu_1722_p1 = select_ln70_2_fu_1663_p3;

assign zext_ln879_fu_1764_p1 = select_ln209_32_reg_2542;

always @ (posedge ap_clk) begin
    zext_ln209_2_reg_2273[8:2] <= 7'b0000000;
    mul_ln203_reg_2547[0] <= 1'b0;
    mul_ln203_reg_2547_pp0_iter1_reg[0] <= 1'b0;
end

endmodule //yolo_max_pool_top
